"2006-11-04 17:45:18 -0500"
diff --git a/main.c b/main.c
index 00d76312..89977f69 100644
--- a/main.c
+++ b/main.c
@@ -2,25 +2,15 @@
 /* Toybox infrastructure.
  *
  * Copyright 2006 Rob Landley <rob@landley.net>
- *
- * Licensed under GPL version 2, see file LICENSE in this tarball for details.
  */
 
 #include "toys.h"
 
-// The monster fun applet list.
+// Populate toy_list[].
 
 struct toy_list toy_list[] = {
-	// This one is out of order on purpose.
-	{"toybox", toybox_main, 0},
-	// The rest of these are alphabetical, for binary search.
-	USE_TOYSH({"cd", cd_main, TOYFLAG_NOFORK},)
-	USE_DF({"df", df_main, TOYFLAG_USR|TOYFLAG_SBIN},)
-	USE_TOYSH({"exit", exit_main, TOYFLAG_NOFORK},)
-	USE_HELLO({"hello", hello_main, TOYFLAG_NOFORK|TOYFLAG_USR},)
-	USE_TOYSH({"sh", toysh_main, TOYFLAG_BIN},)
-	USE_TOYSH({"toysh", toysh_main, TOYFLAG_BIN},)
-	USE_WHICH({"which", which_main, TOYFLAG_USR|TOYFLAG_BIN},)
+#define FROM_MAIN
+#include "toys/toylist.h"
 };
 
 #define TOY_LIST_LEN (sizeof(toy_list)/sizeof(struct toy_list))
diff --git a/toys.h b/toys.h
index c07e565b..003a827c 100644
--- a/toys.h
+++ b/toys.h
@@ -24,32 +24,16 @@
 #include <unistd.h>
 
 #include "lib/lib.h"
+#include "gen_config.h"
+#include "toys/toylist.h"
 
-int cd_main(void);
-int df_main(void);
-int exit_main(void);
-int hello_main(void);
-int toybox_main(void);
-int toysh_main(void);
-int which_main(void);
-
-#define TOYFLAG_USR      (1<<0)
-#define TOYFLAG_BIN      (1<<1)
-#define TOYFLAG_SBIN     (1<<2)
-#define TOYMASK_LOCATION ((1<<4)-1)
-
-#define TOYFLAG_NOFORK   (1<<4)
+// These live in main.c
 
-extern struct toy_list {
-	char *name;
-	int (*toy_main)(void);
-	int flags;
-} toy_list[];
 struct toy_list *toy_find(char *name);
 void toy_init(struct toy_list *which, char *argv[]);
 void toy_exec(char *argv[]);
 
-// Global context for this applet.
+// Global context for any applet.
 
 extern struct toy_context {
 	struct toy_list *which;  // Which entry in toy_list is this one?
@@ -58,24 +42,3 @@ extern struct toy_context {
 	char **argv;             // Command line arguments
 	char buf[4096];
 } toys;
-
-struct exit_data {;};
-struct cd_data {;};
-struct toybox_data {;};
-struct toysh_data {;};
-struct df_data {
-	struct string_list *fstype;
-	long units;
-};
-
-union toy_union {
-	struct exit_data exit;
-	struct cd_data cd;
-	struct toybox_data toybox;
-	struct toysh_data toysh;
-	struct df_data df;
-} toy;
-
-// Pending the addition of menuconfig...
-
-#include "gen_config.h"
diff --git a/toys/Config.in b/toys/Config.in
index 89481bde..2120636c 100644
--- a/toys/Config.in
+++ b/toys/Config.in
@@ -34,6 +34,14 @@ config HELLO
 	help
 	  A hello world program.  You don't need this.
 
+config PWD
+	bool "pwd"
+	default n
+	help
+	  usage: pwd
+
+	  The print working directory command prints the current directory.
+
 config TOYSH
 	bool "sh (toysh)"
 	default n
diff --git a/toys/pwd.c b/toys/pwd.c
new file mode 100644
index 00000000..3ba7ae0d
--- /dev/null
+++ b/toys/pwd.c
@@ -0,0 +1,16 @@
+/* vi: set sw=4 ts=4: */
+/*
+ * pwd.c - Print working directory.
+ */
+
+#include "toys.h"
+
+int pwd_main(void)
+{
+	char *pwd = xgetcwd();
+
+	puts(pwd);
+	if (CFG_TOYS_FREE) free(pwd);
+
+	return 0;
+}
diff --git a/toys/toylist.h b/toys/toylist.h
new file mode 100644
index 00000000..87716b0f
--- /dev/null
+++ b/toys/toylist.h
@@ -0,0 +1,62 @@
+/* vi: set ts=4 :*/
+/* Toybox infrastructure.
+ *
+ * Copyright 2006 Rob Landley <rob@landley.net>
+ */
+
+
+// When #included from main.c, provide the guts for toy_list[]
+
+#ifdef FROM_MAIN
+#undef NEWTOY
+#undef OLDTOY
+#define NEWTOY(name, flags) {#name, name##_main, flags},
+#define OLDTOY(name, oldname, flags) {#name, oldname##_main, flags},
+
+// When #included from toys.h, provide function declarations and structs.
+// The #else is because main.c #includes this file twice.
+
+#else
+#define NEWTOY(name, flags) int name##_main(void);
+#define OLDTOY(name, oldname, flags)
+
+struct df_data {
+	struct string_list *fstype;
+	long units;
+};
+
+union toy_union {
+	struct df_data df;
+} toy;
+
+#define TOYFLAG_USR      (1<<0)
+#define TOYFLAG_BIN      (1<<1)
+#define TOYFLAG_SBIN     (1<<2)
+#define TOYMASK_LOCATION ((1<<4)-1)
+
+#define TOYFLAG_NOFORK   (1<<4)
+
+extern struct toy_list {
+	char *name;
+	int (*toy_main)(void);
+	int flags;
+} toy_list[];
+
+#endif
+
+// List of all the applets toybox can provide.
+
+// This one is out of order on purpose.
+
+NEWTOY(toybox, 0)
+
+// The rest of these are alphabetical, for binary search.
+
+USE_TOYSH(NEWTOY(cd, TOYFLAG_NOFORK))
+USE_DF(NEWTOY(df, TOYFLAG_USR|TOYFLAG_SBIN))
+USE_TOYSH(NEWTOY(exit, TOYFLAG_NOFORK))
+USE_HELLO(NEWTOY(hello, TOYFLAG_NOFORK|TOYFLAG_USR))
+USE_PWD(NEWTOY(pwd, TOYFLAG_BIN))
+USE_TOYSH(OLDTOY(sh, toysh, TOYFLAG_BIN))
+USE_TOYSH(NEWTOY(toysh, TOYFLAG_BIN))
+USE_WHICH(NEWTOY(which, TOYFLAG_USR|TOYFLAG_BIN))