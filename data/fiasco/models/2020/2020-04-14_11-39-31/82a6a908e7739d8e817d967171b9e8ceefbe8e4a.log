"2020-04-14 11:39:31 +0200"
diff --git a/src/Modules.arm b/src/Modules.arm
index d2a2166..a967d20 100644
--- a/src/Modules.arm
+++ b/src/Modules.arm
@@ -130,11 +130,15 @@ INTERFACES_KERNEL-$(CONFIG_ARM_CORTEX_A9) += scu
 INTERFACES_KERNEL-$(CONFIG_BIT32) += kern_lib_page
 INTERFACES_KERNEL-$(CONFIG_SERIAL) += uart_console
 INTERFACES_KERNEL-$(CONFIG_ARM_EM_TZ) += vm
-INTERFACES_KERNEL-$(CONFIG_CPU_VIRT) += hyp_vm_state vgic vgic_v2 vgic_v3 vgic_global
+INTERFACES_KERNEL-$(CONFIG_CPU_VIRT) += hyp_vm_state vgic vgic_global
+INTERFACES_KERNEL-$(CONFIG_CPU_VIRT)$(CONFIG_HAVE_ARM_GICV2) += vgic_v2
+INTERFACES_KERNEL-$(CONFIG_CPU_VIRT)$(CONFIG_HAVE_ARM_GICV3) += vgic_v3
 INTERFACES_KERNEL-$(CONFIG_ARM_SMC_USER) += smc_user
-INTERFACES_KERNEL-$(CONFIG_ARM_GICV3) += gic_redist
-INTERFACES_KERNEL-$(CONFIG_ARM_GIC) += gic_cpu_v2 gic_dist gic gic_v2
-INTERFACES_KERNEL-$(CONFIG_ARM_GICV3) += gic_v3 gic_cpu_v3
+INTERFACES_KERNEL-$(CONFIG_ARM_GIC) += gic_dist gic
+INTERFACES_KERNEL-$(CONFIG_HAVE_ARM_GICV3) += gic_redist
+INTERFACES_KERNEL-$(CONFIG_HAVE_ARM_GICV2) += gic_v2 gic_cpu_v2
+INTERFACES_KERNEL-$(CONFIG_HAVE_ARM_GICV3) += gic_v3 gic_cpu_v3
+
 INTERFACES_KERNEL += boot_infos
 
 
@@ -154,8 +158,7 @@ else
   entry_frame_IMPL	:= entry_frame entry_frame-arm
 endif
 fpu_IMPL		:= fpu fpu-arm
-gic_IMPL			:= gic
-gic_IMPL			+= $(gic_IMPL-y)
+gic_IMPL		:= gic
 gic_cpu_v3_IMPL		:= gic_cpu_v3 gic_cpu_v3-$(BITS)
 gic_dist_IMPL		:= gic_dist
 hyp_vm_state_IMPL	:= hyp_vm_state hyp_vm_state-$(BITS)
@@ -338,7 +341,7 @@ endif
 include $(MODULES_FILE_BSP)
 VPATH                   += $(BSP_SRC_DIR)
 PREPROCESS_PARTS	+= $(PREPROCESS_PARTS-y)
-INTERFACES_KERNEL       += $(INTERFACES_KERNEL-y)
+INTERFACES_KERNEL       += $(INTERFACES_KERNEL-y) $(INTERFACES_KERNEL-yy)
 INTERFACES_JDB		+= $(INTERFACES_JDB-y)
 TRAMP_MP_ASM_INCLUDE    ?= kern/arm/tramp-mp-asm-default.h
 CPPFLAGS                += -DTRAMP_MP_ASM_INCLUDE=\"$(srcdir)/$(TRAMP_MP_ASM_INCLUDE)\"
diff --git a/src/kern/arm/64/bootstrap-arm-64.cpp b/src/kern/arm/64/bootstrap-arm-64.cpp
index 3c5948b..19d0f1e 100644
--- a/src/kern/arm/64/bootstrap-arm-64.cpp
+++ b/src/kern/arm/64/bootstrap-arm-64.cpp
@@ -122,7 +122,7 @@ Bootstrap::map_ram(Kpdir *kd, Bs_alloc &alloc)
 }
 
 
-IMPLEMENTATION [arm && pic_gic && !arm_gicv3]:
+IMPLEMENTATION [arm && pic_gic && !have_arm_gicv3]:
 
 PUBLIC static void
 Bootstrap::config_gic_ns()
@@ -135,11 +135,11 @@ Bootstrap::config_gic_ns()
   for (unsigned i = 0; i < n / 32; ++i)
     dist.write<Unsigned32>(~0U, 0x80 + i * 4);
 
-  cpu.write<Unsigned32>(0xf0, 4 /*PMR*/);
+  cpu.write<Unsigned32>(0xff, 4 /*PMR*/);
   Mmu<Bootstrap::Cache_flush_area, true>::flush_cache();
 }
 
-IMPLEMENTATION [arm && (!pic_gic || arm_gicv3)]:
+IMPLEMENTATION [arm && (!pic_gic || have_arm_gicv3)]:
 
 PUBLIC static inline void
 Bootstrap::config_gic_ns() {}
diff --git a/src/kern/arm/64/kernel_thread-arm-64.cpp b/src/kern/arm/64/kernel_thread-arm-64.cpp
index 7848541..ef8b953 100644
--- a/src/kern/arm/64/kernel_thread-arm-64.cpp
+++ b/src/kern/arm/64/kernel_thread-arm-64.cpp
@@ -1,4 +1,4 @@
-IMPLEMENTATION [arm && mp && pic_gic && !arm_gicv3]:
+IMPLEMENTATION [arm && mp && pic_gic && have_arm_gicv2]:
 
 PRIVATE static inline NOEXPORT
 void
@@ -8,24 +8,13 @@ Kernel_thread::boot_app_cpu_gic(Mp_boot_info volatile *inf)
   inf->gic_cpu_base = Mem_layout::Gic_cpu_phys_base;
 }
 
-IMPLEMENTATION [arm && mp && pic_gic && arm_gicv3]:
-
-PRIVATE static inline NOEXPORT
-void
-Kernel_thread::boot_app_cpu_gic(Mp_boot_info volatile *inf)
-{
-  inf->gic_dist_base = Mem_layout::Gic_redist_phys_base;
-  inf->gic_cpu_base = 0;
-}
-
-IMPLEMENTATION [arm && mp && !pic_gic]:
+IMPLEMENTATION [arm && mp && (!pic_gic || !have_arm_gicv2)]:
 
 PRIVATE static inline NOEXPORT
 void
 Kernel_thread::boot_app_cpu_gic(Mp_boot_info volatile *inf)
 {
   inf->gic_dist_base = 0;
-  inf->gic_cpu_base = 0;
 }
 
 IMPLEMENTATION [arm && mp]:
diff --git a/src/kern/arm/64/tramp-mp.S b/src/kern/arm/64/tramp-mp.S
index b4cd284..25fee7f 100644
--- a/src/kern/arm/64/tramp-mp.S
+++ b/src/kern/arm/64/tramp-mp.S
@@ -79,9 +79,14 @@ _tramp_mp_entry:
 	b.eq	.Lno_gic
 	mov	w4, #0xffffffff
 	str	w4, [x16, 0x80]
+	mov	x4, #0xff
 	ldr	x14, _tramp_mp_gic_cpu_base
-	mov	w4, #0xf0
+	cmp	x14, #0
+	b.eq	.Lgic_v3_cpu
 	str	w4, [x14, 4]
+	b	.Lno_gic
+.Lgic_v3_cpu:
+	msr	S3_0_C4_C6_0, x4
 .Lno_gic:
 	// switch from EL3 to EL2...
 	tlbi	alle2is
diff --git a/src/kern/arm/Kconfig b/src/kern/arm/Kconfig
index 0791ff2..09447d5 100644
--- a/src/kern/arm/Kconfig
+++ b/src/kern/arm/Kconfig
@@ -327,24 +327,6 @@ config ARM_PSCI_HVC
 
 endchoice
 
-choice
-        prompt "ARM GIC version"
-        depends on ARM_GIC
-
-config ARM_GICV2
-        bool "Use ARM GICv2 interface"
-        depends on HAVE_ARM_GICV2
-        help
-          Use GIC version 2 as interrupt controller.
-
-config ARM_GICV3
-        bool "Use ARM GICv3 interface"
-        depends on HAVE_ARM_GICV3
-        help
-          Use GIC version 3 interface.
-
-endchoice
-
 config ARM_1176_CACHE_ALIAS_FIX
 	bool "Use cache restriction to supress aliasing issue on ARM1176"
 	depends on ARM_1176
diff --git a/src/kern/arm/bsp/virt/pic-arm-virt.cpp b/src/kern/arm/bsp/virt/pic-arm-virt.cpp
index b0689aa..1d946bb 100644
--- a/src/kern/arm/bsp/virt/pic-arm-virt.cpp
+++ b/src/kern/arm/bsp/virt/pic-arm-virt.cpp
@@ -1,15 +1,10 @@
-INTERFACE [arm && pf_arm_virt]:
-
-#include "initcalls.h"
-#include "types.h"
-#include "gic.h"
-
-class Irq_base;
-
 //-------------------------------------------------------------------
 IMPLEMENTATION [arm && pf_arm_virt]:
 
 #include "irq_mgr_multi_chip.h"
+#include "gic_v2.h"
+#include "gic_v3.h"
+
 
 PUBLIC static
 void Pic::init_ap(Cpu_number cpu, bool resume)
@@ -17,13 +12,6 @@ void Pic::init_ap(Cpu_number cpu, bool resume)
   gic->init_ap(cpu, resume);
 }
 
-//-------------------------------------------------------------------
-IMPLEMENTATION [arm && pf_arm_virt && arm_gicv3]:
-
-#include "irq_mgr_multi_chip.h"
-#include "gic_v2.h"
-#include "gic_v3.h"
-
 PUBLIC static FIASCO_INIT
 void Pic::init()
 {
@@ -54,21 +42,3 @@ void Pic::init()
   Irq_mgr::mgr = m;
 }
 
-//-------------------------------------------------------------------
-IMPLEMENTATION [arm && pf_arm_virt && !arm_gicv3]:
-
-#include "irq_mgr_multi_chip.h"
-#include "gic_v2.h"
-
-PUBLIC static FIASCO_INIT
-void Pic::init()
-{
-  typedef Irq_mgr_multi_chip<9> Mgr;
-
-  gic = new Boot_object<Gic_v2>(Kmem::mmio_remap(Mem_layout::Gic_cpu_phys_base),
-                                Kmem::mmio_remap(Mem_layout::Gic_dist_phys_base));
-
-  Mgr *m = new Boot_object<Mgr>(1);
-  m->add_chip(0, gic, gic->nr_irqs());
-  Irq_mgr::mgr = m;
-}
diff --git a/src/kern/arm/gic_dist.cpp b/src/kern/arm/gic_dist.cpp
index 9856bb8..7d26575 100644
--- a/src/kern/arm/gic_dist.cpp
+++ b/src/kern/arm/gic_dist.cpp
@@ -11,6 +11,8 @@ private:
   Spin_lock<> _lock;
 
 public:
+  using V2 = cxx::integral_constant<int, 2>;
+  using V3 = cxx::integral_constant<int, 3>;
   enum
   {
     GICD_CTRL         = 0x000,
@@ -86,29 +88,8 @@ INTERFACE [arm && !arm_em_tz]:
 
 EXTENSION class Gic_dist { enum { Config_tz_sec = 0 }; };
 
-// ------------------------------------------------------------------------
-IMPLEMENTATION:
-
-EXTENSION class Gic_dist
-{
-public:
-  using V2 = cxx::integral_constant<int, 2>;
-  using V3 = cxx::integral_constant<int, 3>;
-};
-
-PUBLIC inline
-void
-Gic_dist::set_cpu(Mword pin, Unsigned8 target, V2)
-{
-  _dist.write<Unsigned8>(target, GICD_ITARGETSR + pin);
-}
-
-PUBLIC inline
-Unsigned32
-Gic_dist::itarget(unsigned offset)
-{
-  return _dist.read<Unsigned32>(GICD_ITARGETSR + offset);
-}
+//-------------------------------------------------------------------
+IMPLEMENTATION [have_arm_gicv2]:
 
 PUBLIC inline
 void
@@ -121,6 +102,12 @@ Gic_dist::init_targets(unsigned max, V2)
     _dist.write<Unsigned32>(t, GICD_ITARGETSR + i);
 }
 
+PUBLIC inline
+void
+Gic_dist::set_cpu(Mword pin, Unsigned8 target, V2)
+{
+  _dist.write<Unsigned8>(target, GICD_ITARGETSR + pin);
+}
 
 PUBLIC inline
 void
@@ -145,8 +132,57 @@ Gic_dist::enable(V2)
   _dist.write<Unsigned32>(dist_enable, GICD_CTRL);
 }
 
+PUBLIC inline
+void
+Gic_dist::cpu_init_v2()
+{
+  Mword sec_irqs;
+
+  if (Config_tz_sec)
+    sec_irqs = 0x00000f00;
+
+  _dist.write<Unsigned32>(0xffffffff, GICD_ICENABLER);
+  if (Config_tz_sec)
+    {
+      _dist.write<Unsigned32>(0x00000f00, GICD_ISENABLER);
+      _dist.write<Unsigned32>(~sec_irqs, GICD_IGROUPR);
+    }
+  else
+    {
+      _dist.write<Unsigned32>(0x0000001e, GICD_ISENABLER);
+      _dist.write<Unsigned32>(0, GICD_IGROUPR);
+    }
+
+  _dist.write<Unsigned32>(0xffffffff, GICD_ICPENDR);
+
+  _dist.write<Unsigned32>(0xffffffff, 0x380); // clear active
+  _dist.write<Unsigned32>(0xffffffff, 0xf10); // sgi pending clear
+  _dist.write<Unsigned32>(0xffffffff, 0xf14); // sgi pending clear
+  _dist.write<Unsigned32>(0xffffffff, 0xf18); // sgi pending clear
+  _dist.write<Unsigned32>(0xffffffff, 0xf1c); // sgi pending clear
+
+  for (unsigned g = 0; g < 32; g += 4)
+    {
+      Mword v = 0;
+      if (Config_tz_sec)
+        {
+          unsigned b = (sec_irqs >> g) & 0xf;
+
+          for (int i = 0; i < 4; ++i)
+            if (b & (1 << i))
+              v |= 0x40 << (i * 8);
+            else
+              v |= 0xa0 << (i * 8);
+        }
+      else
+        v = 0xa0a0a0a0;
+
+      _dist.write<Unsigned32>(v, GICD_IPRIORITYR + g);
+    }
+}
+
 //-------------------------------------------------------------------
-IMPLEMENTATION [arm_gicv3]:
+IMPLEMENTATION [have_arm_gicv3]:
 
 #include "cpu.h"
 
@@ -184,9 +220,21 @@ Gic_dist::enable(V3)
   _dist.write<Unsigned32>(dist_enable, GICD_CTRL);
 }
 
+PUBLIC inline
+void
+Gic_dist::cpu_init(V3)
+{}
+
 //-------------------------------------------------------------------
 IMPLEMENTATION:
 
+PUBLIC inline
+Unsigned32
+Gic_dist::itarget(unsigned offset)
+{
+  return _dist.read<Unsigned32>(GICD_ITARGETSR + offset);
+}
+
 PUBLIC explicit inline
 Gic_dist::Gic_dist(Address dist_base)
   : _dist(dist_base)
@@ -308,60 +356,6 @@ Gic_dist::set_pending_irq(unsigned idx, Unsigned32 val)
     }
 }
 
-PUBLIC inline
-void
-Gic_dist::cpu_init(V3)
-{}
-
-PUBLIC inline
-void
-Gic_dist::cpu_init_v2()
-{
-  Mword sec_irqs;
-
-  if (Config_tz_sec)
-    sec_irqs = 0x00000f00;
-
-  _dist.write<Unsigned32>(0xffffffff, GICD_ICENABLER);
-  if (Config_tz_sec)
-    {
-      _dist.write<Unsigned32>(0x00000f00, GICD_ISENABLER);
-      _dist.write<Unsigned32>(~sec_irqs, GICD_IGROUPR);
-    }
-  else
-    {
-      _dist.write<Unsigned32>(0x0000001e, GICD_ISENABLER);
-      _dist.write<Unsigned32>(0, GICD_IGROUPR);
-    }
-
-  _dist.write<Unsigned32>(0xffffffff, GICD_ICPENDR);
-
-  _dist.write<Unsigned32>(0xffffffff, 0x380); // clear active
-  _dist.write<Unsigned32>(0xffffffff, 0xf10); // sgi pending clear
-  _dist.write<Unsigned32>(0xffffffff, 0xf14); // sgi pending clear
-  _dist.write<Unsigned32>(0xffffffff, 0xf18); // sgi pending clear
-  _dist.write<Unsigned32>(0xffffffff, 0xf1c); // sgi pending clear
-
-  for (unsigned g = 0; g < 32; g += 4)
-    {
-      Mword v = 0;
-      if (Config_tz_sec)
-        {
-          unsigned b = (sec_irqs >> g) & 0xf;
-
-          for (int i = 0; i < 4; ++i)
-            if (b & (1 << i))
-              v |= 0x40 << (i * 8);
-            else
-              v |= 0xa0 << (i * 8);
-        }
-      else
-        v = 0xa0a0a0a0;
-
-      _dist.write<Unsigned32>(v, GICD_IPRIORITYR + g);
-    }
-}
-
 PUBLIC inline
 void
 Gic_dist::disable_irq(unsigned irq)
@@ -420,4 +414,3 @@ Gic_dist::irq_prio(unsigned irq)
   return _dist.read<Unsigned8>(GICD_IPRIORITYR + irq);
 }
 
-