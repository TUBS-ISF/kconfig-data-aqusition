"2020-05-19 11:29:13 +0200"
diff --git a/src/kern/arm/bsp/armada37xx/Kconfig b/src/kern/arm/bsp/armada37xx/Kconfig
new file mode 100644
index 0000000..594b6a4
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/Kconfig
@@ -0,0 +1,5 @@
+# PF: ARMADA37XX
+# PFDESCR: Marvell Armada 37xx
+# PFSELECT: CAN_ARM_CPU_CORTEX_A53 HAS_ARM_PSCI ARM_PSCI
+# PFSELECT: ARM_GIC HAVE_ARM_GICV3
+# PFDEPENDS: ARM
diff --git a/src/kern/arm/bsp/armada37xx/Modules b/src/kern/arm/bsp/armada37xx/Modules
new file mode 100644
index 0000000..cfe6c61
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/Modules
@@ -0,0 +1,16 @@
+# vim:set ft=make:
+
+PREPROCESS_PARTS      += generic_tickless_idle arm_generic_timer pic_gic
+INTERFACES_KERNEL     += generic_timer
+OBJECTS_LIBUART       += uart_mvebu.o
+CXXFLAGS_uart-libuart += $(call LIBUART_UART, mvebu)
+RAM_PHYS_BASE         := 0x0
+
+clock_IMPL            += clock-generic
+config_IMPL           += config-arm-armada37xx
+mem_layout_IMPL       += mem_layout-arm-armada37xx
+pic_IMPL              += pic-gic pic-arm-armada37xx
+platform_control_IMPL += platform_control-arm-armada37xx
+reset_IMPL            += reset-arm-armada37xx
+timer_IMPL            += timer-arm-generic timer-arm-armada37xx
+timer_tick_IMPL       += timer_tick-single-vector
diff --git a/src/kern/arm/bsp/armada37xx/config-arm-armada37xx.cpp b/src/kern/arm/bsp/armada37xx/config-arm-armada37xx.cpp
new file mode 100644
index 0000000..6550ca6
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/config-arm-armada37xx.cpp
@@ -0,0 +1,3 @@
+INTERFACE [arm && pf_armada37xx]:
+
+#define TARGET_NAME "Marvell Armada 37XX"
diff --git a/src/kern/arm/bsp/armada37xx/mem_layout-arm-armada37xx.cpp b/src/kern/arm/bsp/armada37xx/mem_layout-arm-armada37xx.cpp
new file mode 100644
index 0000000..6cba20e
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/mem_layout-arm-armada37xx.cpp
@@ -0,0 +1,11 @@
+INTERFACE [arm && pf_armada37xx]: //---------------------------------------
+
+EXTENSION class Mem_layout
+{
+public:
+  enum Phys_layout_armada37xx : Address
+  {
+    Gic_dist_phys_base   = 0xd1d00000,
+    Gic_redist_phys_base = 0xd1d40000,
+  };
+};
diff --git a/src/kern/arm/bsp/armada37xx/pic-arm-armada37xx.cpp b/src/kern/arm/bsp/armada37xx/pic-arm-armada37xx.cpp
new file mode 100644
index 0000000..7af5dc2
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/pic-arm-armada37xx.cpp
@@ -0,0 +1,34 @@
+INTERFACE [arm && pic_gic && pf_armada37xx]:
+
+#include "gic.h"
+#include "initcalls.h"
+
+// ------------------------------------------------------------------------
+IMPLEMENTATION [arm && pic_gic && pf_armada37xx]:
+
+#include "gic_v3.h"
+#include "irq_mgr_multi_chip.h"
+#include "kmem.h"
+
+PUBLIC static FIASCO_INIT
+void
+Pic::init()
+{
+  typedef Irq_mgr_multi_chip<9> M;
+
+  gic = new Boot_object<Gic_v3>(Kmem::mmio_remap(Mem_layout::Gic_dist_phys_base),
+                                Kmem::mmio_remap(Mem_layout::Gic_redist_phys_base));
+
+  M *m = new Boot_object<M>(1);
+  m->add_chip(0, gic, gic->nr_irqs());
+  Irq_mgr::mgr = m;
+}
+
+// ------------------------------------------------------------------------
+IMPLEMENTATION [arm && pic_gic && mp && pf_armada37xx]:
+
+PUBLIC static
+void Pic::init_ap(Cpu_number cpu, bool resume)
+{
+  gic->init_ap(cpu, resume);
+}
diff --git a/src/kern/arm/bsp/armada37xx/platform_control-arm-armada37xx.cpp b/src/kern/arm/bsp/armada37xx/platform_control-arm-armada37xx.cpp
new file mode 100644
index 0000000..721d6cc
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/platform_control-arm-armada37xx.cpp
@@ -0,0 +1,16 @@
+IMPLEMENTATION [arm && pf_armada37xx]:
+
+#include <cstdio>
+
+PUBLIC static
+void
+Platform_control::boot_ap_cpus(Address phys_tramp_mp_addr)
+{
+  for (int i = 1; i < 2; ++i)
+    {
+      int r;
+      static unsigned const coreid[2] = { 0, 1 };
+      if ((r = cpu_on(coreid[i], phys_tramp_mp_addr)))
+        printf("KERNEL: PSCI CPU_ON for CPU%d failed: %d\n", i, r);
+    }
+}
diff --git a/src/kern/arm/bsp/armada37xx/reset-arm-armada37xx.cpp b/src/kern/arm/bsp/armada37xx/reset-arm-armada37xx.cpp
new file mode 100644
index 0000000..d707e91
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/reset-arm-armada37xx.cpp
@@ -0,0 +1,12 @@
+IMPLEMENTATION [arm && pf_armada37xx]:
+
+#include "platform_control.h"
+
+void __attribute__ ((noreturn))
+platform_reset(void)
+{
+  Platform_control::system_reset();
+
+  for (;;)
+    ;
+}
diff --git a/src/kern/arm/bsp/armada37xx/timer-arm-armada37xx.cpp b/src/kern/arm/bsp/armada37xx/timer-arm-armada37xx.cpp
new file mode 100644
index 0000000..6bf18e1
--- /dev/null
+++ b/src/kern/arm/bsp/armada37xx/timer-arm-armada37xx.cpp
@@ -0,0 +1,17 @@
+// --------------------------------------------------------------------------
+IMPLEMENTATION [arm && pf_armada37xx && arm_generic_timer]:
+
+PUBLIC static
+unsigned Timer::irq()
+{
+  switch (Gtimer::Type)
+    {
+    case Generic_timer::Physical: return 29;
+    case Generic_timer::Virtual: return 27;
+    case Generic_timer::Hyp:     return 26;
+    };
+}
+
+IMPLEMENT
+void Timer::bsp_init(Cpu_number)
+{}