"2018-05-09 16:02:56 +0200"
diff --git a/src/kern/arm/Kconfig b/src/kern/arm/Kconfig
index f3b83a9..745a21b 100644
--- a/src/kern/arm/Kconfig
+++ b/src/kern/arm/Kconfig
@@ -268,6 +268,26 @@ config ARM_PSCI
           Use the "Power State Coordination Interface" (PSCI) for system
           functions such as booting CPUs.
 
+choice
+        prompt "PSCI call method"
+        depends on ARM_PSCI
+        default ARM_PSCI_SMC
+
+config ARM_PSCI_SMC
+        bool "SMC"
+        help
+          Choose this if the platform uses SMC as a conduit to
+          access PSCI functions.
+
+config ARM_PSCI_HVC
+        bool "HVC"
+        depends on HAS_CPU_VIRT
+        help
+          Choose this if the platform uses HVC as a conduit to
+          access PSCI functions.
+
+endchoice
+
 config ARM_1176_CACHE_ALIAS_FIX
 	bool "Use cache restriction to supress aliasing issue on ARM1176"
 	depends on ARM_1176
diff --git a/src/kern/arm/platform_control-arm-psci.cpp b/src/kern/arm/platform_control-arm-psci.cpp
index 3730e51..e60aa34 100644
--- a/src/kern/arm/platform_control-arm-psci.cpp
+++ b/src/kern/arm/platform_control-arm-psci.cpp
@@ -54,6 +54,36 @@ private:
   static bool psci_is_v1;
 };
 
+INTERFACE [arm && arm_psci && 32bit]:
+
+#define FIASCO_ARM_PSCI_CALL_ASM_OPERANDS \
+    : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) \
+    : "0" (r0), "1" (r1), "2" (r2), "3" (r3), \
+      "r" (r4), "r" (r5), "r" (r6), "r" (r7) \
+    : "memory"
+
+#define FIASCO_ARM_ASM_REG(n) asm("r" # n)
+
+INTERFACE [arm && arm_psci && 64bit]:
+
+#define FIASCO_ARM_PSCI_CALL_ASM_OPERANDS \
+    : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3), \
+      "=r" (r4), "=r" (r5), "=r" (r6), "=r" (r7) \
+    : "0" (r0), "1" (r1), "2" (r2), "3" (r3), \
+      "4" (r4), "5" (r5), "6" (r6), "7" (r7) \
+    : "memory", "x8", "x9", "x10", "x11", "x12", "x13", \
+      "x14", "x15", "x16", "x17"
+
+#define FIASCO_ARM_ASM_REG(n) asm("x" # n)
+
+INTERFACE [arm && arm_psci && arm_psci_smc]:
+
+#define FIASCO_ARM_PSCI_CALL_ASM_FUNC "smc #0"
+
+INTERFACE [arm && arm_psci && arm_psci_hvc]:
+
+#define FIASCO_ARM_PSCI_CALL_ASM_FUNC "hvc #0"
+
 IMPLEMENTATION [arm && arm_psci]:
 
 #include "mem.h"
@@ -92,20 +122,17 @@ Platform_control::psci_call(Mword fn_id,
                             Mword a4 = 0, Mword a5 = 0,
                             Mword a6 = 0)
 {
-  register Mword r0 asm("r0") = psci_fn(fn_id);
-  register Mword r1 asm("r1") = a0;
-  register Mword r2 asm("r2") = a1;
-  register Mword r3 asm("r3") = a2;
-  register Mword r4 asm("r4") = a3;
-  register Mword r5 asm("r5") = a4;
-  register Mword r6 asm("r6") = a5;
-  register Mword r7 asm("r7") = a6;
-
-  asm volatile("smc #0"
-              : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3)
-              : "0" (r0), "1" (r1), "2" (r2), "3" (r3),
-                "r" (r4), "r" (r5), "r" (r6), "r" (r7)
-              : "memory");
+  register Mword r0 FIASCO_ARM_ASM_REG(0) = psci_fn(fn_id);
+  register Mword r1 FIASCO_ARM_ASM_REG(1) = a0;
+  register Mword r2 FIASCO_ARM_ASM_REG(2) = a1;
+  register Mword r3 FIASCO_ARM_ASM_REG(3) = a2;
+  register Mword r4 FIASCO_ARM_ASM_REG(4) = a3;
+  register Mword r5 FIASCO_ARM_ASM_REG(5) = a4;
+  register Mword r6 FIASCO_ARM_ASM_REG(6) = a5;
+  register Mword r7 FIASCO_ARM_ASM_REG(7) = a6;
+
+  asm volatile(FIASCO_ARM_PSCI_CALL_ASM_FUNC
+               FIASCO_ARM_PSCI_CALL_ASM_OPERANDS);
 
   Psci_result res = { r0, r1, r2, r3 };
   return res;