"2018-05-09 16:02:56 +0200"
diff --git a/src/kern/arm/bsp/virt/Kconfig b/src/kern/arm/bsp/virt/Kconfig
new file mode 100644
index 0000000..ebf6c37
--- /dev/null
+++ b/src/kern/arm/bsp/virt/Kconfig
@@ -0,0 +1,5 @@
+# PF: ARM_VIRT
+# PFDESCR: QEMU ARM Virtual Platform
+# PFSELECT: CAN_ARM_CPU_CORTEX_A15 CAN_ARM_CPU_CORTEX_A57 HAS_ARM_PSCI
+# PFSELECT: ARM_PSCI
+# PFDEPENDS: ARM
diff --git a/src/kern/arm/bsp/virt/Modules b/src/kern/arm/bsp/virt/Modules
new file mode 100644
index 0000000..3caa918
--- /dev/null
+++ b/src/kern/arm/bsp/virt/Modules
@@ -0,0 +1,19 @@
+# vim:set ft=make:
+
+SUBSYSTEMS              += LIBUART
+OBJECTS_LIBUART         += uart_pl011.o
+PREPROCESS_PARTS        += generic_tickless_idle libuart pic_gic \
+                           arm_generic_timer psci
+INTERFACES_KERNEL       += generic_timer gic
+RAM_PHYS_BASE           := 0x40000000
+
+
+uart_IMPL             += uart-arm-virt
+config_IMPL           += config-arm-virt
+mem_layout_IMPL       += mem_layout-arm-virt
+pic_IMPL              += pic-gic pic-arm-virt
+timer_IMPL            += timer-arm-virt timer-arm-generic
+timer_tick_IMPL       += timer_tick-single-vector
+kernel_uart_IMPL      += kernel_uart-arm-virt
+reset_IMPL            += reset-arm-virt
+clock_IMPL            += clock-generic
diff --git a/src/kern/arm/bsp/virt/config-arm-virt.cpp b/src/kern/arm/bsp/virt/config-arm-virt.cpp
new file mode 100644
index 0000000..0e4e611
--- /dev/null
+++ b/src/kern/arm/bsp/virt/config-arm-virt.cpp
@@ -0,0 +1,3 @@
+INTERFACE [arm && pf_arm_virt]:
+
+#define TARGET_NAME "QEMU Virtual Platform"
diff --git a/src/kern/arm/bsp/virt/kernel_uart-arm-virt.cpp b/src/kern/arm/bsp/virt/kernel_uart-arm-virt.cpp
new file mode 100644
index 0000000..17d71b5
--- /dev/null
+++ b/src/kern/arm/bsp/virt/kernel_uart-arm-virt.cpp
@@ -0,0 +1,12 @@
+INTERFACE:
+
+// On ARM the MMIO for the uart is accessible before the MMU is fully up
+EXTENSION class Kernel_uart { enum { Bsp_init_mode = Init_before_mmu }; };
+
+IMPLEMENTATION [arm && pf_arm_virt && serial]:
+
+IMPLEMENT
+bool Kernel_uart::startup(unsigned, int)
+{
+  return Uart::startup();
+}
diff --git a/src/kern/arm/bsp/virt/mem_layout-arm-virt.cpp b/src/kern/arm/bsp/virt/mem_layout-arm-virt.cpp
new file mode 100644
index 0000000..99fb50b
--- /dev/null
+++ b/src/kern/arm/bsp/virt/mem_layout-arm-virt.cpp
@@ -0,0 +1,14 @@
+INTERFACE [arm && pf_arm_virt]: //---------------------------------------
+
+EXTENSION class Mem_layout
+{
+public:
+  enum Phys_layout_virt : Address {
+    Mmio_phys_base       = 0x0a000000,
+    Gic_dist_phys_base   = 0x08000000,
+    Gic_cpu_phys_base    = 0x08010000,
+    Gic_h_phys_base      = 0x08200000,
+    Uart_phys_base       = 0x09000000,
+  };
+};
+
diff --git a/src/kern/arm/bsp/virt/pic-arm-virt.cpp b/src/kern/arm/bsp/virt/pic-arm-virt.cpp
new file mode 100644
index 0000000..5b9ae73
--- /dev/null
+++ b/src/kern/arm/bsp/virt/pic-arm-virt.cpp
@@ -0,0 +1,33 @@
+INTERFACE [arm && pf_arm_virt]:
+
+#include "initcalls.h"
+#include "types.h"
+#include "gic.h"
+
+class Irq_base;
+
+
+//-------------------------------------------------------------------
+IMPLEMENTATION [arm && pf_arm_virt]:
+
+#include "irq_mgr_multi_chip.h"
+
+PUBLIC static FIASCO_INIT
+void Pic::init()
+{
+
+  typedef Irq_mgr_multi_chip<9> Mgr;
+
+  Gic *g = gic.construct(Kmem::mmio_remap(Mem_layout::Gic_cpu_phys_base),
+                         Kmem::mmio_remap(Mem_layout::Gic_dist_phys_base));
+
+  Mgr *m = new Boot_object<Mgr>(1);
+  m->add_chip(0, g, g->nr_irqs());
+  Irq_mgr::mgr = m;
+}
+
+PUBLIC static
+void Pic::init_ap(Cpu_number, bool resume)
+{
+  gic->init_ap(resume);
+}
diff --git a/src/kern/arm/bsp/virt/reset-arm-virt.cpp b/src/kern/arm/bsp/virt/reset-arm-virt.cpp
new file mode 100644
index 0000000..978c520
--- /dev/null
+++ b/src/kern/arm/bsp/virt/reset-arm-virt.cpp
@@ -0,0 +1,12 @@
+IMPLEMENTATION [arm && pf_arm_virt]:
+
+#include "platform_control.h"
+
+void __attribute__ ((noreturn))
+platform_reset(void)
+{
+  Platform_control::system_reset();
+
+  for (;;)
+    ;
+}
diff --git a/src/kern/arm/bsp/virt/timer-arm-virt.cpp b/src/kern/arm/bsp/virt/timer-arm-virt.cpp
new file mode 100644
index 0000000..c8dfcad
--- /dev/null
+++ b/src/kern/arm/bsp/virt/timer-arm-virt.cpp
@@ -0,0 +1,23 @@
+// --------------------------------------------------------------------------
+INTERFACE [arm && arm_generic_timer]:
+
+EXTENSION class Timer
+{
+public:
+  static unsigned irq()
+  {
+    switch (Gtimer::Type)
+      {
+      case Generic_timer::Physical: return 29;
+      case Generic_timer::Virtual:  return 27;
+      case Generic_timer::Hyp:      return 26;
+      };
+  }
+};
+
+// --------------------------------------------------------------------------
+IMPLEMENTATION [arm && arm_generic_timer]:
+
+IMPLEMENT
+void Timer::bsp_init(Cpu_number)
+{}
diff --git a/src/kern/arm/bsp/virt/uart-arm-virt.cpp b/src/kern/arm/bsp/virt/uart-arm-virt.cpp
new file mode 100644
index 0000000..0d0d500
--- /dev/null
+++ b/src/kern/arm/bsp/virt/uart-arm-virt.cpp
@@ -0,0 +1,14 @@
+IMPLEMENTATION [pf_arm_virt]:
+
+#include "uart_pl011.h"
+#include "mem_layout.h"
+
+IMPLEMENT Address Uart::base() const { return Mem_layout::Uart_phys_base; }
+
+IMPLEMENT int Uart::irq() const { return 32 + 1; }
+
+IMPLEMENT L4::Uart *Uart::uart()
+{
+  static L4::Uart_pl011 uart(24019200);
+  return &uart;
+}