"2008-06-07 15:19:18 +0000"
diff --git a/extra/Configs/Config.in b/extra/Configs/Config.in
index db2483e5f..892768500 100644
--- a/extra/Configs/Config.in
+++ b/extra/Configs/Config.in
@@ -558,15 +558,31 @@ config UCLIBC_HAS_PTY
 
 	  If unsure, just answer Y.
 
+config ASSUME_DEVPTS
+	bool "Assume that /dev/pts is a devpts or devfs file system"
+	default y
+	depends on UCLIBC_HAS_PTY
+	help
+	  Enable this if /dev/pts is on a devpts or devfs filesystem.  Both
+	  these filesystems automatically manage permissions on the /dev/pts
+	  devices.  You may need to mount your devpts or devfs filesystem on
+	  /dev/pts for this to work.
+
+	  Most people should answer Y.
+
 config UNIX98PTY_ONLY
 	bool "Support only Unix 98 PTYs"
 	default y
 	depends on UCLIBC_HAS_PTY
 	help
 	  If you want to support only Unix 98 PTYs enable this.  Some older
-	  applications may need this disabled.  For most current programs,
-	  you can generally answer Y.
+	  applications may need this disabled and will thus use legacy BSD
+	  style PTY handling which is more complex and also bigger than
+	  Unix 98 PTY handling.
+
+	  For most current programs, you can generally answer Y.
 
+if UNIX98PTY_ONLY
 config UCLIBC_HAS_GETPT
 	bool "Support getpt() (glibc-compat)"
 	default n
@@ -578,18 +594,13 @@ config UCLIBC_HAS_GETPT
 	  Either use posix_openpt() or just open /dev/ptmx yourself.
 
 	  If unsure, just say N.
+endif
 
-config ASSUME_DEVPTS
-	bool "Assume that /dev/pts is a devpts or devfs file system"
-	default y
-	depends on UCLIBC_HAS_PTY
-	help
-	  Enable this if /dev/pts is on a devpts or devfs filesystem.  Both
-	  these filesystems automatically manage permissions on the /dev/pts
-	  devices.  You may need to mount your devpts or devfs filesystem on
-	  /dev/pts for this to work.
-
-	  Most people should answer Y.
+if !UNIX98PTY_ONLY
+# Have to use __libc_ptyname{1,2}[] and related bloat
+config UCLIBC_HAS_GETPT
+	def_bool y
+endif
 
 config UCLIBC_HAS_TM_EXTENSIONS
 	bool "Support 'struct tm' timezone extension fields"