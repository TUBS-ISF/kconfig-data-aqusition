"2008-10-06 09:16:43 +0000"
diff --git a/extra/Configs/Config.arm b/extra/Configs/Config.arm
index 26e1f3da4..2b91a34d3 100644
--- a/extra/Configs/Config.arm
+++ b/extra/Configs/Config.arm
@@ -48,8 +48,8 @@ choice
 	  optimizing purposes.  To build a library that will run on all ARMCPU
 	  types (albeit not optimally fast), you can specify "Generic Arm" here.
 	  If you pick anything other than "Generic Arm", there is no guarantee 
-	  that uClibc will even run on anything other than the selected processor
-	  type.
+	  that uClibc will even run on anything other than the selected
+	  processor type.
 
 	  Here are the settings recommended for greatest speed:
 	  - "Generic Arm" select this if your compiler is already setup to
diff --git a/extra/Configs/Config.cris b/extra/Configs/Config.cris
index 18c75fb58..b3811d1e9 100644
--- a/extra/Configs/Config.cris
+++ b/extra/Configs/Config.cris
@@ -19,10 +19,10 @@ choice
 	prompt "Target Architecture Type"
 	default CONFIG_CRIS
 	help
-		This is the architecture type of your CPU. This information is used for
-		optimizing purposes.
+		This is the architecture type of your CPU. This information
+		is used for optimizing purposes.
 
-		These are the possible settings:
+		Possible settings:
 		- CRIS  Generic support for Axis' CRIS architecture.
 		- CRISv32  Support for Axis' CRISv32 architecture.
 
diff --git a/extra/Configs/Config.in b/extra/Configs/Config.in
index 3dc60fb66..b54c5ab43 100644
--- a/extra/Configs/Config.in
+++ b/extra/Configs/Config.in
@@ -239,14 +239,14 @@ config FORCE_SHAREABLE_TEXT_SEGMENTS
 	default n
 	help
 	  If you answer Y here, the uClibc native shared library loader will
-	  only load shared libraries, which do not need to modify any non-writable
-	  segments. These libraries haven't set the DT_TEXTREL tag in the dynamic
-	  section (==> objdump). All your libraries must be compiled with
-	  -fPIC or -fpic, and all assembler function must be written as position
-	  independent code (PIC).
+	  only load shared libraries, which do not need to modify any
+	  non-writable segments. These libraries haven't set the DT_TEXTREL
+	  tag in the dynamic section (==> objdump).
+	  All your libraries must be compiled with -fPIC or -fpic, and all
+	  assembler function must be written as position independent code (PIC).
 	  Enabling this option will make uClibc's shared library loader a
-	  little bit smaller and guarantee that no memory will be wasted by badly
-	  coded shared libraries.
+	  little bit smaller and guarantee that no memory will be wasted by
+	  badly coded shared libraries.
 
 config LDSO_LDD_SUPPORT
 	bool "Native 'ldd' support"
@@ -257,7 +257,8 @@ config LDSO_LDD_SUPPORT
 	  which executes the shared library loader to resolve all dependencies
 	  and then provide a list of shared libraries that are required for an
 	  application to function.  Disabling this option will makes uClibc's
-	  shared library loader a little bit smaller.  Most people will answer Y.
+	  shared library loader a little bit smaller.
+	  Most people will answer Y.
 
 config LDSO_CACHE_SUPPORT
 	bool "Enable library loader cache (ld.so.conf)"
@@ -345,7 +346,8 @@ config LDSO_GNU_HASH_SUPPORT
 	  Newest binutils support a new hash style named GNU-hash. The dynamic
 	  linker will use the new GNU-hash section (.gnu.hash) for symbol lookup
 	  if present into the ELF binaries, otherwise it will use the old SysV
-	  hash style (.hash). This ensures that it is completely backward compatible.
+	  hash style (.hash). This ensures that it is completely backward
+	  compatible.
 	  Further, being the hash table implementation self-contained into each
 	  executable and shared libraries, objects with mixed hash style can
 	  peacefully coexist in the same process.
@@ -427,9 +429,10 @@ choice
 config MALLOC
 	bool "malloc"
 	help
-	  "malloc" use mmap for all allocations and so works very well on MMU-less
-	  systems that do not support the brk() system call.   It is pretty smart
-	  about reusing already allocated memory, and minimizing memory wastage.
+	  "malloc" use mmap for all allocations and so works very well on
+	  MMU-less systems that do not support the brk() system call.   It is
+	  pretty smart about reusing already allocated memory, and minimizing
+	  memory wastage.
 	  This is the default for uClinux MMU-less systems.
 
 config MALLOC_SIMPLE
@@ -495,8 +498,8 @@ config COMPAT_ATEXIT
 	bool "Old (visible) atexit Support"
 	default n
 	help
-	  Enable this option if you want to update from 0.9.28 to svn/0.9.29, else
-	  you will be missing atexit() until you rebuild all apps.
+	  Enable this option if you want to update from 0.9.28 to svn/0.9.29,
+	  else you will be missing atexit() until you rebuild all apps.
 
 config UCLIBC_SUSV3_LEGACY
 	bool "Enable SuSv3 LEGACY functions"
@@ -658,7 +661,7 @@ config UCLIBC_HAS_TZ_FILE
 	  file consists of a single line (newline required) of text describing
 	  the timezone in the format specified for the TZ environment variable.
 
-	  Simply doing 'echo CST6CDT > /etc/TZ' is enough to create a valid file.
+	  Doing 'echo CST6CDT > /etc/TZ' is enough to create a valid file.
 	  See
 	  http://www.opengroup.org/onlinepubs/007904975/basedefs/xbd_chap08.html
 	  for details on valid settings of 'TZ'.
@@ -671,10 +674,10 @@ config UCLIBC_HAS_TZ_FILE_READ_MANY
 	default y
 	help
 	  Answer Y to enable repeated reading of the '/etc/TZ' file even after
-	  a valid value has been read.  This incurs the overhead of an open/read/close
-	  for each tzset() call (explicit or implied).  However, setting this
-	  will allows applications to update their timezone information if the contents
-	  of the file change.
+	  a valid value has been read.  This incurs the overhead of an
+	  open/read/close for each tzset() call (explicit or implied).  However,
+	  setting this will allow applications to update their timezone
+	  information if the contents of the file change.
 
 	  Most people will answer Y.
 
@@ -997,9 +1000,10 @@ config UCLIBC_HAS_RPC
 	depends on UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6
 	help
 	  If you want to include RPC support, enable this.  RPC is rarely used
-	  for anything except for the NFS filesystem.  Unless you plan to use NFS,
-	  you can probably leave this set to N and save some space.  If you need
-	  to use NFS then you should answer Y.
+	  for anything except for the NFS filesystem.  Unless you plan to use
+	  NFS, you can probably leave this set to N and save some space.
+
+	  If you need to use NFS then you should answer Y.
 
 config UCLIBC_HAS_FULL_RPC
 	bool "Full RPC support"
@@ -1113,7 +1117,8 @@ choice
 	depends on UCLIBC_HAS_CTYPE_TABLES
 	default UCLIBC_HAS_CTYPE_UNSAFE
 	help
-	  Please select the invalid arg behavior you want for the 'ctype' functions.
+	  Please select the invalid arg behavior you want for the 'ctype'
+	  functions.
 
 	  The 'ctype' functions are now implemented using table lookups, with
 	  the arg being the index.  This can result in incorrect memory accesses
@@ -1199,8 +1204,10 @@ config UCLIBC_HAS_XLOCALE
 	default n
 	help
 	  Answer Y to enable extended locale support similar to that provided
-	  by glibc.  This is primarily intended to support libstd++ functionality.
-	  However, it also allows thread-specific locale selection via uselocale().
+	  by glibc.  This is primarily intended to support libstd++
+	  functionality.
+	  However, it also allows thread-specific locale selection via
+	  uselocale().
 
 	  Most people will answer N.
 
@@ -1223,9 +1230,10 @@ config UCLIBC_HAS_GLIBC_DIGIT_GROUPING
 	depends on UCLIBC_HAS_FLOATS
 	default n
 	help
-	  Answer Y to enable support for glibc's \"'\" flag for allowing locale-specific
-	  digit grouping in base 10 integer conversions and appropriate floating point
-	  conversions in the *printf() and *scanf() functions.
+	  Answer Y to enable support for glibc's \"'\" flag for allowing
+	  locale-specific digit grouping in base 10 integer conversions and
+	  appropriate floating point conversions in the *printf() and *scanf()
+	  functions.
 
 	  Most people will answer N.
 
@@ -1234,10 +1242,11 @@ config UCLIBC_HAS_SCANF_LENIENT_DIGIT_GROUPING
 	depends on UCLIBC_HAS_GLIBC_DIGIT_GROUPING
 	default y
 	help
-	  Answer Y to make digit grouping optional when the \"'\" flag is specified.
+	  Answer Y to make digit grouping optional when the \"'\" flag is
+	  specified.
 	  This is the standard glibc behavior.  If the initial string of digits
-	  exceeds the maximum group number, the input will be treated as a normal
-	  non-grouped number.
+	  exceeds the maximum group number, the input will be treated as a
+	  normal non-grouped number.
 
 	  Most people will answer N.
 
@@ -1249,8 +1258,8 @@ config UCLIBC_HAS_GLIBC_CUSTOM_PRINTF
 	  Answer Y to support glibc's register_printf_function() to allow an
 	  application to add its own printf conversion specifiers.
 
-	  NOTE: This implementation limits the number or registered specifiers to 10.
-	  NOTE: This implementation requires new conversion specifiers to be ASCII
+	  NOTE: Limits the number or registered specifiers to 10.
+	  NOTE: Requires new conversion specifiers to be ASCII
 	        characters (0-0x7f).  This is to avoid problems with processing
 	        format strings in locales with different multibyte conversions.
 
@@ -1261,9 +1270,10 @@ config USE_OLD_VFPRINTF
 	depends on !UCLIBC_HAS_WCHAR
 	default n
 	help
-	  Set to true to use the old vfprintf instead of the new.  This is roughly
-	  C89 compliant with some extensions, and is much smaller.  However, it does
-	  not support wide chars, positional args, or glibc custom printf specifiers.
+	  Set to true to use the old vfprintf instead of the new.  This is
+	  roughly C89 compliant with some extensions, and is much smaller.
+	  However, it does not support wide chars, positional args, or glibc
+	  custom printf specifiers.
 
 	  Most people will answer N.
 
@@ -1272,12 +1282,15 @@ config UCLIBC_PRINTF_SCANF_POSITIONAL_ARGS
 	depends on !USE_OLD_VFPRINTF
 	default 9
 	help
-	  Set the maximum number of positional args supported by the printf/scanf
-	  functions.  The Single Unix Specification Version 3 requires a minimum
-	  value of 9.  Setting this to a value lower than 9 will disable positional
-	  arg support and cause the NL_ARGMAX macro in limits.h to be #undef'd.
-	  WARNING!  The workspace to support positional args is currently allocated
-	  on the stack.  You probably don't want to set this to too high a value.
+	  Set the maximum number of positional args supported by the
+	  printf/scanf functions.  The Single Unix Specification Version 3
+	  requires a minimum value of 9.  Setting this to a value lower than
+	  9 will disable positional arg support and cause the NL_ARGMAX macro
+	  in limits.h to be #undef'd.
+
+	  WARNING!  The workspace to support positional args is currently
+	            allocated on the stack.  You probably don't want to set
+		    this to too high a value.
 
 	  Most people will answer 9.
 
@@ -1364,9 +1377,10 @@ config UCLIBC_HAS_STDIO_SHUTDOWN_ON_ABORT
 	bool "Attempt to shutdown stdio subsystem when abort() is called."
 	default n
 	help
-	  ANSI/ISO C99 requires abort() to be asyn-signal-safe.  So there was a behavioral
-	  change made in SUSv3.  Previously, abort() was required to have the affect of
-	  fclose() on all open streams.  The wording has been changed to "may" from "shall".
+	  ANSI/ISO C99 requires abort() to be asyn-signal-safe.  So there was
+	  a behavioral change made in SUSv3.  Previously, abort() was required
+	  to have the affect of fclose() on all open streams.  The wording has
+	  been changed to "may" from "shall".
 
 	  Most people will answer N.
 
@@ -1393,15 +1407,17 @@ config UCLIBC_HAS_STDIO_AUTO_RW_TRANSITION
 	default y
 	help
 	  Answer Y to enable the stdio subsystem to automaticly transition
-	  between reading and writing.  This relaxes the ANSI/ISO C99 requirement:
-
-	  When a file is opened with update mode ('+' as the second or third character
-	  in the list of mode argument values), both input and output may be performed
-	  on the associated stream. However, output shall not be directly followed by
-	  input without an intervening call to the fflush function or to a file
-	  positioning function (fseek, fsetpos, or rewind), and input shall not be
-	  directly followed by output without an intervening call to a file positioning
-	  function, unless the input operation encounters endoffile.
+	  between reading and writing.  This relaxes the ANSI/ISO C99
+	  requirement:
+
+	  When a file is opened with update mode ('+' as the second or third
+	  character in the list of mode argument values), both input and output
+	  may be performed on the associated stream. However, output shall not
+	  be directly followed by input without an intervening call to the
+	  fflush function or to a file positioning function (fseek, fsetpos,
+	  or rewind), and input shall not be directly followed by output without
+	  an intervening call to a file positioning function, unless the input
+	  operation encounters endoffile.
 
 	  Most people will answer Y.
 
@@ -1443,7 +1459,8 @@ config UCLIBC_HAS_PRINTF_M_SPEC
 	help
 	  Answer Y to support a glibc extension to interpret '%m' in printf
 	  format strings as an instruction to output the error message string
-	  (as generated by strerror) corresponding to the current value of 'errno'.
+	  (as generated by strerror) corresponding to the current value of
+	  'errno'.
 
 	  Most people will answer N.
 
@@ -1467,7 +1484,8 @@ config UCLIBC_HAS_SYS_ERRLIST
 	  arch where it adds over 4K.
 
 	  WARNING!  In the future, support for sys_errlist[] may be unavailable
-	  in at least some configurations.  In fact, it may be removed altogether.
+	            in at least some configurations.  In fact, it may be removed
+	            altogether.
 
 	  Most people will answer N.
 
@@ -1491,7 +1509,8 @@ config UCLIBC_HAS_SYS_SIGLIST
 	  Answer Y if you want to support sys_siglist[].
 
 	  WARNING!  In the future, support for sys_siglist[] may be unavailable
-	  in at least some configurations.  In fact, it may be removed altogether.
+	            in at least some configurations.  In fact, it may be removed
+		    altogether.
 
 	  Most people will answer N.
 
@@ -1627,12 +1646,12 @@ config UCLIBC_HAS_GNU_GLOB
 	depends on UCLIBC_HAS_GLOB
 	default n
 	help
-	  The gnu glob interface is somewhat larger (weighing in at about 4,2k) than
-	  it's SuSv3 counterpart (and is out of date). It is an old copy from glibc and
-	  does not support all the GNU specific options.
+	  The gnu glob interface is somewhat larger (weighing in at about 4,2k)
+	  than it's SuSv3 counterpart (and is out of date). It is an old copy
+	  from glibc and does not support all the GNU specific options.
 
-	  Answer Y if you want to include full gnu glob() instead of the smaller SUSv3
-	  compatible glob().
+	  Answer Y if you want to include full gnu glob() instead of the smaller
+	  SUSv3 compatible glob().
 
 	  Most people will answer N.
 
@@ -1706,12 +1725,16 @@ config UCLIBC_BUILD_PIE
 	select FORCE_SHAREABLE_TEXT_SEGMENTS
 	default n
 	help
-	  If you answer Y here, ldd and iconv are built as ET_DYN/PIE executables.
+	  If you answer Y here, ldd and iconv are built as ET_DYN/PIE
+	  executables.
+
 	  It requires gcc-3.4 and binutils-2.15 (for arm 2.16) or later.
 	  More about ET_DYN/PIE binaries on <http://pax.grsecurity.net/> .
-	  WARNING: This option also enables FORCE_SHAREABLE_TEXT_SEGMENTS, so all
-		libraries have to be built with -fPIC or -fpic, and all assembler
-		functions must be written as position independent code (PIC).
+
+	  WARNING: This option also enables FORCE_SHAREABLE_TEXT_SEGMENTS, so
+	           all libraries have to be built with -fPIC or -fpic, and all
+		   assembler functions must be written as position independent
+		   code (PIC).
 
 config UCLIBC_HAS_ARC4RANDOM
 	bool "Include the arc4random() function"
@@ -1947,9 +1970,11 @@ config SUPPORT_LD_DEBUG
 	    detail        provide more information for some options
 	    move          display copy processing
 	    symbols       display symbol table processing
-	    reloc         display relocation processing; detail shows the relocation patch
+	    reloc         display relocation processing; detail shows the
+	                  relocation patch
 	    nofixups      never fixes up jump relocations
-	    bindings      displays the resolve processing (function calls); detail shows the relocation patch
+	    bindings      displays the resolve processing (function calls);
+	                  detail shows the relocation patch
 	    all           Enable everything!
 
 	  The additional environment variable:
@@ -1988,12 +2013,14 @@ config UCLIBC_MALLOC_DEBUGGING
 	  Malloc debugging output may then be enabled at runtime using the
 	  MALLOC_DEBUG environment variable.
 
-	  The value of MALLOC_DEBUG should be an integer, which is interpreted as
-	  a bitmask with the following bits:
+	  The value of MALLOC_DEBUG should be an integer, which is interpreted
+	  as a bitmask with the following bits:
 		  1   -  do extra consistency checking
-		  2   -  output messages for malloc/free calls and OS allocation calls
+		  2   -  output messages for malloc/free calls and OS
+		         allocation calls
 		  4   -  output messages for the `MMB' layer
-		  8   -  output messages for internal malloc heap manipulation calls
+		  8   -  output messages for internal malloc heap manipulation
+		         calls
 
 	  Because this increases the size of malloc appreciably (due to strings
 	  etc), you should say N unless you need to debug a malloc problem.