"2015-08-04 12:06:34 -0300"
diff --git a/src/lib/flow/Kconfig b/src/lib/flow/Kconfig
index 5d218b9a..e2399990 100644
--- a/src/lib/flow/Kconfig
+++ b/src/lib/flow/Kconfig
@@ -48,7 +48,6 @@ source "src/modules/flow/gpio/Kconfig"
 source "src/modules/flow/grove/Kconfig"
 source "src/modules/flow/gtk/Kconfig"
 source "src/modules/flow/gyroscope/Kconfig"
-source "src/modules/flow/hub/Kconfig"
 source "src/modules/flow/int/Kconfig"
 source "src/modules/flow/keyboard/Kconfig"
 source "src/modules/flow/led-strip/Kconfig"
@@ -62,6 +61,7 @@ source "src/modules/flow/pwm/Kconfig"
 source "src/modules/flow/random/Kconfig"
 source "src/modules/flow/servo-motor/Kconfig"
 source "src/modules/flow/string/Kconfig"
+source "src/modules/flow/switcher/Kconfig"
 source "src/modules/flow/test/Kconfig"
 source "src/modules/flow/thingspeak/Kconfig"
 source "src/modules/flow/timer/Kconfig"
diff --git a/src/modules/flow/hub/Kconfig b/src/modules/flow/hub/Kconfig
deleted file mode 100644
index 5bf02ff0..00000000
--- a/src/modules/flow/hub/Kconfig
+++ /dev/null
@@ -1,4 +0,0 @@
-config FLOW_NODE_TYPE_HUB
-	tristate "Node type: hub"
-	depends on FLOW
-	default y
diff --git a/src/modules/flow/hub/Makefile b/src/modules/flow/hub/Makefile
deleted file mode 100644
index 34ef41d3..00000000
--- a/src/modules/flow/hub/Makefile
+++ /dev/null
@@ -1,2 +0,0 @@
-obj-$(FLOW_NODE_TYPE_HUB) += hub.mod
-obj-hub-$(FLOW_NODE_TYPE_HUB) := hub.json hub.o
diff --git a/src/modules/flow/hub/hub.json b/src/modules/flow/hub/hub.json
deleted file mode 100644
index d93b5914..00000000
--- a/src/modules/flow/hub/hub.json
+++ /dev/null
@@ -1,234 +0,0 @@
-{
-  "$schema": "http://solettaproject.github.io/soletta/schemas/node-type-genspec.schema",
-  "name": "hub",
-  "meta": {
-    "author": "Intel Corporation",
-    "license": "BSD 3-Clause",
-    "version": "1"
-  },
-  "types": [
-    {
-      "category": "hub",
-      "description": "Forward blob packets.",
-      "in_ports": [
-        {
-          "data_type": "blob",
-          "description": "Where to receive the blob packet to be forwarded.",
-          "methods": {
-            "process": "blob_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/blob",
-      "out_ports": [
-        {
-          "data_type": "blob",
-          "description": "Forwarded blob packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/blob.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward boolean packets.",
-      "in_ports": [
-        {
-          "data_type": "boolean",
-          "description": "Where to receive the boolean packet to be forwarded.",
-          "methods": {
-            "process": "boolean_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/boolean",
-      "out_ports": [
-        {
-          "data_type": "boolean",
-          "description": "Forwarded boolean packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/boolean.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward byte packets.",
-      "in_ports": [
-        {
-          "data_type": "byte",
-          "description": "Where to receive the byte packet to be forwarded.",
-          "methods": {
-            "process": "byte_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/byte",
-      "out_ports": [
-        {
-          "data_type": "byte",
-          "description": "Forwarded byte packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/byte.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward empty packets.",
-      "in_ports": [
-        {
-          "data_type": "any",
-          "description": "Where to receive the packet to be forwarded. Any packet can be received, but they'll be forwarded as empty packets.",
-          "methods": {
-            "process": "empty_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/empty",
-      "out_ports": [
-        {
-          "data_type": "empty",
-          "description": "Forwarded empty packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/empty.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward error packets.",
-      "in_ports": [
-        {
-          "data_type": "error",
-          "description": "Where to receive the error packet to be forwarded. They're forwared via 'ERROR' port.",
-          "methods": {
-            "process": "error_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/error",
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/error.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward float packets.",
-      "in_ports": [
-        {
-          "data_type": "float",
-          "description": "Where to receive the float packet to be forwarded.",
-          "methods": {
-            "process": "float_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/float",
-      "out_ports": [
-        {
-          "data_type": "float",
-          "description": "Forwarded float packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/float.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward int packets.",
-      "in_ports": [
-        {
-          "data_type": "int",
-          "description": "Where to receive the int packet to be forwarded.",
-          "methods": {
-            "process": "int_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/int",
-      "out_ports": [
-        {
-          "data_type": "int",
-          "description": "Forwarded int packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/int.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward rgb packets.",
-      "in_ports": [
-        {
-          "data_type": "rgb",
-          "description": "Where to receive the rgb packet to be forwarded.",
-          "methods": {
-            "process": "rgb_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/rgb",
-      "out_ports": [
-        {
-          "data_type": "rgb",
-          "description": "Forwarded rgb packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/rgb.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward direction vector packets.",
-      "in_ports": [
-        {
-          "data_type": "direction-vector",
-          "description": "Where to receive the direction vector packet to be forwarded.",
-          "methods": {
-            "process": "direction_vector_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/direction-vector",
-      "out_ports": [
-        {
-          "data_type": "direction-vector",
-          "description": "Forwarded direction_vector packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/direction-vector.html"
-    },
-    {
-      "category": "hub",
-      "description": "Forward string packets.",
-      "in_ports": [
-        {
-          "data_type": "string",
-          "description": "Where to receive the string packet to be forwarded.",
-          "methods": {
-            "process": "string_forward"
-          },
-          "name": "IN"
-        }
-      ],
-      "name": "hub/string",
-      "out_ports": [
-        {
-          "data_type": "string",
-          "description": "Forwarded string packets.",
-          "name": "OUT"
-        }
-      ],
-      "url": "http://solettaproject.org/doc/latest/node_types/hub/string.html"
-    }
-  ]
-}
diff --git a/src/modules/flow/switcher/Kconfig b/src/modules/flow/switcher/Kconfig
new file mode 100644
index 00000000..c2cbd499
--- /dev/null
+++ b/src/modules/flow/switcher/Kconfig
@@ -0,0 +1,4 @@
+config FLOW_NODE_TYPE_SWITCHER
+	tristate "Node type: switcher"
+	depends on FLOW
+	default y
diff --git a/src/modules/flow/switcher/Makefile b/src/modules/flow/switcher/Makefile
new file mode 100644
index 00000000..0c0661ed
--- /dev/null
+++ b/src/modules/flow/switcher/Makefile
@@ -0,0 +1,2 @@
+obj-$(FLOW_NODE_TYPE_SWITCHER) += switcher.mod
+obj-switcher-$(FLOW_NODE_TYPE_SWITCHER) := switcher.json switcher.o
diff --git a/src/modules/flow/hub/hub.c b/src/modules/flow/switcher/switcher.c
similarity index 65%
rename from src/modules/flow/hub/hub.c
rename to src/modules/flow/switcher/switcher.c
index d2324f08..7483c0cb 100644
--- a/src/modules/flow/hub/hub.c
+++ b/src/modules/flow/switcher/switcher.c
@@ -32,14 +32,63 @@
 
 #include <errno.h>
 
-#include "hub-gen.h"
+#include "switcher-gen.h"
 #include "sol-flow-internal.h"
 #include "sol-util.h"
 
 
+#define PORT_MAX (256)
+
+struct switcher_data {
+    int port_index;
+};
+
+static void
+set_port_index(struct switcher_data *mdata, int port_index)
+{
+    mdata->port_index = port_index;
+    if (mdata->port_index < 0) {
+        SOL_WRN("Output port index must be greater or equal to zero. Using 0.");
+        mdata->port_index = 0;
+    } else if (mdata->port_index >= PORT_MAX) {
+        SOL_WRN("Output port index must be less than %d. Using %d.",
+            PORT_MAX, PORT_MAX - 1);
+        mdata->port_index = PORT_MAX - 1;
+    }
+}
+
+static int
+switcher_open(struct sol_flow_node *node, void *data, const struct sol_flow_node_options *options)
+{
+    const struct sol_flow_node_type_switcher_boolean_options *opts;
+
+    SOL_FLOW_NODE_OPTIONS_SUB_API_CHECK(options,
+        SOL_FLOW_NODE_TYPE_SWITCHER_BOOLEAN_OPTIONS_API_VERSION,
+        -EINVAL);
+
+    opts = (const struct sol_flow_node_type_switcher_boolean_options *)options;
+
+    set_port_index(data, opts->out_port.val);
+
+    return 0;
+}
+
+static int
+switcher_set_index(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
+{
+    int r, in_value;
+
+    r = sol_flow_packet_get_irange_value(packet, &in_value);
+    SOL_INT_CHECK(r, < 0, r);
+    set_port_index(data, in_value);
+
+    return 0;
+}
+
 static int
 boolean_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     bool in_value;
 
@@ -47,12 +96,14 @@ boolean_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_boolean_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_BOOLEAN__OUT__OUT, in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_BOOLEAN__OUT__OUT_0 + mdata->port_index,
+        in_value);
 }
 
 static int
 byte_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     unsigned char in_value;
 
@@ -60,12 +111,14 @@ byte_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t con
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_byte_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_BYTE__OUT__OUT, in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_BYTE__OUT__OUT_0 + mdata->port_index,
+        in_value);
 }
 
 static int
 blob_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     struct sol_blob *in_value;
 
@@ -73,12 +126,14 @@ blob_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t con
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_blob_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_BLOB__OUT__OUT, in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_BLOB__OUT__OUT_0 + mdata->port_index,
+        in_value);
 }
 
 static int
 rgb_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     struct sol_rgb in_value;
 
@@ -86,12 +141,14 @@ rgb_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_rgb_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_RGB__OUT__OUT, &in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_RGB__OUT__OUT_0 + mdata->port_index,
+        &in_value);
 }
 
 static int
 direction_vector_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     struct sol_direction_vector in_value;
 
@@ -99,14 +156,17 @@ direction_vector_forward(struct sol_flow_node *node, void *data, uint16_t port,
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_direction_vector_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_DIRECTION_VECTOR__OUT__OUT, &in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_DIRECTION_VECTOR__OUT__OUT_0 +
+        mdata->port_index, &in_value);
 }
 
 static int
 empty_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
+
     return sol_flow_send_empty_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_EMPTY__OUT__OUT);
+        SOL_FLOW_NODE_TYPE_SWITCHER_EMPTY__OUT__OUT_0 + mdata->port_index);
 }
 
 static int
@@ -125,6 +185,7 @@ error_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t co
 static int
 float_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     struct sol_drange in_value;
 
@@ -132,12 +193,14 @@ float_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t co
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_drange_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_FLOAT__OUT__OUT, &in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_FLOAT__OUT__OUT_0 + mdata->port_index,
+        &in_value);
 }
 
 static int
 int_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     struct sol_irange in_value;
 
@@ -145,12 +208,14 @@ int_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_irange_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_INT__OUT__OUT, &in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_INT__OUT__OUT_0 + mdata->port_index,
+        &in_value);
 }
 
 static int
 string_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
+    struct switcher_data *mdata = data;
     int r;
     const char *in_value;
 
@@ -158,7 +223,10 @@ string_forward(struct sol_flow_node *node, void *data, uint16_t port, uint16_t c
     SOL_INT_CHECK(r, < 0, r);
 
     return sol_flow_send_string_packet(node,
-        SOL_FLOW_NODE_TYPE_HUB_STRING__OUT__OUT, in_value);
+        SOL_FLOW_NODE_TYPE_SWITCHER_STRING__OUT__OUT_0 + mdata->port_index,
+        in_value);
 }
 
-#include "hub-gen.c"
+#undef PORT_MAX
+
+#include "switcher-gen.c"
diff --git a/src/modules/flow/switcher/switcher.json b/src/modules/flow/switcher/switcher.json
new file mode 100644
index 00000000..6d3e0c7e
--- /dev/null
+++ b/src/modules/flow/switcher/switcher.json
@@ -0,0 +1,487 @@
+{
+  "$schema": "http://solettaproject.gitswitcher.io/soletta/schemas/node-type-genspec.schema",
+  "name": "switcher",
+  "meta": {
+    "author": "Intel Corporation",
+    "license": "BSD 3-Clause",
+    "version": "1"
+  },
+  "types": [
+    {
+      "category": "switcher",
+      "description": "Forward blob packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "blob",
+          "description": "Where to receive the blob packet to be forwarded.",
+          "methods": {
+            "process": "blob_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/blob",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "blob",
+          "description": "Forwarded blob packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/blob.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward boolean packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "boolean",
+          "description": "Where to receive the boolean packet to be forwarded.",
+          "methods": {
+            "process": "boolean_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/boolean",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "boolean",
+          "description": "Forwarded boolean packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/boolean.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward byte packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "byte",
+          "description": "Where to receive the byte packet to be forwarded.",
+          "methods": {
+            "process": "byte_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/byte",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "byte",
+          "description": "Forwarded byte packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/byte.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward empty packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "any",
+          "description": "Where to receive the packet to be forwarded. Any packet can be received, but they'll be forwarded as empty packets.",
+          "methods": {
+            "process": "empty_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/empty",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "empty",
+          "description": "Forwarded empty packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/empty.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward error packets.",
+      "in_ports": [
+        {
+          "data_type": "error",
+          "description": "Where to receive the error packet to be forwarded. They're forwared via 'ERROR' port.",
+          "methods": {
+            "process": "error_forward"
+          },
+          "name": "IN"
+        }
+      ],
+      "name": "switcher/error",
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/error.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward float packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "float",
+          "description": "Where to receive the float packet to be forwarded.",
+          "methods": {
+            "process": "float_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/float",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "float",
+          "description": "Forwarded float packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/float.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward int packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "int",
+          "description": "Where to receive the int packet to be forwarded.",
+          "methods": {
+            "process": "int_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/int",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "int",
+          "description": "Forwarded int packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/int.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward rgb packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "rgb",
+          "description": "Where to receive the rgb packet to be forwarded.",
+          "methods": {
+            "process": "rgb_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/rgb",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "rgb",
+          "description": "Forwarded rgb packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/rgb.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward direction vector packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "direction-vector",
+          "description": "Where to receive the direction vector packet to be forwarded.",
+          "methods": {
+            "process": "direction_vector_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/direction-vector",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "direction-vector",
+          "description": "Forwarded direction_vector packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/direction-vector.html"
+    },
+    {
+      "category": "switcher",
+      "description": "Forward string packets on to output port set by index.",
+      "in_ports": [
+        {
+          "data_type": "string",
+          "description": "Where to receive the string packet to be forwarded.",
+          "methods": {
+            "process": "string_forward"
+          },
+          "name": "IN"
+        },
+        {
+          "data_type": "int",
+          "description": "Index of output port to be used to forward input packet.",
+          "methods": {
+            "process": "switcher_set_index"
+          },
+          "name": "OUT_PORT"
+        }
+      ],
+      "methods": {
+        "open": "switcher_open"
+      },
+      "name": "switcher/string",
+      "options": {
+        "members": [
+          {
+            "data_type": "int",
+            "default": {
+              "max": 255,
+              "min": 0,
+              "step": 1,
+              "val": 0
+            },
+            "description": "Initial output port index used to forward packets. Value must be greater or equal to 0 and less than 256.",
+            "name": "out_port"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "string",
+          "description": "Forwarded string packets.",
+          "name": "OUT[256]"
+        }
+      ],
+      "private_data_type": "switcher_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/switcher/string.html"
+    }
+  ]
+}
diff --git a/src/test-fbp/hub.fbp b/src/test-fbp/switcher-simple-forward.fbp
similarity index 71%
rename from src/test-fbp/hub.fbp
rename to src/test-fbp/switcher-simple-forward.fbp
index 6c3f594c..657a4f13 100644
--- a/src/test-fbp/hub.fbp
+++ b/src/test-fbp/switcher-simple-forward.fbp
@@ -37,61 +37,61 @@ const_direction_vector(constant/direction-vector:value="255|10|100")
 const_string(constant/string:value="Hello")
 const_error(constant/string:value="Numerical argument out of domain")
 
-hub_boolean(hub/boolean)
-hub_blob(hub/blob)
-hub_byte(hub/byte)
-hub_empty(hub/empty)
-hub_error(hub/error)
-hub_float(hub/float)
-hub_int(hub/int)
-hub_rgb(hub/rgb)
-hub_direction_vector(hub/direction-vector)
-hub_string(hub/string)
+hub_boolean(switcher/boolean)
+hub_blob(switcher/blob)
+hub_byte(switcher/byte)
+hub_empty(switcher/empty)
+hub_error(switcher/error)
+hub_float(switcher/float)
+hub_int(switcher/int)
+hub_rgb(switcher/rgb)
+hub_direction_vector(switcher/direction-vector)
+hub_string(switcher/string)
 
 empty_to_boolean(converter/empty-to-boolean)
 
 const_boolean OUT -> IN hub_boolean
 const_boolean OUT -> IN[0] and(boolean/and)
 hub_boolean OUT -> IN[1] and
-and OUT -> RESULT result_hub_boolean(test/result)
+and OUT -> RESULT result_switcher_boolean(test/result)
 
 const_boolean OUT -> IN hub_empty
-hub_empty OUT -> IN empty_to_boolean OUT -> RESULT result_hub_empty(test/result)
+hub_empty OUT[0] -> IN empty_to_boolean OUT -> RESULT result_switcher_empty(test/result)
 
 const_byte OUT -> IN hub_byte
 const_int OUT -> IN[0] byte_equal(int/equal)
-hub_byte OUT -> IN _(converter/byte-to-int) OUT -> IN[1] byte_equal
-byte_equal OUT -> RESULT result_hub_byte(test/result)
+hub_byte OUT[0] -> IN _(converter/byte-to-int) OUT -> IN[1] byte_equal
+byte_equal OUT -> RESULT result_switcher_byte(test/result)
 
 const_float OUT -> IN hub_float
 const_float OUT -> IN[0] float_equal(float/equal)
-hub_float OUT -> IN[1] float_equal
-float_equal OUT -> RESULT result_hub_float(test/result)
+hub_float OUT[0] -> IN[1] float_equal
+float_equal OUT -> RESULT result_switcher_float(test/result)
 
 const_int OUT -> IN hub_int
 const_int OUT -> IN[0] int_equal(int/equal)
-hub_int OUT -> IN[1] int_equal
-int_equal OUT -> RESULT result_hub_int(test/result)
+hub_int OUT[0] -> IN[1] int_equal
+int_equal OUT -> RESULT result_switcher_int(test/result)
 
 const_rgb OUT -> IN hub_rgb
 const_int OUT -> IN[0] rgb_equal
-hub_rgb OUT -> IN _(converter/rgb-to-int) GREEN -> IN[1] rgb_equal(int/equal)
-rgb_equal OUT -> RESULT result_hub_rgb(test/result)
+hub_rgb OUT[0] -> IN _(converter/rgb-to-int) GREEN -> IN[1] rgb_equal(int/equal)
+rgb_equal OUT -> RESULT result_switcher_rgb(test/result)
 
 const_direction_vector OUT -> IN hub_direction_vector
 const_int OUT -> IN[0] direction_vector_equal
-hub_direction_vector OUT -> IN _(converter/direction-vector-to-int) Y -> IN[1] direction_vector_equal(int/equal)
-direction_vector_equal OUT -> RESULT result_hub_direction_vector(test/result)
+hub_direction_vector OUT[0] -> IN _(converter/direction-vector-to-int) Y -> IN[1] direction_vector_equal(int/equal)
+direction_vector_equal OUT -> RESULT result_switcher_direction_vector(test/result)
 
 const_string OUT -> IN hub_string
 const_string OUT -> IN[0] string_equal(string/compare)
-hub_string OUT -> IN[1] string_equal
-string_equal EQUAL -> RESULT result_hub_string(test/result)
+hub_string OUT[0] -> IN[1] string_equal
+string_equal EQUAL -> RESULT result_switcher_string(test/result)
 
 str_to_blob(converter/string-to-blob)
 blob_validator(test/blob-validator:expected="Hello",expect_terminating_null_byte=true)
 const_string OUT -> IN str_to_blob OUT -> IN blob_validator
-blob_validator OUT -> RESULT result_hub_blob(test/result)
+blob_validator OUT -> RESULT result_switcher_blob(test/result)
 
 const_int OUT -> DIVIDEND div(int/division)
 const_zero(constant/int:value=0) OUT -> DIVISOR div
@@ -99,7 +99,7 @@ div ERROR -> IN hub_error
 hub_error ERROR -> IN conv_error(converter/error)
 conv_error MESSAGE -> IN[0] error_msg_equal(string/compare)
 const_error OUT -> IN[1] error_msg_equal
-error_msg_equal EQUAL -> RESULT result_hub_error(test/result)
+error_msg_equal EQUAL -> RESULT result_switcher_error(test/result)
 
 ## TEST-OUTPUT-REGEX
 # WRN: ./src/lib/common/sol-types.c:.*? sol_irange_division\(\) Division by zero: 10, 0
diff --git a/src/test-fbp/switcher.fbp b/src/test-fbp/switcher.fbp
new file mode 100644
index 00000000..8ae818a3
--- /dev/null
+++ b/src/test-fbp/switcher.fbp
@@ -0,0 +1,57 @@
+# This file is part of the Soletta Project
+#
+# Copyright (C) 2015 Intel Corporation. All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+#   * Redistributions of source code must retain the above copyright
+#     notice, this list of conditions and the following disclaimer.
+#   * Redistributions in binary form must reproduce the above copyright
+#     notice, this list of conditions and the following disclaimer in
+#     the documentation and/or other materials provided with the
+#     distribution.
+#   * Neither the name of Intel Corporation nor the names of its
+#     contributors may be used to endorse or promote products derived
+#     from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+
+two(constant/int:value=2)
+six(constant/int:value=6)
+
+mod(int/modulo)
+less(int/less)
+pulse(converter/boolean-to-empty)
+accumulator(int/accumulator)
+switcher(switcher/int)
+
+val0(test/int-validator:sequence="0 1 3 5")
+val1(test/int-validator:sequence="2 4 6")
+
+accumulator OUT -> DIVIDEND mod
+two OUT -> DIVISOR mod
+
+mod OUT -> OUT_PORT switcher
+
+accumulator OUT -> IN switcher
+
+accumulator OUT -> IN[0] less
+six OUT -> IN[1] less
+
+less OUT -> PULSE_IF_TRUE pulse OUT -> INC accumulator
+
+switcher OUT[0] -> IN val0 OUT -> RESULT switcher_port0(test/result)
+switcher OUT[1] -> IN val1 OUT -> RESULT switcher_port1(test/result)