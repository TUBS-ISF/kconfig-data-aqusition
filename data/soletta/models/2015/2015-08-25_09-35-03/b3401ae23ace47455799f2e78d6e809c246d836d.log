"2015-08-25 09:35:03 -0300"
diff --git a/src/modules/flow/iio/Kconfig b/src/modules/flow/iio/Kconfig
index e0dcb1a4..7df169cd 100644
--- a/src/modules/flow/iio/Kconfig
+++ b/src/modules/flow/iio/Kconfig
@@ -1,4 +1,4 @@
 config FLOW_NODE_TYPE_IIO
 	tristate "Node type: iio"
-	depends on FLOW && PLATFORM_LINUX
+	depends on PLATFORM_LINUX
 	default m
diff --git a/src/modules/flow/iio/iio.json b/src/modules/flow/iio/iio.json
index 50bd88f4..edf215f1 100644
--- a/src/modules/flow/iio/iio.json
+++ b/src/modules/flow/iio/iio.json
@@ -28,8 +28,8 @@
       "options": {
        "members": [
          {
-           "data_type": "int",
-           "description": "IIO device number",
+           "data_type": "string",
+           "description": "IIO device identifier. It's a space separated list of commands. For commands, if it's an integer value, will be interpreted as IIO device id. If it's a string starting with '/', will be interpreted as absolute path of IIO device on sysfs. If it's on the form 'i2c/X-YYYY', will evaluate to an i2c device on sysfs, where X is the bus number and YYYY is the device number, eg, 7-0069, for device 0x69 on bus 7. If it's on the form 'create,i2c,<rel_path>,<devnumber>,<devname>', where rel_path is the path of bus relative to '/sys/devices', them it will attempt to create an IIO device on that i2c bus and use it.",
            "name": "iio_device"
          },
          {
diff --git a/src/modules/flow/iio/nodes.c b/src/modules/flow/iio/nodes.c
index 87197fc9..2204f226 100644
--- a/src/modules/flow/iio/nodes.c
+++ b/src/modules/flow/iio/nodes.c
@@ -39,12 +39,17 @@
 #include <sol-iio.h>
 
 struct gyroscope_data {
+    struct sol_iio_config config;
+    struct sol_direction_vector scale;
+    struct sol_direction_vector offset;
     struct sol_flow_node *node;
     struct sol_iio_device *device;
     struct sol_iio_channel *channel_x;
     struct sol_iio_channel *channel_y;
     struct sol_iio_channel *channel_z;
     bool buffer_enabled : 1;
+    bool use_device_default_scale : 1;
+    bool use_device_default_offset : 1;
 };
 
 static void
@@ -80,37 +85,20 @@ error:
     SOL_WRN("%s", errmsg);
 }
 
-static int
-gyroscope_open(struct sol_flow_node *node, void *data, const struct sol_flow_node_options *options)
+static void
+create_device_cb(void *data, int device_id)
 {
     struct gyroscope_data *mdata = data;
-    const struct sol_flow_node_type_iio_gyroscope_options *opts;
-    struct sol_iio_config config;
     struct sol_iio_channel_config channel_config = SOL_IIO_CHANNEL_CONFIG_INIT;
 
-    SOL_FLOW_NODE_OPTIONS_SUB_API_CHECK(options, SOL_FLOW_NODE_TYPE_IIO_GYROSCOPE_OPTIONS_API_VERSION,
-        -EINVAL);
-    opts = (const struct sol_flow_node_type_iio_gyroscope_options *)options;
-
-    mdata->buffer_enabled = opts->buffer_size.val > -1;
-
-    config.api_version = SOL_IIO_CONFIG_API_VERSION;
-    config.trigger_name = opts->iio_trigger_name;
-    config.buffer_size = opts->buffer_size.val;
-    config.sampling_frequency = opts->sampling_frequency.val;
-    if (mdata->buffer_enabled) {
-        config.sol_iio_reader_cb = reader_cb;
-        config.data = mdata;
-    }
-
-    mdata->device = sol_iio_open(opts->iio_device.val, &config);
-    SOL_NULL_CHECK(mdata->device, -EINVAL);
+    mdata->device = sol_iio_open(device_id, &mdata->config);
+    SOL_NULL_CHECK(mdata->device);
 
 #define ADD_CHANNEL(_axis) \
-    if (!opts->use_device_default_scale) \
-        channel_config.scale = opts->scale._axis; \
-    if (!opts->use_device_default_offset) \
-        channel_config.offset = opts->offset._axis; \
+    if (!mdata->use_device_default_scale) \
+        channel_config.scale = mdata->scale._axis; \
+    if (!mdata->use_device_default_offset) \
+        channel_config.offset = mdata->offset._axis; \
     mdata->channel_ ## _axis = sol_iio_add_channel(mdata->device, "in_anglvel_" # _axis, &channel_config); \
     SOL_NULL_CHECK_GOTO(mdata->channel_ ## _axis, error);
 
@@ -121,16 +109,48 @@ gyroscope_open(struct sol_flow_node *node, void *data, const struct sol_flow_nod
 #undef ADD_CHANNEL
 
     sol_iio_device_start_buffer(mdata->device);
-    mdata->node = node;
 
-    return 0;
+    return;
 
 error:
-    SOL_WRN("Could not open create iio/gyroscope node. Failed to open IIO device %d",
-        opts->iio_device.val);
+    SOL_WRN("Could not create iio/gyroscope node. Failed to open IIO device %d",
+        device_id);
     sol_iio_close(mdata->device);
+}
 
-    return -EINVAL;
+static int
+gyroscope_open(struct sol_flow_node *node, void *data, const struct sol_flow_node_options *options)
+{
+    struct gyroscope_data *mdata = data;
+    const struct sol_flow_node_type_iio_gyroscope_options *opts;
+
+    SOL_FLOW_NODE_OPTIONS_SUB_API_CHECK(options, SOL_FLOW_NODE_TYPE_IIO_GYROSCOPE_OPTIONS_API_VERSION,
+        -EINVAL);
+    opts = (const struct sol_flow_node_type_iio_gyroscope_options *)options;
+
+    mdata->node = node;
+
+    mdata->buffer_enabled = opts->buffer_size.val > -1;
+
+    mdata->config.api_version = SOL_IIO_CONFIG_API_VERSION;
+    mdata->config.trigger_name = opts->iio_trigger_name;
+    mdata->config.buffer_size = opts->buffer_size.val;
+    mdata->config.sampling_frequency = opts->sampling_frequency.val;
+    if (mdata->buffer_enabled) {
+        mdata->config.sol_iio_reader_cb = reader_cb;
+        mdata->config.data = mdata;
+    }
+    mdata->use_device_default_scale = opts->use_device_default_scale;
+    mdata->use_device_default_offset = opts->use_device_default_offset;
+    mdata->scale = opts->scale;
+    mdata->offset = opts->offset;
+
+    if (!sol_iio_address_device(opts->iio_device, create_device_cb, mdata)) {
+        SOL_WRN("Could not create iio/gyroscope node. Failed to open IIO device %s",
+            opts->iio_device);
+    }
+
+    return 0;
 }
 
 static void
diff --git a/src/samples/flow/iio/gyroscope.fbp b/src/samples/flow/iio/gyroscope.fbp
index 2a90ac6e..b58e7594 100644
--- a/src/samples/flow/iio/gyroscope.fbp
+++ b/src/samples/flow/iio/gyroscope.fbp
@@ -29,8 +29,11 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 # Print iio gyroscope reading each second
+# iio_device: will first try any device whose name is 'l3g4200d'. If fails,
+# will try to create it using the 'create' command. If it fails, tries
+# IIO device whose id is '0'.
 
-gyro(iio/gyroscope:iio_device=0,buffer_size=20)
+gyro(iio/gyroscope:iio_device="l3g4200d create,i2c,platform/80860F41:05,0x69,l3g4200d 0",buffer_size=20)
 timer(timer)
 
 timer OUT -> TICK gyro OUT -> IN _(console)