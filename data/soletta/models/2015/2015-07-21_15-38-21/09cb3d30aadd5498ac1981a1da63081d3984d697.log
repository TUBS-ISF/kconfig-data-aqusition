"2015-07-21 15:38:21 -0300"
diff --git a/src/test/.gitignore b/src/test/.gitignore
index e42587e7..80f8f3dc 100644
--- a/src/test/.gitignore
+++ b/src/test/.gitignore
@@ -13,6 +13,7 @@
 /test-io-converter
 /test-io-link
 /test-io-monitor
+/test-javascript
 /test-json
 /test-mainloop
 /test-mainloop-linux
diff --git a/src/test/Kconfig b/src/test/Kconfig
index 8acb957e..1edfd10d 100644
--- a/src/test/Kconfig
+++ b/src/test/Kconfig
@@ -34,6 +34,11 @@ config TEST_FLOW_PARSER
 	depends on FLOW && NODE_DESCRIPTION
 	default y
 
+config TEST_JAVASCRIPT
+	bool "javascript"
+	depends on JAVASCRIPT
+	default y
+
 config TEST_MAINLOOP
 	bool "mainloop"
 	default y
diff --git a/src/test/Makefile b/src/test/Makefile
index d3ce91e8..842a59a4 100644
--- a/src/test/Makefile
+++ b/src/test/Makefile
@@ -20,6 +20,9 @@ test-test-flow-builder-$(TEST_FLOW_BUILDER) := test.c test-flow-builder.c
 test-$(TEST_FLOW_PARSER) += test-flow-parser
 test-test-flow-parser-$(TEST_FLOW_PARSER) := test.c test-flow-parser.c
 
+test-$(TEST_JAVASCRIPT) += test-javascript
+test-test-javascript-$(TEST_JAVASCRIPT) := test.c test-javascript.c
+
 test-$(TEST_MAINLOOP) += test-mainloop
 test-test-mainloop-$(TEST_MAINLOOP) := test-mainloop.c
 
diff --git a/src/test/test-javascript.c b/src/test/test-javascript.c
new file mode 100644
index 00000000..ee357fc6
--- /dev/null
+++ b/src/test/test-javascript.c
@@ -0,0 +1,87 @@
+/*
+ * This file is part of the Soletta Project
+ *
+ * Copyright (C) 2015 Intel Corporation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <errno.h>
+
+#include "sol-flow.h"
+#include "sol-flow-js.h"
+#include "sol-log.h"
+#include "sol-util.h"
+
+#include "test.h"
+
+#define JS_ASSERT_TRUE(_buf) {                                               \
+        struct sol_flow_node_type *t = sol_flow_js_new_type(_buf, strlen(_buf)); \
+        if (!t) {                                                                \
+            SOL_WRN("Failed to parse '%s'.", _buf);                              \
+            ASSERT(false);                                                       \
+        }                                                                        \
+        sol_flow_node_type_del(t); }
+
+#define JS_ASSERT_FALSE(_buf) {                                              \
+        struct sol_flow_node_type *t = sol_flow_js_new_type(_buf, strlen(_buf)); \
+        if (t) {                                                                 \
+            SOL_WRN("Parse should not be successful '%s'.", _buf);               \
+            ASSERT(false);                                                       \
+        }                                                                        \
+        sol_flow_node_type_del(t); }
+
+DEFINE_TEST(test_js);
+
+static void
+test_js(void)
+{
+    JS_ASSERT_FALSE("");
+
+    /* variables and methods */
+    JS_ASSERT_FALSE("var ports = {};");
+    JS_ASSERT_FALSE("var foo = 123; var my_ports = {};");
+    JS_ASSERT_FALSE("function in_port() { print('hello!'); }");
+    JS_ASSERT_TRUE("var node = {};");
+    JS_ASSERT_TRUE("var foo = 123; var node = {}; var bar = 'bar';");
+    JS_ASSERT_TRUE("function bar() { print('hello!'); } var node = {};");
+
+    /* in/out ports */
+    JS_ASSERT_TRUE("var node = { in: [{ name: 'IN_PORT', type:'int' }, { name: 'IN_PORT2', type: 'string'}]};");
+    JS_ASSERT_TRUE("var node = { out: [{ name: 'OUT_PORT', type:'float' }, { name: 'OUT_PORT2', type: 'byte'}]};");
+    JS_ASSERT_TRUE("var node = { in: [{ name: 'IN_PORT', type:'string' }], out: [{ name: 'OUT_PORT', type: 'int'}]};");
+
+    /* methods */
+    JS_ASSERT_TRUE("var node = { in: [{ name: 'IN', type: 'rgb', process: function() { print('process'); }} ]};");
+    JS_ASSERT_TRUE("var node = { out: [{ name: 'OUT', type: 'string', connect: function() { print('connect'); }} ]};");
+
+    /* properties on node variable */
+    JS_ASSERT_TRUE("var node = { in: [{ name: 'IN', type: 'rgb', process: function() { print('process'); }} ], property_1:123 };");
+}
+
+
+TEST_MAIN();