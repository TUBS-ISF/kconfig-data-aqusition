"2015-11-18 16:37:15 -0200"
diff --git a/src/lib/flow/Kconfig b/src/lib/flow/Kconfig
index 61198ffa..b414d872 100644
--- a/src/lib/flow/Kconfig
+++ b/src/lib/flow/Kconfig
@@ -66,6 +66,7 @@ source "src/modules/flow/oic/Kconfig"
 source "src/modules/flow/persistence/Kconfig"
 source "src/modules/flow/piezo-speaker/Kconfig"
 source "src/modules/flow/platform/Kconfig"
+source "src/modules/flow/power-supply/Kconfig"
 source "src/modules/flow/process/Kconfig"
 source "src/modules/flow/pwm/Kconfig"
 source "src/modules/flow/random/Kconfig"
diff --git a/src/modules/flow/power-supply/Kconfig b/src/modules/flow/power-supply/Kconfig
new file mode 100644
index 00000000..7705cfca
--- /dev/null
+++ b/src/modules/flow/power-supply/Kconfig
@@ -0,0 +1,13 @@
+config FLOW_NODE_TYPE_POWER_SUPPLY
+	tristate "Node type: power-supply"
+	depends on POWER_SUPPLY
+	default m
+	help
+		Power supply is used to get information from battery, UPS,
+		AC or DC power supplies.
+
+		This option enables node types:
+
+			* power-supply/get-list, to query the name of all
+			  power supply attached to the board.
+			* power-supply/get-capacity, to get batteries capacity.
diff --git a/src/modules/flow/power-supply/Makefile b/src/modules/flow/power-supply/Makefile
new file mode 100644
index 00000000..6cf98cef
--- /dev/null
+++ b/src/modules/flow/power-supply/Makefile
@@ -0,0 +1,8 @@
+obj-$(FLOW_NODE_TYPE_POWER_SUPPLY) += \
+	power-supply.mod
+
+obj-power-supply-$(FLOW_NODE_TYPE_POWER_SUPPLY) := \
+	power-supply.json \
+	power-supply.o
+
+obj-power-supply-$(FLOW_NODE_TYPE_POWER_SUPPLY)-type := flow
diff --git a/src/modules/flow/power-supply/power-supply.c b/src/modules/flow/power-supply/power-supply.c
new file mode 100644
index 00000000..aae2d111
--- /dev/null
+++ b/src/modules/flow/power-supply/power-supply.c
@@ -0,0 +1,311 @@
+/*
+ * This file is part of the Soletta Project
+ *
+ * Copyright (C) 2015 Intel Corporation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "sol-flow/power-supply.h"
+#include "sol-flow-internal.h"
+
+#include <sol-power-supply.h>
+#include <sol-str-table.h>
+#include <sol-util.h>
+#include <errno.h>
+
+
+struct get_list_data {
+    enum sol_power_supply_type type;
+    bool type_defined;
+};
+
+struct get_props_data {
+    char *name;
+};
+
+static void
+set_type(struct get_list_data *mdata, const char *type)
+{
+    static const struct sol_str_table table[] = {
+        SOL_STR_TABLE_ITEM("Unknown", SOL_POWER_SUPPLY_TYPE_UNKNOWN),
+        SOL_STR_TABLE_ITEM("Battery", SOL_POWER_SUPPLY_TYPE_BATTERY),
+        SOL_STR_TABLE_ITEM("UPS", SOL_POWER_SUPPLY_TYPE_UPS),
+        SOL_STR_TABLE_ITEM("Mains", SOL_POWER_SUPPLY_TYPE_MAINS),
+        SOL_STR_TABLE_ITEM("USB", SOL_POWER_SUPPLY_TYPE_USB),
+        SOL_STR_TABLE_ITEM("USB_DCP", SOL_POWER_SUPPLY_TYPE_USB_DCP),
+        SOL_STR_TABLE_ITEM("USB_CDP", SOL_POWER_SUPPLY_TYPE_USB_CDP),
+        SOL_STR_TABLE_ITEM("USB_ACA", SOL_POWER_SUPPLY_TYPE_USB_ACA),
+        { }
+    };
+
+    if (!strcasecmp(type, "any")) {
+        mdata->type_defined = false;
+        return;
+    }
+
+    mdata->type = sol_str_table_lookup_fallback(table,
+        sol_str_slice_from_str(type),
+        SOL_POWER_SUPPLY_TYPE_UNKNOWN);
+    mdata->type_defined = true;
+}
+
+static int
+get_list(struct sol_flow_node *node, struct get_list_data *mdata)
+{
+    struct sol_ptr_vector list;
+    char *name;
+    int r;
+    uint16_t i;
+
+    if (mdata->type_defined)
+        r = sol_power_supply_get_list_by_type(&list, mdata->type);
+    else
+        r = sol_power_supply_get_list(&list);
+
+    SOL_INT_CHECK(r, < 0, r);
+
+    SOL_PTR_VECTOR_FOREACH_IDX (&list, name, i) {
+        r = sol_flow_send_string_packet(node,
+            SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_LIST__OUT__OUT,
+            name);
+        if (r < 0)
+            SOL_WRN("Failed to send power supply name: %s", name);
+        free(name);
+    }
+    sol_ptr_vector_clear(&list);
+
+    return 0;
+}
+
+static int
+get_list_open(struct sol_flow_node *node, void *data, const struct sol_flow_node_options *options)
+{
+    struct get_list_data *mdata = data;
+    const struct sol_flow_node_type_power_supply_get_list_options *opts;
+
+    SOL_FLOW_NODE_OPTIONS_SUB_API_CHECK(options,
+        SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_LIST_OPTIONS_API_VERSION,
+        -EINVAL);
+    opts = (const struct sol_flow_node_type_power_supply_get_list_options *)
+        options;
+
+    if (opts->type)
+        set_type(mdata, opts->type);
+
+    return 0;
+}
+
+static int
+get_list_process(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
+{
+    return get_list(node, data);
+}
+
+static int
+set_type_process(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
+{
+    struct get_list_data *mdata = data;
+    const char *in_value;
+    int r;
+
+    r = sol_flow_packet_get_string(packet, &in_value);
+    SOL_INT_CHECK(r, < 0, r);
+    set_type(mdata, in_value);
+
+    return 0;
+}
+
+static int
+set_name(struct sol_flow_node *node, struct get_props_data *mdata, const char *name)
+{
+    int r;
+    bool exist;
+
+    mdata->name = strdup(name);
+    SOL_NULL_CHECK(mdata->name, -ENOMEM);
+
+    r = sol_power_supply_exist(mdata->name, &exist);
+    SOL_INT_CHECK(r, < 0, r);
+
+    if (!exist)
+        return sol_flow_send_error_packet(node, ENOENT,
+            "Power supply %s doesn't exist.", mdata->name);
+
+    return 0;
+}
+
+static int
+get_props_open(struct sol_flow_node *node, void *data, const struct sol_flow_node_options *options)
+{
+    struct get_props_data *mdata = data;
+    const struct sol_flow_node_type_power_supply_get_capacity_options *opts;
+
+    SOL_FLOW_NODE_OPTIONS_SUB_API_CHECK(options,
+        SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_CAPACITY_OPTIONS_API_VERSION,
+        -EINVAL);
+    opts = (const struct sol_flow_node_type_power_supply_get_capacity_options *)
+        options;
+
+    if (opts->name)
+        return set_name(node, mdata, opts->name);
+
+    return 0;
+}
+
+static void
+get_props_close(struct sol_flow_node *node, void *data)
+{
+    struct get_props_data *mdata = data;
+
+    free(mdata->name);
+}
+
+static int
+set_supply_name(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
+{
+    struct get_props_data *mdata = data;
+    const char *in_value;
+    int r;
+
+    r = sol_flow_packet_get_string(packet, &in_value);
+    SOL_INT_CHECK(r, < 0, r);
+
+    free(mdata->name);
+    return set_name(node, mdata, in_value);
+}
+
+static int
+get_capacity(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
+{
+    struct get_props_data *mdata = data;
+    struct sol_irange capacity = { 0, 0, 100, 1 };
+    enum sol_power_supply_capacity_level capacity_level;
+    int r;
+    bool exist;
+
+    static const char *level_msgs[] = {
+        [SOL_POWER_SUPPLY_CAPACITY_LEVEL_UNKNOWN] = "Unknown",
+        [SOL_POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL] = "Critical",
+        [SOL_POWER_SUPPLY_CAPACITY_LEVEL_LOW] = "Low",
+        [SOL_POWER_SUPPLY_CAPACITY_LEVEL_NORMAL] = "Normal",
+        [SOL_POWER_SUPPLY_CAPACITY_LEVEL_HIGH] = "High",
+        [SOL_POWER_SUPPLY_CAPACITY_LEVEL_FULL] = "Full",
+    };
+
+    if (!mdata->name)
+        return sol_flow_send_error_packet(node, EINVAL,
+            "Missing power supply name.");
+
+    r = sol_power_supply_exist(mdata->name, &exist);
+    SOL_INT_CHECK(r, < 0, r);
+    if (!exist)
+        return sol_flow_send_error_packet(node, EINVAL,
+            "Power supply %s doesn't exist.", mdata->name);
+
+    r = sol_power_supply_get_capacity(mdata->name, &capacity.val);
+    if (r < 0) {
+        r = sol_flow_send_error_packet(node, ENOENT,
+            "Couldn't get power supply %s capacity.", mdata->name);
+        SOL_INT_CHECK(r, < 0, r);
+    } else {
+        r = sol_flow_send_irange_packet(node,
+            SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_CAPACITY__OUT__CAPACITY,
+            &capacity);
+        SOL_INT_CHECK(r, < 0, r);
+    }
+
+    r = sol_power_supply_get_capacity_level(mdata->name, &capacity_level);
+    if (r < 0) {
+        r = sol_flow_send_error_packet(node, EINVAL,
+            "Couldn't get power supply %s capacity level.", mdata->name);
+        SOL_INT_CHECK(r, < 0, r);
+    } else {
+        r = sol_flow_send_string_packet(node,
+            SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_CAPACITY__OUT__CAPACITY_LEVEL,
+            level_msgs[capacity_level]);
+        SOL_INT_CHECK(r, < 0, r);
+    }
+
+    return 0;
+}
+
+static int
+send_string_prop(struct sol_flow_node *node, const char *name, int (*func)(const char *name, char **prop), uint16_t port, const char *err_msg)
+{
+    char *prop;
+    int r;
+
+    r = func(name, &prop);
+    if (r < 0) {
+        r = sol_flow_send_error_packet_str(node, EINVAL, err_msg);
+        SOL_INT_CHECK(r, < 0, r);
+    } else {
+        r = sol_flow_send_string_packet(node, port, prop);
+        free(prop);
+        SOL_INT_CHECK(r, < 0, r);
+    }
+
+    return 0;
+}
+
+static int
+get_info(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
+{
+    struct get_props_data *mdata = data;
+    int r;
+    bool exist;
+
+    if (!mdata->name)
+        return sol_flow_send_error_packet(node, EINVAL,
+            "Missing power supply name.");
+
+    r = sol_power_supply_exist(mdata->name, &exist);
+    SOL_INT_CHECK(r, < 0, r);
+    if (!exist)
+        return sol_flow_send_error_packet(node, ENOENT,
+            "Power supply %s doesn't exist.", mdata->name);
+
+    r = send_string_prop(node, mdata->name, sol_power_supply_get_manufacturer,
+        SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_INFO__OUT__MANUFACTURER,
+        "Couldn't get power supply manufacturer.");
+    SOL_INT_CHECK(r, < 0, r);
+
+    send_string_prop(node, mdata->name, sol_power_supply_get_model_name,
+        SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_INFO__OUT__MODEL,
+        "Couldn't get power supply model.");
+    SOL_INT_CHECK(r, < 0, r);
+
+    send_string_prop(node, mdata->name, sol_power_supply_get_serial_number,
+        SOL_FLOW_NODE_TYPE_POWER_SUPPLY_GET_INFO__OUT__SERIAL,
+        "Couldn't get power supply serial.");
+    SOL_INT_CHECK(r, < 0, r);
+
+    return 0;
+}
+
+#include "power-supply-gen.c"
diff --git a/src/modules/flow/power-supply/power-supply.json b/src/modules/flow/power-supply/power-supply.json
new file mode 100644
index 00000000..e1226862
--- /dev/null
+++ b/src/modules/flow/power-supply/power-supply.json
@@ -0,0 +1,166 @@
+{
+  "$schema": "http://solettaproject.github.io/soletta/schemas/node-type-genspec.schema",
+  "name": "power-supply",
+  "meta": {
+    "author": "Intel Corporation",
+    "license": "BSD-3-Clause",
+    "version": "1"
+  },
+  "types": [
+    {
+      "category": "power-supply",
+      "description": "Send list of all power supplies attached to board.",
+      "in_ports": [
+        {
+          "data_type": "any",
+          "description": "Trigger to get list of power supplies.",
+          "methods": {
+            "process": "get_list_process"
+          },
+          "name": "TRIGGER"
+        },
+        {
+          "data_type": "string",
+          "description": "Name of type to be used to filter power supplies. It can be 'Any', 'Unknown', 'Battery', 'UPS', 'Mains', 'USB', 'USB_DCP', 'USB_CDP', 'USB_ACA'.",
+          "methods": {
+            "process": "set_type_process"
+          },
+          "name": "TYPE"
+        }
+      ],
+      "methods": {
+        "open": "get_list_open"
+      },
+      "name": "power-supply/get-list",
+      "options": {
+        "members": [
+          {
+            "data_type": "string",
+            "default": null,
+            "description": "Name of type to be used to filter power supplies. It can be 'Any', 'Unknown', 'Battery', 'UPS', 'Mains', 'USB', 'USB_DCP', 'USB_CDP', 'USB_ACA'. If 'null', no filter is applied.",
+            "name": "type"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "string",
+          "description": "Name of power supplies that match specified type.",
+          "name": "OUT"
+        }
+      ],
+      "private_data_type": "get_list_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/power-supply/get-list.html"
+    },
+    {
+      "category": "power-supply",
+      "description": "Get capacity of a power supply. Usually provided by batteries.",
+      "in_ports": [
+        {
+          "data_type": "any",
+          "description": "Trigger to get capacity.",
+          "methods": {
+            "process": "get_capacity"
+          },
+          "name": "TRIGGER"
+        },
+        {
+          "data_type": "string",
+          "description": "Name of power supply.",
+          "methods": {
+            "process": "set_supply_name"
+          },
+          "name": "NAME"
+        }
+      ],
+      "methods": {
+        "open": "get_props_open",
+        "close": "get_props_close"
+      },
+      "name": "power-supply/get-capacity",
+      "options": {
+        "members": [
+          {
+            "data_type": "string",
+            "default": null,
+            "description": "Name of power supply from where capacity will be fetched.",
+            "name": "name"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "int",
+          "description": "Supply capacity percentage.",
+          "name": "CAPACITY"
+        },
+        {
+          "data_type": "string",
+          "description": "Textual description of capacity. May vary between 'Unknown', 'Critical', 'Low', 'Normal', 'High' and 'Full'.",
+          "name": "CAPACITY_LEVEL"
+        }
+      ],
+      "private_data_type": "get_props_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/power-supply/get-capacity.html"
+    },
+    {
+      "category": "power-supply",
+      "description": "Get information about a power supply: model, serial number and manufacturer.",
+      "in_ports": [
+        {
+          "data_type": "any",
+          "description": "Trigger to get info.",
+          "methods": {
+            "process": "get_info"
+          },
+          "name": "TRIGGER"
+        },
+        {
+          "data_type": "string",
+          "description": "Name of power supply.",
+          "methods": {
+            "process": "set_supply_name"
+          },
+          "name": "NAME"
+        }
+      ],
+      "methods": {
+        "open": "get_props_open",
+        "close": "get_props_close"
+      },
+      "name": "power-supply/get-info",
+      "options": {
+        "members": [
+          {
+            "data_type": "string",
+            "default": null,
+            "description": "Name of power supply from where information will be fetched.",
+            "name": "name"
+          }
+        ],
+        "version": 1
+      },
+      "out_ports": [
+        {
+          "data_type": "string",
+          "description": "Supply manufacturer.",
+          "name": "MANUFACTURER"
+        },
+        {
+          "data_type": "string",
+          "description": "Supply model name.",
+          "name": "MODEL"
+        },
+        {
+          "data_type": "string",
+          "description": "Supply serial number.",
+          "name": "SERIAL"
+        }
+      ],
+      "private_data_type": "get_props_data",
+      "url": "http://solettaproject.org/doc/latest/node_types/power-supply/get-info.html"
+    }
+  ]
+}