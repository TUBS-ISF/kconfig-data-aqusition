"2015-09-28 17:45:11 -0300"
diff --git a/src/modules/flow/calamari/Kconfig b/src/modules/flow/calamari/Kconfig
index e1a3700a..4ef739ac 100644
--- a/src/modules/flow/calamari/Kconfig
+++ b/src/modules/flow/calamari/Kconfig
@@ -1,4 +1,4 @@
 config FLOW_NODE_TYPE_CALAMARI
 	tristate "Node type: calamari"
-	depends on (FLOW_NODE_TYPE_GPIO = y) && USE_PWM && USE_SPI
+	depends on FLOW_NODE_TYPE_GPIO && USE_PWM && USE_SPI
 	default m
diff --git a/src/modules/flow/calamari/Makefile b/src/modules/flow/calamari/Makefile
index 6dfb90f0..249ac5a1 100644
--- a/src/modules/flow/calamari/Makefile
+++ b/src/modules/flow/calamari/Makefile
@@ -1,4 +1,3 @@
 obj-$(FLOW_NODE_TYPE_CALAMARI) += calamari.mod
 obj-calamari-$(FLOW_NODE_TYPE_CALAMARI) := calamari.json calamari.o
-obj-calamari-$(FLOW_NODE_TYPE_CALAMARI)-deps := flow/gpio.mod
 obj-calamari-$(FLOW_NODE_TYPE_CALAMARI)-type := flow
diff --git a/src/modules/flow/calamari/calamari.c b/src/modules/flow/calamari/calamari.c
index 2dde3808..ecd7dd57 100644
--- a/src/modules/flow/calamari/calamari.c
+++ b/src/modules/flow/calamari/calamari.c
@@ -241,6 +241,7 @@ static void
 calamari_7seg_new_type(const struct sol_flow_node_type **current)
 {
     struct sol_flow_node_type *type;
+    const struct sol_flow_node_type *gpio_writer;
 
     static struct sol_flow_static_node_spec nodes[] = {
         [SEG_CTL] = { NULL, "segments-ctl", NULL },
@@ -273,8 +274,13 @@ calamari_7seg_new_type(const struct sol_flow_node_type **current)
         .child_opts_set = calamari_7seg_child_opts_set,
     };
 
+    if (sol_flow_get_node_type("gpio", SOL_FLOW_NODE_TYPE_GPIO_WRITER, &gpio_writer) < 0) {
+        *current = NULL;
+        return;
+    }
+
     nodes[SEG_CTL].type = SOL_FLOW_NODE_TYPE_CALAMARI_SEGMENTS_CTL;
-    nodes[SEG_CLEAR].type = nodes[SEG_LATCH].type = nodes[SEG_CLOCK].type = nodes[SEG_DATA].type = SOL_FLOW_NODE_TYPE_GPIO_WRITER;
+    nodes[SEG_CLEAR].type = nodes[SEG_LATCH].type = nodes[SEG_CLOCK].type = nodes[SEG_DATA].type = gpio_writer;
 
     type = sol_flow_static_new_type(&spec);
     SOL_NULL_CHECK(type);
@@ -569,6 +575,7 @@ static void
 calamari_rgb_led_new_type(const struct sol_flow_node_type **current)
 {
     struct sol_flow_node_type *type;
+    const struct sol_flow_node_type *gpio_writer;
 
     static struct sol_flow_static_node_spec nodes[] = {
         [RGB_LED_CTL] = { NULL, "rgb-ctl", NULL },
@@ -600,8 +607,13 @@ calamari_rgb_led_new_type(const struct sol_flow_node_type **current)
         .child_opts_set = calamari_rgb_child_opts_set,
     };
 
+    if (sol_flow_get_node_type("gpio", SOL_FLOW_NODE_TYPE_GPIO_WRITER, &gpio_writer) < 0) {
+        *current = NULL;
+        return;
+    }
+
     nodes[RGB_LED_CTL].type = SOL_FLOW_NODE_TYPE_CALAMARI_RGB_CTL;
-    nodes[RGB_LED_RED].type = nodes[RGB_LED_GREEN].type = nodes[RGB_LED_BLUE].type = SOL_FLOW_NODE_TYPE_GPIO_WRITER;
+    nodes[RGB_LED_RED].type = nodes[RGB_LED_GREEN].type = nodes[RGB_LED_BLUE].type = gpio_writer;
 
     type = sol_flow_static_new_type(&spec);
     SOL_NULL_CHECK(type);
diff --git a/src/modules/flow/grove/grove.c b/src/modules/flow/grove/grove.c
index 6efd2b9e..f61ce180 100644
--- a/src/modules/flow/grove/grove.c
+++ b/src/modules/flow/grove/grove.c
@@ -80,6 +80,7 @@ static void
 grove_rotary_sensor_new_type(const struct sol_flow_node_type **current)
 {
     struct sol_flow_node_type *type;
+    const struct sol_flow_node_type *aio_reader;
 
     static struct sol_flow_static_node_spec nodes[] = {
         { NULL, "rotary-converter", NULL },
@@ -107,8 +108,13 @@ grove_rotary_sensor_new_type(const struct sol_flow_node_type **current)
         .child_opts_set = rotary_child_opts_set,
     };
 
+    if (sol_flow_get_node_type("aio", SOL_FLOW_NODE_TYPE_AIO_READER, &aio_reader) < 0) {
+        *current = NULL;
+        return;
+    }
+
     nodes[0].type = SOL_FLOW_NODE_TYPE_GROVE_ROTARY_CONVERTER;
-    nodes[1].type = SOL_FLOW_NODE_TYPE_AIO_READER;
+    nodes[1].type = aio_reader;
 
     type = sol_flow_static_new_type(&spec);
     SOL_NULL_CHECK(type);
@@ -208,6 +214,7 @@ static void
 grove_light_sensor_new_type(const struct sol_flow_node_type **current)
 {
     struct sol_flow_node_type *type;
+    const struct sol_flow_node_type *aio_reader;
 
     static struct sol_flow_static_node_spec nodes[] = {
         { NULL, "light-converter", NULL },
@@ -234,8 +241,13 @@ grove_light_sensor_new_type(const struct sol_flow_node_type **current)
         .child_opts_set = light_child_opts_set,
     };
 
+    if (sol_flow_get_node_type("aio", SOL_FLOW_NODE_TYPE_AIO_READER, &aio_reader) < 0) {
+        *current = NULL;
+        return;
+    }
+
     nodes[0].type = SOL_FLOW_NODE_TYPE_GROVE_LIGHT_CONVERTER;
-    nodes[1].type = SOL_FLOW_NODE_TYPE_AIO_READER;
+    nodes[1].type = aio_reader;
 
     type = sol_flow_static_new_type(&spec);
     SOL_NULL_CHECK(type);
@@ -380,6 +392,7 @@ static void
 grove_temperature_sensor_new_type(const struct sol_flow_node_type **current)
 {
     struct sol_flow_node_type *type;
+    const struct sol_flow_node_type *aio_reader;
 
     static struct sol_flow_static_node_spec nodes[] = {
         { NULL, "temperature-converter", NULL },
@@ -406,8 +419,13 @@ grove_temperature_sensor_new_type(const struct sol_flow_node_type **current)
         .child_opts_set = temperature_child_opts_set,
     };
 
+    if (sol_flow_get_node_type("aio", SOL_FLOW_NODE_TYPE_AIO_READER, &aio_reader) < 0) {
+        *current = NULL;
+        return;
+    }
+
     nodes[0].type = SOL_FLOW_NODE_TYPE_GROVE_TEMPERATURE_CONVERTER;
-    nodes[1].type = SOL_FLOW_NODE_TYPE_AIO_READER;
+    nodes[1].type = aio_reader;
 
     type = sol_flow_static_new_type(&spec);
     SOL_NULL_CHECK(type);