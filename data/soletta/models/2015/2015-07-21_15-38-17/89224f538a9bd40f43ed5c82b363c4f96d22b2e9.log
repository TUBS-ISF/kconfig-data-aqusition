"2015-07-21 15:38:17 -0300"
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 00000000..0a602055
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,6 @@
+[submodule "src/thirdparty/duktape"]
+	path = src/thirdparty/duktape
+	url = https://github.com/svaarala/duktape-releases.git
+	branch = v1.2.2
+	sparsecheckout = true
+	sparserules = src/ LICENSE.txt
diff --git a/data/scripts/git-init-submodules.py b/data/scripts/git-init-submodules.py
new file mode 100755
index 00000000..b8a6095e
--- /dev/null
+++ b/data/scripts/git-init-submodules.py
@@ -0,0 +1,130 @@
+#!/usr/bin/env python3
+
+# This file is part of the Soletta Project
+#
+# Copyright (C) 2015 Intel Corporation. All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+#   * Redistributions of source code must retain the above copyright
+#     notice, this list of conditions and the following disclaimer.
+#   * Redistributions in binary form must reproduce the above copyright
+#     notice, this list of conditions and the following disclaimer in
+#     the documentation and/or other materials provided with the
+#     distribution.
+#   * Neither the name of Intel Corporation nor the names of its
+#     contributors may be used to endorse or promote products derived
+#     from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+import configparser
+import os
+import subprocess
+import sys
+
+def run_command(cmd):
+    try:
+        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT,
+                                         shell=True, universal_newlines=True)
+        return output.replace("\n", "").strip(), True
+    except subprocess.CalledProcessError as e:
+        return e.output, False
+
+def submodule_clone(name, path, url, branch, depth, dest, sparserules):
+    if os.path.exists(dest):
+        return None, True
+
+    print("GIT: cloning submodule %s ..." % name, end="")
+    sys.stdout.flush()
+    out, status = run_command("git clone {url} {branch} {depth} --bare {dest}".format(
+        url=url, branch=branch, depth=depth, dest=dest))
+
+    if sparserules:
+        submodule_config = "%s/config" % dest
+        rules_dir = "%s/info" % dest
+
+        if not os.path.exists(rules_dir):
+            os.makedirs(rules_dir)
+
+        rules_file = "%s/info/sparse-checkout" % dest
+
+        config = configparser.ConfigParser()
+        config.read(submodule_config)
+        config.set("core", "sparsecheckout", 'true')
+        config.set("core", "bare", 'false')
+        with open(submodule_config, "w") as fd:
+            config.write(fd)
+
+        content = ""
+        for ln in sparserules.split():
+            content += "%s\n" % ln
+
+        with open(rules_file, "w") as fd:
+            fd.write(content)
+
+    run_command("git submodule init " + path)
+
+    print("[done]")
+    return out, status
+
+def submodule_checkout(name, submodule_git, path):
+    git_link = "%s/.git" % path
+
+    if os.path.exists(git_link):
+        os.remove(git_link)
+
+    ddepth = len(path.split("/"))
+    with open(git_link, "w") as git:
+        git.write("gitdir: %s%s" % ("../" * ddepth, submodule_git))
+
+    out, status = run_command("cd {path} && git checkout -f".format(path=path))
+
+if __name__ == "__main__":
+    gitmodules = ".gitmodules"
+    
+    if not os.path.exists(gitmodules):
+        exit(0)
+
+    config = configparser.ConfigParser()
+    config["DEFAULT"] = {"sparsecheckout": False, "sparserules": "", "branch": ""}
+    config.read(gitmodules)
+
+    for k,v in config.items():
+        if not k.startswith("submodule"):
+            continue
+
+        name = k.replace("submodule ", "").replace("\"", "")
+        path = config.get(k, "path")
+        url = config.get(k, "url")
+        sparsecheckout = config.get(k, "sparsecheckout")
+        sparserules = config.get(k, "sparserules")
+        branch = config.get(k, "branch")
+
+        if not name and not path:
+            print("ERROR: Can't initialize submodule: %d, missing either name or path." % name)
+            exit(1)
+
+        submodule_git = ".git/modules/%s" % name
+        depth = "--depth 1" if sparsecheckout else ""
+        branch_arg = "-b %s" % branch if branch else ""
+        out, status = submodule_clone(name, path, url, branch_arg, depth, submodule_git, sparserules)
+
+        if not status:
+            print("ERROR: Failed to clone submodule: %s" % name)
+            print("ERROR: %s" % out)
+            exit(1)
+
+        submodule_checkout(name, submodule_git, path)
diff --git a/src/lib/flow/Kconfig b/src/lib/flow/Kconfig
index 7c4d6204..08f80094 100644
--- a/src/lib/flow/Kconfig
+++ b/src/lib/flow/Kconfig
@@ -2,6 +2,11 @@ config FLOW
 	bool "Flow support"
 	default y
 
+config JAVASCRIPT
+	bool "Javascript support"
+	depends on FLOW
+	default y
+
 config NODE_DESCRIPTION
 	bool "Node description support"
 	depends on FLOW
diff --git a/src/thirdparty/Makefile b/src/thirdparty/Makefile
new file mode 100644
index 00000000..6e0bbfe8
--- /dev/null
+++ b/src/thirdparty/Makefile
@@ -0,0 +1,9 @@
+obj-$(JAVASCRIPT) := javascript.mod
+
+obj-javascript-$(JAVASCRIPT) := \
+	duktape/src/duktape.o
+
+obj-javascript-$(JAVASCRIPT)-extra-cflags := \
+	-Wno-float-equal \
+	-Wno-format-nonliteral \
+	-Wno-suggest-attribute=noreturn
diff --git a/src/thirdparty/README b/src/thirdparty/README
new file mode 100644
index 00000000..2bbba0f2
--- /dev/null
+++ b/src/thirdparty/README
@@ -0,0 +1,10 @@
+Thirdparty
+----------
+
+- Duktape
+      - Site/Repository: http://duktape.org / https://github.com/svaarala/duktape
+      - Version: 1.2.2
+      - License: MIT - src/thirdparty/duktape/LICENSE.txt
+      - Duktape is an embeddable Javascript engine, with focus on
+        portabillity and compact footprint. This is used in order
+        to create JS node types in flow.
diff --git a/src/thirdparty/duktape b/src/thirdparty/duktape
new file mode 160000
index 00000000..3a8ead0a
--- /dev/null
+++ b/src/thirdparty/duktape
@@ -0,0 +1 @@
+Subproject commit 3a8ead0a6116bdfeaafa5da70f78975d2c6ee6e2
diff --git a/tools/build/Makefile.rules b/tools/build/Makefile.rules
index 31fb5bc6..f297591e 100644
--- a/tools/build/Makefile.rules
+++ b/tools/build/Makefile.rules
@@ -258,7 +258,7 @@ $(SOL_LIB_SO): $(PRE_GEN) $(SOL_LIB_AR) $(builtin-objs)
 	$(Q)$(TARGETCC) -shared $(builtin-objs) $(sort $(builtin-ldflags)) $(LIB_LDFLAGS) -o $(@).$(VERSION)
 	$(Q)$(LN) -fs $(notdir $(@).$(VERSION)) $(@)
 
-$(DEPENDENCY_CACHE):
+$(DEPENDENCY_CACHE): submodules-init
 	$(Q)$(PYTHON) $(DEPENDENCY_SCRIPT) --compiler="$(TARGETCC)" --cflags="$(DEP_RESOLVER_CFLAGS)" \
 		--prefix="$(PREFIX)" --cache="$(DEPENDENCY_CACHE)" --pkg-config="$(PKG_CONFIG)"
 
@@ -310,6 +310,11 @@ $(eval $(call install-resource,$(NODE_TYPE_SCHEMA),$(NODE_TYPE_SCHEMA_DEST)))
 $(eval $(call install-resource,$(PLATFORM_DETECT),$(PLATFORM_DETECT_DEST)))
 $(eval $(call install-resource,$(GDB_AUTOLOAD_PY),$(GDB_AUTOLOAD_PY_DEST)))
 
+submodules-init:
+	$(Q)$(PYTHON)$(SUBMODULE_SCRIPT)
+
+PHONY += submodules-init
+
 $(FLOW_OIC_GEN): $(FLOW_OIC_GEN_SCRIPT)
 	$(Q)echo "     "GEN"   "$(@)
 	$(Q)$(PYTHON) $(FLOW_OIC_GEN_SCRIPT) $(FLOW_OIC_SPEC_DIR) $(FLOW_OIC_GEN) &>/dev/null
diff --git a/tools/build/Makefile.vars b/tools/build/Makefile.vars
index cca35ee6..538685c6 100644
--- a/tools/build/Makefile.vars
+++ b/tools/build/Makefile.vars
@@ -131,6 +131,7 @@ TEMPLATE_SCRIPT := $(SCRIPTDIR)template.py
 
 # flags and comp. helpers
 HEADERDIRS := $(addprefix $(top_srcdir),src/shared src/lib/common)
+HEADERDIRS += $(addprefix $(top_srcdir),src/thirdparty/duktape/src)
 HEADERDIRS += $(addprefix $(top_srcdir),src/lib/flow src/lib/comms/)
 HEADERDIRS += $(addprefix $(top_srcdir),$(KCONFIG_INCLUDE)generated/)
 HEADERDIRS += $(build_includedir)
@@ -314,6 +315,8 @@ DOXYGEN_GENERATED = \
 	doc/doxygen/latex \
 	doc/doxygen/man
 
+SUBMODULE_SCRIPT := $(SCRIPTDIR)git-init-submodules.py
+
 ## oic flow
 FLOW_OIC_GEN := $(flow-dir)oic/oic.json $(flow-dir)oic/oic.c
 FLOW_OIC_SPEC_DIR := $(top_srcdir)data/oic