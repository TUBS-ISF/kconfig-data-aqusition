"2015-07-02 11:02:35 -0300"
diff --git a/Kconfig b/Kconfig
index f7c8f8b0..d3648e99 100644
--- a/Kconfig
+++ b/Kconfig
@@ -24,6 +24,7 @@ source "src/lib/common/Kconfig"
 source "src/lib/coap/Kconfig"
 source "src/lib/datatypes/Kconfig"
 source "src/lib/flow/Kconfig"
+source "src/lib/parsers/Kconfig"
 source "src/shared/Kconfig"
 endmenu
 
diff --git a/src/lib/parsers/Kconfig b/src/lib/parsers/Kconfig
new file mode 100644
index 00000000..03653d25
--- /dev/null
+++ b/src/lib/parsers/Kconfig
@@ -0,0 +1,3 @@
+config PARSERS
+	bool
+	default y
diff --git a/src/lib/parsers/Makefile b/src/lib/parsers/Makefile
new file mode 100644
index 00000000..0b4753f5
--- /dev/null
+++ b/src/lib/parsers/Makefile
@@ -0,0 +1,4 @@
+obj-$(PARSERS) += parsers.mod
+
+obj-parsers-$(PARSERS) := \
+    sol-json.o
diff --git a/src/shared/sol-json.h b/src/lib/parsers/include/sol-json.h
similarity index 92%
rename from src/shared/sol-json.h
rename to src/lib/parsers/include/sol-json.h
index 04d96617..8cb0b042 100644
--- a/src/shared/sol-json.h
+++ b/src/lib/parsers/include/sol-json.h
@@ -37,7 +37,11 @@
 #include <stdbool.h>
 #include <stddef.h>
 #include <string.h>
-#include "sol-macros.h"
+#include <sol-macros.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
 
 struct sol_json_scanner {
     const char *mem;
@@ -89,9 +93,9 @@ enum sol_json_loop_reason {
 static inline void
 sol_json_scanner_init(struct sol_json_scanner *scanner, const void *mem, unsigned int size)
 {
-    scanner->mem = mem;
+    scanner->mem = (const char *)mem;
     scanner->mem_end = scanner->mem + size;
-    scanner->current = mem;
+    scanner->current = (const char *)mem;
 }
 
 static inline void
@@ -129,7 +133,7 @@ sol_json_scanner_get_size_remaining(const struct sol_json_scanner *scanner)
 static inline unsigned int
 sol_json_scanner_get_mem_offset(const struct sol_json_scanner *scanner, const void *mem)
 {
-    const char *p = mem;
+    const char *p = (const char *)mem;
 
     if (p < scanner->mem || p > scanner->mem_end)
         return (unsigned int)-1;
@@ -139,10 +143,10 @@ sol_json_scanner_get_mem_offset(const struct sol_json_scanner *scanner, const vo
 static inline enum sol_json_type
 sol_json_mem_get_type(const void *mem)
 {
-    const char *p = mem;
+    const char *p = (const char *)mem;
 
     if (strchr("{}[],:tfn\"", *p))
-        return *p;
+        return (enum sol_json_type)*p;
     if (isdigit(*p) || *p == '-' || *p == '+')
         return SOL_JSON_TYPE_NUMBER;
     return SOL_JSON_TYPE_UNKNOWN;
@@ -179,6 +183,14 @@ bool sol_json_scanner_next(struct sol_json_scanner *scanner,
 SOL_ATTR_WARN_UNUSED_RESULT
     SOL_ATTR_NONNULL(1, 2);
 
+/* modifies token to be the last token to skip over the given entry.
+ * if object/array start, it will be the matching end token.
+ * otherwise it will be the given token (as there is no nesting).
+ *
+ * in every case the scanner->current position is reset to given
+ * token->end and as it iterates the scanner->position is updated to
+ * match the new token's end (sol_json_scanner_next() behavior).
+ */
 bool sol_json_scanner_skip_over(struct sol_json_scanner *scanner,
     struct sol_json_token *token)
 SOL_ATTR_WARN_UNUSED_RESULT
@@ -260,3 +272,7 @@ _sol_json_loop_helper_init(struct sol_json_scanner *scanner, struct sol_json_tok
         return SOL_JSON_LOOP_REASON_INVALID;
     return SOL_JSON_LOOP_REASON_OK;
 }
+
+#ifdef __cplusplus
+}
+#endif
diff --git a/src/shared/sol-json.c b/src/lib/parsers/sol-json.c
similarity index 95%
rename from src/shared/sol-json.c
rename to src/lib/parsers/sol-json.c
index 29aaf2bf..061b55d0 100644
--- a/src/shared/sol-json.c
+++ b/src/lib/parsers/sol-json.c
@@ -138,7 +138,7 @@ check_number(struct sol_json_scanner *scanner, struct sol_json_token *token)
     return true;
 }
 
-bool
+SOL_API bool
 sol_json_scanner_next(struct sol_json_scanner *scanner, struct sol_json_token *token)
 {
     token->start = NULL;
@@ -189,15 +189,7 @@ sol_json_scanner_next(struct sol_json_scanner *scanner, struct sol_json_token *t
     return false;
 }
 
-/* modifies token to be the last token to skip over the given entry.
- * if object/array start, it will be the matching end token.
- * otherwise it will be the given token (as there is no nesting).
- *
- * in every case the scanner->current position is reset to given
- * token->end and as it iterates the scanner->position is updated to
- * match the new token's end (sol_json_scanner_next() behavior).
- */
-bool
+SOL_API bool
 sol_json_scanner_skip_over(struct sol_json_scanner *scanner,
     struct sol_json_token *token)
 {
@@ -245,7 +237,7 @@ sol_json_scanner_skip_over(struct sol_json_scanner *scanner,
     return true;
 }
 
-bool
+SOL_API bool
 sol_json_scanner_get_dict_pair(struct sol_json_scanner *scanner,
     struct sol_json_token *key,
     struct sol_json_token *value)
diff --git a/src/shared/Makefile b/src/shared/Makefile
index 0695ef3d..3eb63375 100644
--- a/src/shared/Makefile
+++ b/src/shared/Makefile
@@ -3,7 +3,7 @@ obj-libshared-static := yes
 
 obj-libshared-$(INTERNAL_SHARED)   := sol-fbp-graph.o sol-fbp-internal-log.o
 obj-libshared-$(INTERNAL_SHARED)   += sol-fbp-internal-scanner.o sol-util.o
-obj-libshared-$(INTERNAL_SHARED)   += sol-monitors.o sol-json.o
+obj-libshared-$(INTERNAL_SHARED)   += sol-monitors.o
 obj-libshared-$(INTERNAL_SHARED)   += sol-pwm-common.o sol-gpio-common.o
 obj-libshared-$(INTERNAL_SHARED)   += sol-i2c-common.o
 
diff --git a/tools/build/Makefile.vars b/tools/build/Makefile.vars
index 3d0a611b..3c7b5c44 100644
--- a/tools/build/Makefile.vars
+++ b/tools/build/Makefile.vars
@@ -279,6 +279,11 @@ LIB_DATATYPES_HEADERS := \
 
 EXTRA_HEADERS += $(addprefix $(top_srcdir)src/lib/datatypes/include/, $(LIB_DATATYPES_HEADERS))
 
+LIB_PARSERS_HEADERS := \
+    sol-json.h
+
+EXTRA_HEADERS += $(addprefix $(top_srcdir)src/lib/parsers/include/, $(LIB_PARSERS_HEADERS))
+
 LIB_COMMON_HEADERS := \
     sol-blob.h \
     sol-log.h \