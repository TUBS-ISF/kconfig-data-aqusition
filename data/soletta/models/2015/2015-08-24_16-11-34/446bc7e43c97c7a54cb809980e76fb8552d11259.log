"2015-08-24 16:11:34 -0300"
diff --git a/src/lib/flow/Kconfig b/src/lib/flow/Kconfig
index e115e605..4e00f74d 100644
--- a/src/lib/flow/Kconfig
+++ b/src/lib/flow/Kconfig
@@ -2,11 +2,6 @@ config FLOW_SUPPORT
 	bool "Flow support"
 	default y
 
-config JAVASCRIPT
-	bool "Javascript support"
-	depends on FLOW_SUPPORT && PLATFORM_LINUX && HAVE_DUKTAPE_SRC
-	default y
-
 config NODE_DESCRIPTION
 	bool "Node description support"
 	depends on FLOW_SUPPORT && FEATURE_RUNNABLE_PROGRAMS
@@ -26,6 +21,10 @@ config INSPECTOR
 	depends on FLOW_SUPPORT && FEATURE_RUNNABLE_PROGRAMS
 	default y
 
+menu "Metatypes"
+source "src/modules/flow-metatype/js/Kconfig"
+endmenu
+
 menu "Node Types"
 	depends on FLOW_SUPPORT
 source "src/modules/flow/accelerometer/Kconfig"
diff --git a/src/lib/flow/Makefile b/src/lib/flow/Makefile
index f5be5d2f..536c8567 100644
--- a/src/lib/flow/Makefile
+++ b/src/lib/flow/Makefile
@@ -12,9 +12,6 @@ obj-flow-$(NODE_DESCRIPTION) += \
     sol-flow-resolver.o \
     sol-flow-builder.o
 
-obj-flow-$(JAVASCRIPT) += \
-	sol-flow-js.o
-
 obj-flow-$(ENABLE_DYNAMIC_MODULES) += \
     sol-flow-parser-dynamic.o
 
@@ -33,7 +30,6 @@ headers-$(FLOW_SUPPORT) := \
     include/sol-flow-builder.h \
     include/sol-flow.h \
     include/sol-flow-inspector.h \
-    include/sol-flow-js.h \
     include/sol-flow-metatype.h \
     include/sol-flow-packet.h \
     include/sol-flow-parser.h \
diff --git a/src/lib/flow/include/sol-flow-js.h b/src/lib/flow/include/sol-flow-js.h
deleted file mode 100644
index 244bf36a..00000000
--- a/src/lib/flow/include/sol-flow-js.h
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *   * Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in
- *     the documentation and/or other materials provided with the
- *     distribution.
- *   * Neither the name of Intel Corporation nor the names of its
- *     contributors may be used to endorse or promote products derived
- *     from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#pragma once
-
-#include "sol-flow.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * JS node allows the usage of Javascript language to create new and
- * customizable node types.
- *
- * A JS node type is specified with one object containing each
- * input and output port declarations (name and type) and its
- * callback functions that will be trigged on the occurrence
- * of certain events like input/output ports processes, open/close
- * processes, so forth and so on.
- */
-
-/**
- * Creates a new "JS node" type.
- *
- * The Javascript code must contain an object:
- *
- *     - 'node': This object will be used to declare input and output ports
- *               and its callback functions that will be trigged on the occurence
- *               of certain events like input/output ports processes, open/close
- *               processes, so forth and so on.
- *
- * e.g.  var node = {
- *           in: [
- *               {
- *                   name: 'IN',
- *                   type: 'int',
- *                   process: function(v) {
- *                       sendPacket("OUT", 42);
- *                   }
- *               }
- *           ],
- *           out: [ { name: 'OUT', type: 'int' } ]
- *       };
- *
- * @param buf A buffer containing the Javascript code in which will be used
- *            in this new JS node type.
- * @param len The size of the buffer.
- *
- * @return A new JS node type on success, otherwise @c NULL.
- */
-struct sol_flow_node_type *sol_flow_js_new_type(const char *buf, size_t len);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/src/lib/flow/sol-flow-parser.c b/src/lib/flow/sol-flow-parser.c
index 523ab391..45fbba22 100644
--- a/src/lib/flow/sol-flow-parser.c
+++ b/src/lib/flow/sol-flow-parser.c
@@ -44,10 +44,6 @@
 #include "sol-util.h"
 #include "sol-vector.h"
 
-#ifdef JAVASCRIPT
-#include "sol-flow-js.h"
-#endif
-
 #include "sol-flow-metatype-builtins-gen.h"
 
 #define SOL_FLOW_PARSER_CLIENT_API_CHECK(client, expected, ...)          \
@@ -509,37 +505,6 @@ create_fbp_type(
     return 0;
 }
 
-#ifdef JAVASCRIPT
-static int
-create_js_type(
-    const struct sol_flow_metatype_context *ctx,
-    struct sol_flow_node_type **type)
-{
-    const char *buf, *filename;
-    struct sol_flow_node_type *result;
-    size_t size;
-    int err;
-
-    filename = strndupa(ctx->contents.data, ctx->contents.len);
-    err = ctx->read_file(ctx, filename, &buf, &size);
-    if (err < 0)
-        return -EINVAL;
-
-    result = sol_flow_js_new_type(buf, size);
-    if (!result)
-        return -EINVAL;
-
-    err = ctx->store_type(ctx, result);
-    if (err < 0) {
-        sol_flow_node_type_del(result);
-        return -err;
-    }
-
-    *type = result;
-    return 0;
-}
-#endif
-
 static int
 metatype_read_file(
     const struct sol_flow_metatype_context *ctx,
@@ -571,12 +536,6 @@ get_create_type_func(const struct sol_str_slice name)
     if (sol_str_slice_str_eq(name, "fbp"))
         return create_fbp_type;
 
-#ifdef JAVASCRIPT
-    /* TODO: make JS a metatype module. */
-    if (sol_str_slice_str_eq(name, "js"))
-        return create_js_type;
-#endif
-
 #if (SOL_FLOW_METATYPE_BUILTINS_COUNT > 0)
     {
         const struct sol_flow_metatype *metatype, *const *itr;
diff --git a/src/modules/flow-metatype/js/Kconfig b/src/modules/flow-metatype/js/Kconfig
new file mode 100644
index 00000000..1808a71c
--- /dev/null
+++ b/src/modules/flow-metatype/js/Kconfig
@@ -0,0 +1,6 @@
+config FLOW_METATYPE_JAVASCRIPT
+	tristate "JavaScript flow metatype"
+	depends on FLOW_SUPPORT && PLATFORM_LINUX && HAVE_DUKTAPE_SRC
+	default m if MODULES=y
+	help
+	    Allow creating node types using JavaScript
diff --git a/src/modules/flow-metatype/js/Makefile b/src/modules/flow-metatype/js/Makefile
new file mode 100644
index 00000000..9643d30e
--- /dev/null
+++ b/src/modules/flow-metatype/js/Makefile
@@ -0,0 +1,20 @@
+obj-$(FLOW_METATYPE_JAVASCRIPT) += js.mod
+
+obj-js-$(FLOW_METATYPE_JAVASCRIPT) += \
+	js.o \
+	$(DUKTAPE_SRC_PATH)/duktape.o
+
+
+# TODO: Allow CFLAGS_object.o as a way to set CFLAGS only for
+# compiling a certain object, so that we can apply the extra CFLAGS
+# below only for the duktape.o file.
+
+obj-js-$(FLOW_METATYPE_JAVASCRIPT)-extra-cflags := \
+	-Wno-float-equal \
+	-Wno-format-nonliteral \
+	-Wno-suggest-attribute=noreturn
+
+ifneq (,$(NO_SANITIZE_CFLAGS))
+	obj-js-$(FLOW_METATYPE_JAVASCRIPT)-extra-cflags += $(NO_SANITIZE_CFLAGS)
+endif
+
diff --git a/src/lib/flow/sol-flow-js.c b/src/modules/flow-metatype/js/js.c
similarity index 95%
rename from src/lib/flow/sol-flow-js.c
rename to src/modules/flow-metatype/js/js.c
index 59773dbf..e1a7bd00 100644
--- a/src/lib/flow/sol-flow-js.c
+++ b/src/modules/flow-metatype/js/js.c
@@ -30,6 +30,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <errno.h>
 #include <float.h>
 #include <stdio.h>
 
@@ -40,11 +41,43 @@ SOL_LOG_INTERNAL_DECLARE_STATIC(_log_domain, "flow-metatype-js");
 #include "duktape.h"
 
 #include "sol-arena.h"
-#include "sol-flow-js.h"
+#include "sol-flow-metatype.h"
 #include "sol-log.h"
 #include "sol-str-table.h"
 #include "sol-util.h"
 
+/**
+ * JS metatype allows the usage of Javascript language to create new
+ * and customizable node types.
+ *
+ * A JS node type is specified with one object containing each input
+ * and output port declarations (name and type) and its callback
+ * functions that will be trigged on the occurrence of certain events
+ * like input/output ports processes, open/close processes, so forth
+ * and so on.
+ *
+ * The Javascript code must contain an object:
+ *
+ *     - 'node': This object will be used to declare input and output ports
+ *               and its callback functions that will be trigged on the occurence
+ *               of certain events like input/output ports processes, open/close
+ *               processes, so forth and so on.
+ *
+ * e.g.  var node = {
+ *           in: [
+ *               {
+ *                   name: 'IN',
+ *                   type: 'int',
+ *                   process: function(v) {
+ *                       sendPacket("OUT", 42);
+ *                   }
+ *               }
+ *           ],
+ *           out: [ { name: 'OUT', type: 'int' } ]
+ *       };
+ *
+ */
+
 /* Contains information specific to a type based on JS. */
 struct flow_js_type {
     struct sol_flow_node_type base;
@@ -1323,7 +1356,7 @@ flow_js_type_init(struct flow_js_type *type, const char *buf, size_t len)
     return true;
 }
 
-SOL_API struct sol_flow_node_type *
+static struct sol_flow_node_type *
 sol_flow_js_new_type(const char *buf, size_t len)
 {
     struct flow_js_type *type;
@@ -1341,3 +1374,37 @@ sol_flow_js_new_type(const char *buf, size_t len)
 
     return &type->base;
 }
+
+static int
+js_create_type(
+    const struct sol_flow_metatype_context *ctx,
+    struct sol_flow_node_type **type)
+{
+    const char *buf, *filename;
+    struct sol_flow_node_type *result;
+    size_t size;
+    int err;
+
+    filename = strndupa(ctx->contents.data, ctx->contents.len);
+    err = ctx->read_file(ctx, filename, &buf, &size);
+    if (err < 0)
+        return -EINVAL;
+
+    result = sol_flow_js_new_type(buf, size);
+    if (!result)
+        return -EINVAL;
+
+    err = ctx->store_type(ctx, result);
+    if (err < 0) {
+        sol_flow_node_type_del(result);
+        return -err;
+    }
+
+    *type = result;
+    return 0;
+}
+
+SOL_FLOW_METATYPE(JS,
+    .name = "js",
+    .create_type = js_create_type,
+    );
diff --git a/src/test/Kconfig b/src/test/Kconfig
index 34bf0b14..96555227 100644
--- a/src/test/Kconfig
+++ b/src/test/Kconfig
@@ -38,7 +38,7 @@ config TEST_FLOW_PARSER
 
 config TEST_JAVASCRIPT
 	bool "javascript"
-	depends on JAVASCRIPT
+	depends on FLOW_METATYPE_JAVASCRIPT
 	default y
 
 config TEST_MAINLOOP
diff --git a/src/test/test-javascript.c b/src/test/test-javascript.c
index d81dd02e..f214e381 100644
--- a/src/test/test-javascript.c
+++ b/src/test/test-javascript.c
@@ -33,7 +33,7 @@
 #include <errno.h>
 
 #include "sol-flow.h"
-#include "sol-flow-js.h"
+#include "sol-flow-parser.h"
 #include "sol-log.h"
 #include "sol-util.h"
 
@@ -75,14 +75,12 @@ test_js(void)
     unsigned int i;
 
     for (i = 0; i < ARRAY_SIZE(tests); i++) {
+        struct sol_flow_parser *parser;
         struct sol_flow_node_type *type;
-        size_t len = 0;
         entry = &tests[i];
 
-        if (entry->input)
-            len = strlen(entry->input);
-
-        type = sol_flow_js_new_type(entry->input, len);
+        parser = sol_flow_parser_new(NULL, NULL);
+        type = sol_flow_parse_string_metatype(parser, "js", entry->input, "buffer");
         if (type && entry->should_fail) {
             SOL_ERR("Node was created but should fail, input='%s'", entry->input);
             FAIL();
@@ -90,7 +88,7 @@ test_js(void)
             SOL_ERR("Node was created but should fail, input='%s'", entry->input);
             FAIL();
         }
-        sol_flow_node_type_del(type);
+        sol_flow_parser_del(parser);
     }
 }
 
diff --git a/src/thirdparty/Makefile b/src/thirdparty/Makefile
deleted file mode 100644
index 144cc1f3..00000000
--- a/src/thirdparty/Makefile
+++ /dev/null
@@ -1,13 +0,0 @@
-obj-$(JAVASCRIPT) := javascript.mod
-
-obj-javascript-$(JAVASCRIPT) := \
-	$(DUKTAPE_SRC_PATH)/duktape.o
-
-obj-javascript-$(JAVASCRIPT)-extra-cflags := \
-	-Wno-float-equal \
-	-Wno-format-nonliteral \
-	-Wno-suggest-attribute=noreturn
-
-ifneq (,$(NO_SANITIZE_CFLAGS))
-	obj-javascript-$(JAVASCRIPT)-extra-cflags += $(NO_SANITIZE_CFLAGS)
-endif