"2015-11-25 17:57:13 -0200"
diff --git a/Kconfig b/Kconfig
index c579583b..580517cb 100644
--- a/Kconfig
+++ b/Kconfig
@@ -168,6 +168,7 @@ depends on FEATURE_RUNNABLE_PROGRAMS
 source "src/samples/coap/Kconfig"
 source "src/samples/common/Kconfig"
 source "src/samples/crypto/Kconfig"
+source "src/samples/http/Kconfig"
 source "src/samples/mqtt/Kconfig"
 
 config FLOW_SAMPLES
diff --git a/src/samples/http/.gitignore b/src/samples/http/.gitignore
new file mode 100644
index 00000000..25fa013f
--- /dev/null
+++ b/src/samples/http/.gitignore
@@ -0,0 +1,2 @@
+download
+
diff --git a/src/samples/http/Kconfig b/src/samples/http/Kconfig
new file mode 100644
index 00000000..1586c3aa
--- /dev/null
+++ b/src/samples/http/Kconfig
@@ -0,0 +1,8 @@
+config HTTP_SAMPLES
+	bool "HTTP samples"
+	default y
+
+config DOWNLOAD_SAMPLE
+	bool "Download sample"
+	depends on COMMON_SAMPLES && HTTP_CLIENT
+	default y
diff --git a/src/samples/http/Makefile b/src/samples/http/Makefile
new file mode 100644
index 00000000..ebe50e94
--- /dev/null
+++ b/src/samples/http/Makefile
@@ -0,0 +1,3 @@
+sample-$(DOWNLOAD_SAMPLE) += download
+sample-download-$(DOWNLOAD_SAMPLE) := download.c
+
diff --git a/src/samples/http/download.c b/src/samples/http/download.c
new file mode 100644
index 00000000..a548fb52
--- /dev/null
+++ b/src/samples/http/download.c
@@ -0,0 +1,148 @@
+/*
+ * This file is part of the Soletta Project
+ *
+ * Copyright (C) 2015 Intel Corporation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <errno.h>
+#include <getopt.h>
+#include <stdio.h>
+#include <string.h>
+
+#include "sol-mainloop.h"
+#include "sol-http.h"
+#include "sol-http-client.h"
+
+static FILE *fd;
+struct sol_http_client_connection *pending;
+
+static ssize_t
+recv_func(void *userdata, const struct sol_http_client_connection *connection,
+    struct sol_buffer *buffer)
+{
+    ssize_t ret;
+
+    ret = fwrite(buffer->data, buffer->used, 1, fd);
+    if (!ret || ferror(fd)) {
+        fprintf(stderr, "ERROR: Failed to write\n");
+        return -1;
+    }
+
+    return ret * buffer->used;
+}
+
+static void
+response_func(void *userdata, const struct sol_http_client_connection *connection,
+    struct sol_http_response *response)
+{
+    fclose(fd);
+    fd = NULL;
+    pending = NULL;
+
+    if (response->response_code != SOL_HTTP_STATUS_OK) {
+        fprintf(stderr, "ERROR: Finished with error, response code: %d\n", response->response_code);
+        sol_quit_with_code(EXIT_FAILURE);
+        return;
+    }
+
+    printf("Download concluded successfully\n");
+    sol_quit_with_code(EXIT_SUCCESS);
+}
+
+static const struct sol_http_request_interface iface = {
+    SOL_SET_API_VERSION(.api_version = SOL_HTTP_REQUEST_INTERFACE_API_VERSION, )
+    .recv_cb = recv_func,
+    .response_cb = response_func
+};
+
+static void
+startup(void)
+{
+    char **argv = sol_argv();
+    char *output = NULL, *url = NULL;
+    int c, opt_idx,  argc = sol_argc();
+    static const struct option opts[] = {
+        { "output", required_argument, NULL, 'o' },
+        { "help", no_argument, NULL, 'h' },
+        { 0, 0, 0, 0 }
+    };
+
+    while ((c = getopt_long(argc, argv, "o:h", opts, &opt_idx)) != -1) {
+        switch (c) {
+        case 'o':
+            output = optarg;
+            break;
+        case 'h':
+        default:
+            fprintf(stderr,
+                "Usage:\n\t%s [-o <output_file>] <url>\n", argv[0]);
+            sol_quit_with_code(EXIT_SUCCESS);
+            return;
+        }
+    }
+
+    url = argv[optind];
+    if (!url) {
+        fprintf(stderr, "ERROR: missing url.\n");
+        sol_quit_with_code(EXIT_FAILURE);
+        return;
+    }
+
+    if (output) {
+        fd = fopen(output, "w");
+        if (fd == NULL) {
+            fprintf(stderr, "ERROR: Failed to create the file: %s\n", output);
+            sol_quit_with_code(EXIT_FAILURE);
+            return;
+        }
+    } else {
+        fd = stdout;
+    }
+
+    pending = sol_http_client_request_with_interface(SOL_HTTP_METHOD_GET,
+        url, NULL, &iface, NULL);
+    if (!pending) {
+        fprintf(stderr, "ERROR: Failed to create the request\n");
+        fclose(fd);
+        sol_quit_with_code(EXIT_FAILURE);
+        return;
+    }
+}
+
+
+static void
+shutdown(void)
+{
+    if (pending)
+        sol_http_client_connection_cancel(pending);
+    if (fd)
+        fclose(fd);
+}
+
+SOL_MAIN_DEFAULT(startup, shutdown);