"2016-06-13 14:56:51 -0300"
diff --git a/src/lib/flow/Makefile b/src/lib/flow/Makefile
index a7784d30..ea17c73f 100644
--- a/src/lib/flow/Makefile
+++ b/src/lib/flow/Makefile
@@ -3,7 +3,7 @@ obj-$(USE_FLOW) += flow.mod
 obj-flow-$(USE_FLOW) := \
     sol-flow-node-options.o \
     sol-flow-packet.o \
-    sol-flow-simplectype.o \
+    sol-flow-simple-c-type.o \
     sol-flow-single.o \
     sol-flow-static.o \
     sol-flow.o
@@ -34,7 +34,7 @@ headers-$(USE_FLOW) := \
     include/sol-flow-inspector.h \
     include/sol-flow-metatype.h \
     include/sol-flow-packet.h \
-    include/sol-flow-simplectype.h \
+    include/sol-flow-simple-c-type.h \
     include/sol-flow-single.h \
     include/sol-flow-static.h \
     sol-flow-buildopts.h.in
diff --git a/src/lib/flow/include/sol-flow-simplectype.h b/src/lib/flow/include/sol-flow-simple-c-type.h
similarity index 59%
rename from src/lib/flow/include/sol-flow-simplectype.h
rename to src/lib/flow/include/sol-flow-simple-c-type.h
index 34961a77..ae172fe7 100644
--- a/src/lib/flow/include/sol-flow-simplectype.h
+++ b/src/lib/flow/include/sol-flow-simple-c-type.h
@@ -37,21 +37,21 @@
  * and given to the node, the node private data and the event.
  *
  * Each node will have a context (private) data of size declared to
- * sol_flow_simplectype_new_full(). This is given as the last
+ * sol_flow_simple_c_type_new_full(). This is given as the last
  * argument to the callback @a func as well as can be retrieved with
  * sol_flow_node_get_private_data(). An example:
  *
  * @code
  * static int
  * mytype_func(struct sol_flow_node *node,
- *             const struct sol_flow_simplectype_event *ev,
+ *             const struct sol_flow_simple_c_type_event *ev,
  *             void *data)
  * {
  *    struct my_context *ctx = data;
- *    if (ev->type == SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_OPEN) {
+ *    if (ev->type == SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_OPEN) {
  *       ctx->my_value = initial_value;
  *       ctx->my_string = strdup("inital_string");
- *    } else if (ev->type == SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_CLOSE) {
+ *    } else if (ev->type == SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_CLOSE) {
  *       free(ctx->my_string);
  *       // do not free(ctx), it's automatically deleted
  *    } else {
@@ -66,37 +66,37 @@
 /**
  * @brief @c Simple @c C event structure.
  */
-struct sol_flow_simplectype_event {
+struct sol_flow_simple_c_type_event {
     /**
      * @brief Event type.
      *
      * @warning Use it before accessing the other members of this structure.
      */
-    enum sol_flow_simplectype_event_type {
-        SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_OPEN, /**< @brief Node is being open (instantiated) */
-        SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_CLOSE, /**< @brief Node is being closed (deleted) */
-        SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_CONNECT, /**< @brief The input port defined by @c port index and @c port_name name is being connected */
-        SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_DISCONNECT, /**< @brief The input port defined by @c port index and @c port_name name is being disconnected */
-        SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_PROCESS, /**< @brief The input port defined by @c port index and @c port_name name received an incoming @c packet */
-        SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_OUT_CONNECT,  /**< @brief The output port defined by @c port index and @c port_name name is being connected */
-        SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_OUT_DISCONNECT,  /**< @brief The output port defined by @c port index and @c port_name name is being disconnected */
+    enum sol_flow_simple_c_type_event_type {
+        SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_OPEN, /**< @brief Node is being open (instantiated) */
+        SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_CLOSE, /**< @brief Node is being closed (deleted) */
+        SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_CONNECT, /**< @brief The input port defined by @c port index and @c port_name name is being connected */
+        SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_DISCONNECT, /**< @brief The input port defined by @c port index and @c port_name name is being disconnected */
+        SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_PROCESS, /**< @brief The input port defined by @c port index and @c port_name name received an incoming @c packet */
+        SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_OUT_CONNECT,  /**< @brief The output port defined by @c port index and @c port_name name is being connected */
+        SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_OUT_DISCONNECT,  /**< @brief The output port defined by @c port index and @c port_name name is being disconnected */
     } type;
-    uint16_t port; /**< @brief If type is one of SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_* events, the reference port index */
-    uint16_t conn_id; /**< @brief If type is one of SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_* events, the reference connection identifier */
-    const char *port_name; /* @brief If type is one of SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_* events, the port name (copy of the string given to sol_flow_simplectype_new_full() */
-    const struct sol_flow_node_options *options; /* @brief If type is SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_OPEN, the given options */
-    const struct sol_flow_packet *packet; /* @brief If type is SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_PROCESS, the incoming packet */
+    uint16_t port; /**< @brief If type is one of SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_* events, the reference port index */
+    uint16_t conn_id; /**< @brief If type is one of SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_* events, the reference connection identifier */
+    const char *port_name; /* @brief If type is one of SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_* events, the port name (copy of the string given to sol_flow_simple_c_type_new_full() */
+    const struct sol_flow_node_options *options; /* @brief If type is SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_OPEN, the given options */
+    const struct sol_flow_packet *packet; /* @brief If type is SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_PROCESS, the incoming packet */
 };
 
 /**
  * @brief Input port identifier
  */
-#define SOL_FLOW_SIMPLECTYPE_PORT_TYPE_IN 1
+#define SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_IN 1
 
 /**
  * @brief Output port identifier
  */
-#define SOL_FLOW_SIMPLECTYPE_PORT_TYPE_OUT 2
+#define SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_OUT 2
 
 /**
  * @brief Helper macro to declare an input port
@@ -104,10 +104,10 @@ struct sol_flow_simplectype_event {
  * @param name Port's name
  * @param type Data type of the packets that this port should receive
  */
-#define SOL_FLOW_SIMPLECTYPE_PORT_IN(name, type) \
+#define SOL_FLOW_SIMPLE_C_TYPE_PORT_IN(name, type) \
     SOL_TYPE_CHECK(const char *, name), \
     SOL_TYPE_CHECK(const struct sol_flow_packet_type *, type), \
-    SOL_FLOW_SIMPLECTYPE_PORT_TYPE_IN
+    SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_IN
 
 /**
  * @brief Helper macro to declare an output port
@@ -115,10 +115,10 @@ struct sol_flow_simplectype_event {
  * @param name Port's name
  * @param type Data type of the packets that this port will send
  */
-#define SOL_FLOW_SIMPLECTYPE_PORT_OUT(name, type) \
+#define SOL_FLOW_SIMPLE_C_TYPE_PORT_OUT(name, type) \
     SOL_TYPE_CHECK(const char *, name), \
     SOL_TYPE_CHECK(const struct sol_flow_packet_type *, type), \
-    SOL_FLOW_SIMPLECTYPE_PORT_TYPE_OUT
+    SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_OUT
 
 /**
  * @brief Creates a flow node type using a simple C function.
@@ -129,10 +129,10 @@ struct sol_flow_simplectype_event {
  * The ports of the given type should be specified using the
  * NULL-terminated variable arguments, each port takes a triple name,
  * packet_type and direction. Name is the string and direction is
- * either #SOL_FLOW_SIMPLECTYPE_PORT_TYPE_IN or
- * #SOL_FLOW_SIMPLECTYPE_PORT_TYPE_OUT. Consider using the macros
- * #SOL_FLOW_SIMPLECTYPE_PORT_IN() and
- * #SOL_FLOW_SIMPLECTYPE_PORT_OUT() to make it clear and future-proof.
+ * either #SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_IN or
+ * #SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_OUT. Consider using the macros
+ * #SOL_FLOW_SIMPLE_C_TYPE_PORT_IN() and
+ * #SOL_FLOW_SIMPLE_C_TYPE_PORT_OUT() to make it clear and future-proof.
  *
  * @param name the type name, will be used in debug. Often this is the
  *        name of the function you're using.
@@ -153,44 +153,44 @@ struct sol_flow_simplectype_event {
  * @return newly created node type, free using its
  *         sol_flow_node_type_del().
  *
- * @see sol_flow_simplectype_new()
- * @see sol_flow_simplectype_new_nocontext()
+ * @see sol_flow_simple_c_type_new()
+ * @see sol_flow_simple_c_type_new_nocontext()
  * @see sol_flow_node_type_del()
  */
-struct sol_flow_node_type *sol_flow_simplectype_new_full(const char *name, size_t context_data_size, uint16_t options_size, int (*func)(struct sol_flow_node *node, const struct sol_flow_simplectype_event *ev, void *data), ...) SOL_ATTR_SENTINEL;
+struct sol_flow_node_type *sol_flow_simple_c_type_new_full(const char *name, size_t context_data_size, uint16_t options_size, int (*func)(struct sol_flow_node *node, const struct sol_flow_simple_c_type_event *ev, void *data), ...) SOL_ATTR_SENTINEL;
 
 /**
- * @def sol_flow_simplectype_new(context_data_type, cb, ...)
+ * @def sol_flow_simple_c_type_new(context_data_type, cb, ...)
  *
- * This macro will simplify usage of sol_flow_simplectype_new_full()
+ * This macro will simplify usage of sol_flow_simple_c_type_new_full()
  * by taking only a context data type and the callback, as well as the
  * port information. It will transform the callback (func) into the
- * name of the simplectype as well as doing the
+ * name of the simple_c_type as well as doing the
  * sizeof(context_data_type) to specify the data size.
  *
- * @see sol_flow_simplectype_new_full()
- * @see sol_flow_simplectype_new_nocontext()
+ * @see sol_flow_simple_c_type_new_full()
+ * @see sol_flow_simple_c_type_new_nocontext()
  */
-#define sol_flow_simplectype_new(context_data_type, cb, ...) sol_flow_simplectype_new_full(#cb, sizeof(context_data_type), sizeof(struct sol_flow_node_type), cb, ## __VA_ARGS__, NULL)
+#define sol_flow_simple_c_type_new(context_data_type, cb, ...) sol_flow_simple_c_type_new_full(#cb, sizeof(context_data_type), sizeof(struct sol_flow_node_type), cb, ## __VA_ARGS__, NULL)
 
 /**
- * @def sol_flow_simplectype_new_nocontext(cb, ...)
+ * @def sol_flow_simple_c_type_new_nocontext(cb, ...)
  *
- * This macro will simplify usage of sol_flow_simplectype_new_full()
+ * This macro will simplify usage of sol_flow_simple_c_type_new_full()
  * by taking only the callback as well as the port information. It
- * will transform the callback (func) into the name of the simplectype
+ * will transform the callback (func) into the name of the simple_c_type
  * and use context_data_size as 0.
  *
- * @see sol_flow_simplectype_new_full()
- * @see sol_flow_simplectype_new()
+ * @see sol_flow_simple_c_type_new_full()
+ * @see sol_flow_simple_c_type_new()
  */
-#define sol_flow_simplectype_new_nocontext(cb, ...) sol_flow_simplectype_new_full(#cb, 0, sizeof(struct sol_flow_node_type), cb, ## __VA_ARGS__, NULL)
+#define sol_flow_simple_c_type_new_nocontext(cb, ...) sol_flow_simple_c_type_new_full(#cb, 0, sizeof(struct sol_flow_node_type), cb, ## __VA_ARGS__, NULL)
 
 /**
  * @brief Helper to retrieve the output port index from its name.
  *
  * While the port index is defined by the declaration order given to
- * sol_flow_simplectype_new_full(), sometimes it is desirable to find
+ * sol_flow_simple_c_type_new_full(), sometimes it is desirable to find
  * out the index given the string.
  *
  * @note Note that this needs a lookup, so avoid doing it in hot paths.
@@ -199,13 +199,13 @@ struct sol_flow_node_type *sol_flow_simplectype_new_full(const char *name, size_
  * @param port_out_name the output port name to retrieve the index.
  * @return UINT16_MAX if not found, the index if found.
  */
-uint16_t sol_flow_simplectype_get_port_out_index(const struct sol_flow_node_type *type, const char *port_out_name);
+uint16_t sol_flow_simple_c_type_get_port_out_index(const struct sol_flow_node_type *type, const char *port_out_name);
 
 /**
  * @brief Helper to retrieve the input port index from its name.
  *
  * While the port index is defined by the declaration order given to
- * sol_flow_simplectype_new_full(), sometimes it is desirable to find
+ * sol_flow_simple_c_type_new_full(), sometimes it is desirable to find
  * in the index given the string.
  *
  * @note Note that this needs a lookup, so avoid doing it in hot paths.
@@ -214,7 +214,7 @@ uint16_t sol_flow_simplectype_get_port_out_index(const struct sol_flow_node_type
  * @param port_in_name the input port name to retrieve the index.
  * @return UINT16_MAX if not found, the index if found.
  */
-uint16_t sol_flow_simplectype_get_port_in_index(const struct sol_flow_node_type *type, const char *port_in_name);
+uint16_t sol_flow_simple_c_type_get_port_in_index(const struct sol_flow_node_type *type, const char *port_in_name);
 
 /**
  * @}
diff --git a/src/lib/flow/sol-flow-simplectype.c b/src/lib/flow/sol-flow-simple-c-type.c
similarity index 61%
rename from src/lib/flow/sol-flow-simplectype.c
rename to src/lib/flow/sol-flow-simple-c-type.c
index 015d1b81..98295cb3 100644
--- a/src/lib/flow/sol-flow-simplectype.c
+++ b/src/lib/flow/sol-flow-simple-c-type.c
@@ -21,29 +21,29 @@
 #include <stdarg.h>
 
 #include "sol-flow-internal.h"
-#include "sol-flow-simplectype.h"
+#include "sol-flow-simple-c-type.h"
 
-struct simplectype_port_in {
+struct simple_c_type_port_in {
     struct sol_flow_port_type_in base;
     char *name;
 };
 
-struct simplectype_port_out {
+struct simple_c_type_port_out {
     struct sol_flow_port_type_out base;
     char *name;
 };
 
-struct simplectype_type_data {
-    int (*func)(struct sol_flow_node *node, const struct sol_flow_simplectype_event *ev, void *data);
+struct simple_c_type_type_data {
+    int (*func)(struct sol_flow_node *node, const struct sol_flow_simple_c_type_event *ev, void *data);
     struct sol_vector ports_in, ports_out;
 };
 
 #ifdef SOL_FLOW_NODE_TYPE_DESCRIPTION_ENABLED
 static bool
-simplectype_create_description_ports_in(const struct simplectype_type_data *type_data, struct sol_flow_node_type_description *desc)
+simple_c_type_create_description_ports_in(const struct simple_c_type_type_data *type_data, struct sol_flow_node_type_description *desc)
 {
     struct sol_flow_port_description **ports_in;
-    struct simplectype_port_in *port;
+    struct simple_c_type_port_in *port;
     uint16_t idx;
 
     ports_in = calloc(type_data->ports_in.len + 1,
@@ -75,10 +75,10 @@ error_port:
 }
 
 static bool
-simplectype_create_description_ports_out(const struct simplectype_type_data *type_data, struct sol_flow_node_type_description *desc)
+simple_c_type_create_description_ports_out(const struct simple_c_type_type_data *type_data, struct sol_flow_node_type_description *desc)
 {
     struct sol_flow_port_description **ports_out;
-    struct simplectype_port_out *port;
+    struct simple_c_type_port_out *port;
     uint16_t idx;
 
     ports_out = calloc(type_data->ports_out.len + 1,
@@ -109,11 +109,11 @@ error_port:
 #endif
 
 static bool
-simplectype_create_description(struct sol_flow_node_type *type, const char *name)
+simple_c_type_create_description(struct sol_flow_node_type *type, const char *name)
 {
 #ifdef SOL_FLOW_NODE_TYPE_DESCRIPTION_ENABLED
     struct sol_flow_node_type_description *desc;
-    const struct simplectype_type_data *type_data = type->type_data;
+    const struct simple_c_type_type_data *type_data = type->type_data;
 
     type->description = desc = calloc(1, sizeof(*desc));
     SOL_NULL_CHECK(type->description, false);
@@ -123,10 +123,10 @@ simplectype_create_description(struct sol_flow_node_type *type, const char *name
     desc->name = strdup(name);
     SOL_NULL_CHECK_GOTO(desc->name, error);
 
-    if (!simplectype_create_description_ports_in(type_data, desc))
+    if (!simple_c_type_create_description_ports_in(type_data, desc))
         goto error;
 
-    if (!simplectype_create_description_ports_out(type_data, desc))
+    if (!simple_c_type_create_description_ports_out(type_data, desc))
         goto error;
 
     return true;
@@ -143,7 +143,7 @@ error:
 }
 
 static void
-simplectype_destroy_description(struct sol_flow_node_type *type)
+simple_c_type_destroy_description(struct sol_flow_node_type *type)
 {
 #ifdef SOL_FLOW_NODE_TYPE_DESCRIPTION_ENABLED
     const struct sol_flow_node_type_description *desc = type->description;
@@ -174,27 +174,27 @@ simplectype_destroy_description(struct sol_flow_node_type *type)
 }
 
 static const struct sol_flow_port_type_in *
-simplectype_get_port_in(const struct sol_flow_node_type *type, uint16_t port)
+simple_c_type_get_port_in(const struct sol_flow_node_type *type, uint16_t port)
 {
-    const struct simplectype_type_data *type_data = type->type_data;
+    const struct simple_c_type_type_data *type_data = type->type_data;
 
     return sol_vector_get(&(type_data->ports_in), port);
 }
 
 static const struct sol_flow_port_type_out *
-simplectype_get_port_out(const struct sol_flow_node_type *type, uint16_t port)
+simple_c_type_get_port_out(const struct sol_flow_node_type *type, uint16_t port)
 {
-    const struct simplectype_type_data *type_data = type->type_data;
+    const struct simple_c_type_type_data *type_data = type->type_data;
 
     return sol_vector_get(&(type_data->ports_out), port);
 }
 
 static int
-simplectype_open(struct sol_flow_node *node, void *data, const struct sol_flow_node_options *options)
+simple_c_type_open(struct sol_flow_node *node, void *data, const struct sol_flow_node_options *options)
 {
-    const struct simplectype_type_data *type_data = node->type->type_data;
-    struct sol_flow_simplectype_event ev = {
-        .type = SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_OPEN,
+    const struct simple_c_type_type_data *type_data = node->type->type_data;
+    struct sol_flow_simple_c_type_event ev = {
+        .type = SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_OPEN,
         .options = options,
     };
 
@@ -202,25 +202,25 @@ simplectype_open(struct sol_flow_node *node, void *data, const struct sol_flow_n
 }
 
 static void
-simplectype_close(struct sol_flow_node *node, void *data)
+simple_c_type_close(struct sol_flow_node *node, void *data)
 {
-    const struct simplectype_type_data *type_data = node->type->type_data;
-    struct sol_flow_simplectype_event ev = {
-        .type = SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_CLOSE,
+    const struct simple_c_type_type_data *type_data = node->type->type_data;
+    struct sol_flow_simple_c_type_event ev = {
+        .type = SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_CLOSE,
     };
 
     type_data->func(node, &ev, data);
 }
 
 static void
-simplectype_dispose(struct sol_flow_node_type *type)
+simple_c_type_dispose(struct sol_flow_node_type *type)
 {
-    struct simplectype_type_data *type_data = (void *)type->type_data;
-    struct simplectype_port_in *port_in;
-    struct simplectype_port_out *port_out;
+    struct simple_c_type_type_data *type_data = (void *)type->type_data;
+    struct simple_c_type_port_in *port_in;
+    struct simple_c_type_port_out *port_out;
     uint16_t idx;
 
-    simplectype_destroy_description(type);
+    simple_c_type_destroy_description(type);
 
     SOL_VECTOR_FOREACH_IDX (&(type_data->ports_in), port_in, idx) {
         free(port_in->name);
@@ -237,12 +237,12 @@ simplectype_dispose(struct sol_flow_node_type *type)
 }
 
 static int
-simplectype_port_in_process(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
+simple_c_type_port_in_process(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id, const struct sol_flow_packet *packet)
 {
-    const struct simplectype_type_data *type_data = node->type->type_data;
-    struct simplectype_port_in *p = sol_vector_get(&(type_data->ports_in), port);
-    struct sol_flow_simplectype_event ev = {
-        .type = SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_PROCESS,
+    const struct simple_c_type_type_data *type_data = node->type->type_data;
+    struct simple_c_type_port_in *p = sol_vector_get(&(type_data->ports_in), port);
+    struct sol_flow_simple_c_type_event ev = {
+        .type = SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_PROCESS,
         .port = port,
         .conn_id = conn_id,
         .port_name = p->name,
@@ -253,12 +253,12 @@ simplectype_port_in_process(struct sol_flow_node *node, void *data, uint16_t por
 }
 
 static int
-simplectype_port_in_connect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
+simple_c_type_port_in_connect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
 {
-    const struct simplectype_type_data *type_data = node->type->type_data;
-    struct simplectype_port_in *p = sol_vector_get(&(type_data->ports_in), port);
-    struct sol_flow_simplectype_event ev = {
-        .type = SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_CONNECT,
+    const struct simple_c_type_type_data *type_data = node->type->type_data;
+    struct simple_c_type_port_in *p = sol_vector_get(&(type_data->ports_in), port);
+    struct sol_flow_simple_c_type_event ev = {
+        .type = SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_CONNECT,
         .port = port,
         .conn_id = conn_id,
         .port_name = p->name,
@@ -268,12 +268,12 @@ simplectype_port_in_connect(struct sol_flow_node *node, void *data, uint16_t por
 }
 
 static int
-simplectype_port_in_disconnect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
+simple_c_type_port_in_disconnect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
 {
-    const struct simplectype_type_data *type_data = node->type->type_data;
-    struct simplectype_port_in *p = sol_vector_get(&(type_data->ports_in), port);
-    struct sol_flow_simplectype_event ev = {
-        .type = SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_DISCONNECT,
+    const struct simple_c_type_type_data *type_data = node->type->type_data;
+    struct simple_c_type_port_in *p = sol_vector_get(&(type_data->ports_in), port);
+    struct sol_flow_simple_c_type_event ev = {
+        .type = SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_DISCONNECT,
         .port = port,
         .conn_id = conn_id,
         .port_name = p->name,
@@ -283,12 +283,12 @@ simplectype_port_in_disconnect(struct sol_flow_node *node, void *data, uint16_t
 }
 
 static int
-simplectype_port_out_connect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
+simple_c_type_port_out_connect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
 {
-    const struct simplectype_type_data *type_data = node->type->type_data;
-    struct simplectype_port_out *p = sol_vector_get(&(type_data->ports_out), port);
-    struct sol_flow_simplectype_event ev = {
-        .type = SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_OUT_CONNECT,
+    const struct simple_c_type_type_data *type_data = node->type->type_data;
+    struct simple_c_type_port_out *p = sol_vector_get(&(type_data->ports_out), port);
+    struct sol_flow_simple_c_type_event ev = {
+        .type = SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_OUT_CONNECT,
         .port = port,
         .conn_id = conn_id,
         .port_name = p->name,
@@ -298,12 +298,12 @@ simplectype_port_out_connect(struct sol_flow_node *node, void *data, uint16_t po
 }
 
 static int
-simplectype_port_out_disconnect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
+simple_c_type_port_out_disconnect(struct sol_flow_node *node, void *data, uint16_t port, uint16_t conn_id)
 {
-    const struct simplectype_type_data *type_data = node->type->type_data;
-    struct simplectype_port_out *p = sol_vector_get(&(type_data->ports_out), port);
-    struct sol_flow_simplectype_event ev = {
-        .type = SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_OUT_DISCONNECT,
+    const struct simple_c_type_type_data *type_data = node->type->type_data;
+    struct simple_c_type_port_out *p = sol_vector_get(&(type_data->ports_out), port);
+    struct sol_flow_simple_c_type_event ev = {
+        .type = SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_OUT_DISCONNECT,
         .port = port,
         .conn_id = conn_id,
         .port_name = p->name,
@@ -313,16 +313,16 @@ simplectype_port_out_disconnect(struct sol_flow_node *node, void *data, uint16_t
 }
 
 static struct sol_flow_node_type *
-simplectype_new_full_inner(const char *name, size_t private_data_size, uint16_t options_size,
-    int (*func)(struct sol_flow_node *node, const struct sol_flow_simplectype_event *ev, void *data),
+simple_c_type_new_full_inner(const char *name, size_t private_data_size, uint16_t options_size,
+    int (*func)(struct sol_flow_node *node, const struct sol_flow_simple_c_type_event *ev, void *data),
     va_list args)
 {
-    struct sol_vector ports_in = SOL_VECTOR_INIT(struct simplectype_port_in);
-    struct sol_vector ports_out = SOL_VECTOR_INIT(struct simplectype_port_out);
+    struct sol_vector ports_in = SOL_VECTOR_INIT(struct simple_c_type_port_in);
+    struct sol_vector ports_out = SOL_VECTOR_INIT(struct simple_c_type_port_out);
     struct sol_flow_node_type *type;
-    struct simplectype_type_data *type_data;
-    struct simplectype_port_in *port_in;
-    struct simplectype_port_out *port_out;
+    struct simple_c_type_type_data *type_data;
+    struct simple_c_type_port_in *port_in;
+    struct simple_c_type_port_out *port_out;
     const char *port_name;
     uint16_t idx;
     bool ok = true;
@@ -337,7 +337,7 @@ simplectype_new_full_inner(const char *name, size_t private_data_size, uint16_t
             != SOL_FLOW_PACKET_TYPE_API_VERSION, error);
 #endif
 
-        if (direction == SOL_FLOW_SIMPLECTYPE_PORT_TYPE_IN) {
+        if (direction == SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_IN) {
             port_in = sol_vector_append(&ports_in);
             SOL_NULL_CHECK_GOTO(port_in, error);
 
@@ -346,10 +346,10 @@ simplectype_new_full_inner(const char *name, size_t private_data_size, uint16_t
 
             SOL_SET_API_VERSION(port_in->base.api_version = SOL_FLOW_PORT_TYPE_IN_API_VERSION; )
             port_in->base.packet_type = pt;
-            port_in->base.connect = simplectype_port_in_connect;
-            port_in->base.disconnect = simplectype_port_in_disconnect;
-            port_in->base.process = simplectype_port_in_process;
-        } else if (direction == SOL_FLOW_SIMPLECTYPE_PORT_TYPE_OUT) {
+            port_in->base.connect = simple_c_type_port_in_connect;
+            port_in->base.disconnect = simple_c_type_port_in_disconnect;
+            port_in->base.process = simple_c_type_port_in_process;
+        } else if (direction == SOL_FLOW_SIMPLE_C_TYPE_PORT_TYPE_OUT) {
             port_out = sol_vector_append(&ports_out);
             SOL_NULL_CHECK_GOTO(port_out, error);
 
@@ -358,8 +358,8 @@ simplectype_new_full_inner(const char *name, size_t private_data_size, uint16_t
 
             SOL_SET_API_VERSION(port_out->base.api_version = SOL_FLOW_PORT_TYPE_OUT_API_VERSION; )
             port_out->base.packet_type = pt;
-            port_out->base.connect = simplectype_port_out_connect;
-            port_out->base.disconnect = simplectype_port_out_disconnect;
+            port_out->base.connect = simple_c_type_port_out_connect;
+            port_out->base.disconnect = simple_c_type_port_out_disconnect;
         } else {
             SOL_WRN("'%s' port '%s' (type %p %s) unexpected direction %d",
                 name, port_name, pt, pt->name ? pt->name : "?", direction);
@@ -392,14 +392,14 @@ simplectype_new_full_inner(const char *name, size_t private_data_size, uint16_t
     type->ports_in_count = ports_in.len;
     type->ports_out_count = ports_out.len;
 
-    type->get_port_in = simplectype_get_port_in;
-    type->get_port_out = simplectype_get_port_out;
-    type->open = simplectype_open;
-    type->close = simplectype_close;
-    type->dispose_type = simplectype_dispose;
+    type->get_port_in = simple_c_type_get_port_in;
+    type->get_port_out = simple_c_type_get_port_out;
+    type->open = simple_c_type_open;
+    type->close = simple_c_type_close;
+    type->dispose_type = simple_c_type_dispose;
     type->options_size = options_size;
 
-    if (!simplectype_create_description(type, name))
+    if (!simple_c_type_create_description(type, name))
         goto error_desc;
 
     return type;
@@ -423,8 +423,8 @@ error:
 }
 
 SOL_API struct sol_flow_node_type *
-sol_flow_simplectype_new_full(const char *name, size_t private_data_size, uint16_t options_size,
-    int (*func)(struct sol_flow_node *node, const struct sol_flow_simplectype_event *ev,
+sol_flow_simple_c_type_new_full(const char *name, size_t private_data_size, uint16_t options_size,
+    int (*func)(struct sol_flow_node *node, const struct sol_flow_simple_c_type_event *ev,
     void *data), ...)
 {
     struct sol_flow_node_type *type;
@@ -436,17 +436,17 @@ sol_flow_simplectype_new_full(const char *name, size_t private_data_size, uint16
 #endif
 
     va_start(ap, func);
-    type = simplectype_new_full_inner(name, private_data_size, options_size, func, ap);
+    type = simple_c_type_new_full_inner(name, private_data_size, options_size, func, ap);
     va_end(ap);
 
     return type;
 }
 
 SOL_API uint16_t
-sol_flow_simplectype_get_port_out_index(const struct sol_flow_node_type *type, const char *port_out_name)
+sol_flow_simple_c_type_get_port_out_index(const struct sol_flow_node_type *type, const char *port_out_name)
 {
-    const struct simplectype_type_data *type_data;
-    struct simplectype_port_out *port;
+    const struct simple_c_type_type_data *type_data;
+    struct simple_c_type_port_out *port;
     uint16_t idx;
 
     SOL_NULL_CHECK(type, UINT16_MAX);
@@ -462,10 +462,10 @@ sol_flow_simplectype_get_port_out_index(const struct sol_flow_node_type *type, c
 }
 
 SOL_API uint16_t
-sol_flow_simplectype_get_port_in_index(const struct sol_flow_node_type *type, const char *port_in_name)
+sol_flow_simple_c_type_get_port_in_index(const struct sol_flow_node_type *type, const char *port_in_name)
 {
-    const struct simplectype_type_data *type_data;
-    struct simplectype_port_in *port;
+    const struct simple_c_type_type_data *type_data;
+    struct simple_c_type_port_in *port;
     uint16_t idx;
 
     SOL_NULL_CHECK(type, UINT16_MAX);
diff --git a/src/samples/flow/c-api/Kconfig b/src/samples/flow/c-api/Kconfig
index ebbfebef..6e5f3156 100644
--- a/src/samples/flow/c-api/Kconfig
+++ b/src/samples/flow/c-api/Kconfig
@@ -13,7 +13,7 @@ config FLOW_C_API_LOWLEVEL_SAMPLE
 	depends on USE_FLOW && FLOW_NODE_TYPE_CONSOLE
 	default y
 
-config FLOW_C_API_SIMPLECTYPE_SAMPLE
+config FLOW_C_API_SIMPLE_C_TYPE_SAMPLE
 	bool
 	depends on NODE_DESCRIPTION && FLOW_NODE_TYPE_CONSOLE && FLOW_NODE_TYPE_BOOLEAN && FLOW_NODE_TYPE_INT && FLOW_NODE_TYPE_TIMER
 	default y
diff --git a/src/samples/flow/c-api/Makefile b/src/samples/flow/c-api/Makefile
index 658ff2f4..d8083c66 100644
--- a/src/samples/flow/c-api/Makefile
+++ b/src/samples/flow/c-api/Makefile
@@ -13,8 +13,8 @@ sample-lowlevel-$(FLOW_C_API_LOWLEVEL_SAMPLE) += custom-node-types.json
 sample-lowlevel-$(FLOW_C_API_LOWLEVEL_SAMPLE)-deps := \
 	sample-custom-node-types
 
-sample-$(FLOW_C_API_SIMPLECTYPE_SAMPLE) += simplectype
-sample-simplectype-$(FLOW_C_API_SIMPLECTYPE_SAMPLE) := simplectype.c
+sample-$(FLOW_C_API_SIMPLE_C_TYPE_SAMPLE) += simple-c-type
+sample-simple-c-type-$(FLOW_C_API_SIMPLE_C_TYPE_SAMPLE) := simple-c-type.c
 
 sample-$(FLOW_C_API_FIND_TYPE_SAMPLE) += find-type
 sample-find-type-$(FLOW_C_API_FIND_TYPE_SAMPLE) := find-type.c
diff --git a/src/samples/flow/c-api/simplectype.c b/src/samples/flow/c-api/simple-c-type.c
similarity index 80%
rename from src/samples/flow/c-api/simplectype.c
rename to src/samples/flow/c-api/simple-c-type.c
index 188abc14..e7ee2153 100644
--- a/src/samples/flow/c-api/simplectype.c
+++ b/src/samples/flow/c-api/simple-c-type.c
@@ -23,17 +23,17 @@
 
 #include "soletta.h"
 #include "sol-flow-builder.h"
-#include "sol-flow-simplectype.h"
+#include "sol-flow-simple-c-type.h"
 
 /**
- * @file simplectype.c
+ * @file simple-c-type.c
  *
  * Example how to create and use a simple C node type and the
  * high-level API. To understand how to use the high-level C API with
  * existing or custom C types using the generator from JSON
  * (recommended), take a look at @ref highlevel.c
  *
- * Note that this sample's 'mytype*' uses all features of simplectype,
+ * Note that this sample's 'mytype*' uses all features of simple_c_type,
  * usually some options will not be used in most applications, such as
  * port connections and disconnection events or context. One example
  * of the simplistic version is the 'isodd' that checks if if the
@@ -52,13 +52,13 @@ static struct sol_flow_node_type *mytype;
  * boolean true if that number is odd, sending false if it's even.
  */
 static int
-isodd(struct sol_flow_node *node, const struct sol_flow_simplectype_event *ev, void *data)
+isodd(struct sol_flow_node *node, const struct sol_flow_simple_c_type_event *ev, void *data)
 {
     int32_t val;
     int r;
 
     /* we only handle events for port input. */
-    if (ev->type != SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_PROCESS)
+    if (ev->type != SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_PROCESS)
         return 0;
 
     /* get the integer value from irange and check if it worked */
@@ -71,7 +71,7 @@ isodd(struct sol_flow_node *node, const struct sol_flow_simplectype_event *ev, v
 }
 
 /*
- * mytype is an extensive example of simplectype capabilities.
+ * mytype is an extensive example of simple_c_type capabilities.
  *
  * It will take options at node open, keep context and handle all
  * events.
@@ -113,19 +113,19 @@ on_timeout(void *data)
     /* this is to demo the discovery from name, but one could/should use the
      * port index for efficiency matters.
      */
-    port_idx = sol_flow_simplectype_get_port_out_index(mytype, "STRING");
+    port_idx = sol_flow_simple_c_type_get_port_out_index(mytype, "STRING");
     sol_flow_send_string_packet(node, port_idx, buf);
 
     return true;
 }
 
 static int
-mytype_func(struct sol_flow_node *node, const struct sol_flow_simplectype_event *ev, void *data)
+mytype_func(struct sol_flow_node *node, const struct sol_flow_simple_c_type_event *ev, void *data)
 {
     struct mytype_context *ctx = data;
 
     switch (ev->type) {
-    case SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_OPEN: {
+    case SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_OPEN: {
         if (ev->options
 #ifndef SOL_NO_API_VERSION
             && ev->options->sub_api == MYTYPE_OPTIONS_SUB_API
@@ -139,16 +139,16 @@ mytype_func(struct sol_flow_node *node, const struct sol_flow_simplectype_event
         ctx->timer = sol_timeout_add(500, on_timeout, node);
         if (!ctx->timer)
             return -ENOMEM;
-        printf("simplectype opened ctx=%p, someint=%d, somebool=%d\n",
+        printf("simple_c_type opened ctx=%p, someint=%d, somebool=%d\n",
             ctx, ctx->someint, ctx->somebool);
         return 0;
     }
-    case SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_CLOSE: {
-        printf("simplectype closed ctx=%p\n", ctx);
+    case SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_CLOSE: {
+        printf("simple_c_type closed ctx=%p\n", ctx);
         sol_timeout_del(ctx->timer);
         return 0;
     }
-    case SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_PROCESS: {
+    case SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_PROCESS: {
         /* this is to show the port names, ideally one would keep the
          * indexes and use them here, doing integer comparisons
          * instead of strcmp()
@@ -156,7 +156,7 @@ mytype_func(struct sol_flow_node *node, const struct sol_flow_simplectype_event
         if (strcmp(ev->port_name, "IRANGE") == 0) {
             int32_t val;
             if (sol_flow_packet_get_irange_value(ev->packet, &val) == 0) {
-                printf("simplectype updated integer from %d to %d\n",
+                printf("simple_c_type updated integer from %d to %d\n",
                     ctx->someint, val);
                 ctx->someint = val;
                 return 0;
@@ -164,29 +164,29 @@ mytype_func(struct sol_flow_node *node, const struct sol_flow_simplectype_event
         } else if (strcmp(ev->port_name, "BOOLEAN") == 0) {
             bool val;
             if (sol_flow_packet_get_boolean(ev->packet, &val) == 0) {
-                printf("simplectype updated boolean from %d to %d\n",
+                printf("simple_c_type updated boolean from %d to %d\n",
                     ctx->somebool, val);
                 ctx->somebool = val;
                 return 0;
             }
         }
-        printf("simplectype port '%s' got unexpected data!\n", ev->port_name);
+        printf("simple_c_type port '%s' got unexpected data!\n", ev->port_name);
         return -EINVAL;
     }
-    case SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_CONNECT:
-        printf("simplectype port IN '%s' id=%d conn=%d connected ctx=%p\n",
+    case SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_CONNECT:
+        printf("simple_c_type port IN '%s' id=%d conn=%d connected ctx=%p\n",
             ev->port_name, ev->port, ev->conn_id, ctx);
         return 0;
-    case SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_IN_DISCONNECT:
-        printf("simplectype port IN '%s' id=%d conn=%d disconnected ctx=%p\n",
+    case SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_IN_DISCONNECT:
+        printf("simple_c_type port IN '%s' id=%d conn=%d disconnected ctx=%p\n",
             ev->port_name, ev->port, ev->conn_id, ctx);
         return 0;
-    case SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_OUT_CONNECT:
-        printf("simplectype port OUT '%s' id=%d conn=%d connected ctx=%p\n",
+    case SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_OUT_CONNECT:
+        printf("simple_c_type port OUT '%s' id=%d conn=%d connected ctx=%p\n",
             ev->port_name, ev->port, ev->conn_id, ctx);
         return 0;
-    case SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_PORT_OUT_DISCONNECT:
-        printf("simplectype port OUT '%s' id=%d conn=%d disconnected ctx=%p\n",
+    case SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_PORT_OUT_DISCONNECT:
+        printf("simple_c_type port OUT '%s' id=%d conn=%d disconnected ctx=%p\n",
             ev->port_name, ev->port, ev->conn_id, ctx);
         return 0;
     }
@@ -197,11 +197,11 @@ mytype_func(struct sol_flow_node *node, const struct sol_flow_simplectype_event
 static void
 startup(void)
 {
-    /* you can give your simplectype custom arguments, just give it
+    /* you can give your simple_c_type custom arguments, just give it
      * the struct and remember to fill its "base" with the API fields.
      * the 'api_version' is checked by sol-flow calls, while sub_api
      * is checked at mytype_func when handling the
-     * SOL_FLOW_SIMPLECTYPE_EVENT_TYPE_OPEN.
+     * SOL_FLOW_SIMPLE_C_TYPE_EVENT_TYPE_OPEN.
      */
     struct mytype_options mystuff_opts = {
         .base = {
@@ -220,22 +220,22 @@ startup(void)
      * input: IN (index: 0)
      * output: OUT (index: 0)
      */
-    isoddtype = sol_flow_simplectype_new_nocontext(
+    isoddtype = sol_flow_simple_c_type_new_nocontext(
         isodd,
-        SOL_FLOW_SIMPLECTYPE_PORT_IN("IN", SOL_FLOW_PACKET_TYPE_IRANGE),
-        SOL_FLOW_SIMPLECTYPE_PORT_OUT("OUT", SOL_FLOW_PACKET_TYPE_BOOLEAN),
+        SOL_FLOW_SIMPLE_C_TYPE_PORT_IN("IN", SOL_FLOW_PACKET_TYPE_IRANGE),
+        SOL_FLOW_SIMPLE_C_TYPE_PORT_OUT("OUT", SOL_FLOW_PACKET_TYPE_BOOLEAN),
         NULL);
 
     /* declare mytype with 'struct mytype_context' private data and with ports:
      * input: IRANGE (index: 0), BOOLEAN (index: 1)
      * output: STRING (index: 0, as input and output have separate arrays)
      */
-    mytype = sol_flow_simplectype_new_full(
+    mytype = sol_flow_simple_c_type_new_full(
         "mytype", sizeof(struct mytype_context), sizeof(struct mytype_options),
         mytype_func,
-        SOL_FLOW_SIMPLECTYPE_PORT_IN("IRANGE", SOL_FLOW_PACKET_TYPE_IRANGE),
-        SOL_FLOW_SIMPLECTYPE_PORT_IN("BOOLEAN", SOL_FLOW_PACKET_TYPE_BOOLEAN),
-        SOL_FLOW_SIMPLECTYPE_PORT_OUT("STRING", SOL_FLOW_PACKET_TYPE_STRING),
+        SOL_FLOW_SIMPLE_C_TYPE_PORT_IN("IRANGE", SOL_FLOW_PACKET_TYPE_IRANGE),
+        SOL_FLOW_SIMPLE_C_TYPE_PORT_IN("BOOLEAN", SOL_FLOW_PACKET_TYPE_BOOLEAN),
+        SOL_FLOW_SIMPLE_C_TYPE_PORT_OUT("STRING", SOL_FLOW_PACKET_TYPE_STRING),
         NULL);
 
     /* for types declared as builtin or external modules, add by type name */
@@ -294,7 +294,7 @@ startup(void)
     flow_node_type = sol_flow_builder_get_node_type(builder);
 
     /* create and run the flow */
-    flow = sol_flow_node_new(NULL, "simplectype", flow_node_type, NULL);
+    flow = sol_flow_node_new(NULL, "simple_c_type", flow_node_type, NULL);
 }
 
 static void
diff --git a/src/test-cpp/headers.cc.in b/src/test-cpp/headers.cc.in
index d6eba603..3e8df9cc 100644
--- a/src/test-cpp/headers.cc.in
+++ b/src/test-cpp/headers.cc.in
@@ -159,8 +159,8 @@ startup()
     struct sol_flow_static_conn_spec conn_spec = SOL_FLOW_STATIC_CONN_SPEC_GUARD;
     struct sol_flow_static_port_spec port_sec = SOL_FLOW_STATIC_PORT_SPEC_GUARD;
 
-    SOL_FLOW_SIMPLECTYPE_PORT_IN("in", NULL);
-    SOL_FLOW_SIMPLECTYPE_PORT_OUT("out", NULL);
+    SOL_FLOW_SIMPLE_C_TYPE_PORT_IN("in", NULL);
+    SOL_FLOW_SIMPLE_C_TYPE_PORT_OUT("out", NULL);
 #endif
 
 #ifdef OIC