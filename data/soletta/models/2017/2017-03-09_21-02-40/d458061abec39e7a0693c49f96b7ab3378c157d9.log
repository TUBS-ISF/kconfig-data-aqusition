"2017-03-09 21:02:40 -0800"
diff --git a/.gitignore b/.gitignore
index cf2f7143..a0752667 100644
--- a/.gitignore
+++ b/.gitignore
@@ -21,13 +21,7 @@ Kconfig.gen
 /build/
 /include/
 config.log*
-/node_modules/
-/bindings/nodejs/generated/main.cc
-/bindings/nodejs/generated/main.h
 aio.js
-bindings/nodejs/generated/header-files-list
-bindings/nodejs/generated/nodejs-bindings-sources.gyp
-bindings/nodejs/tests/results.json
 gpio.js
 pwm.js
 spi.js
diff --git a/Kconfig b/Kconfig
index 0c4eba1b..fc047272 100644
--- a/Kconfig
+++ b/Kconfig
@@ -253,12 +253,3 @@ menu "Test suite"
 depends on FEATURE_RUNNABLE_PROGRAMS
 source "src/test/Kconfig"
 endmenu
-
-menu "Bindings"
-config USE_NODEJS
-	bool "Node.js bindings"
-	depends on HAVE_NODEJS && HAVE_NODEJS_NPM && HAVE_NODE_GYP
-	default n
-	help
-		Enable Node.js bindings
-endmenu
diff --git a/README.md b/README.md
index e8b41939..0fb13937 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,6 @@ targets.
   * [Linux-micro](#linux-micro-kconfig-core-library---target-platform---linux-micro)
  * [Flow Based Programming](#flow-based-programming)
  * [Language Bindings](#language-bindings)
-  * [Node.js](#nodejs)
  * [Supported OSes](#supported-oses)
  * [Contributing](#contributing)
 
@@ -524,17 +523,6 @@ On top of Soletta's C API there are a few higher level language bindings.
 For each of these bindings, only a subset of Soletta libraries is exposed,
 only libraries that aren't commonly provided for such languages.
 
-#### Node.js
-
-[Node.js](https://nodejs.org) is a JavaScript runtime built
-on Chrome's V8 JavaScript engine.
-It uses an event-driven, non-blocking I/O model that makes it lightweight
-and efficient.
-
-It's vastly used on server-side Web applications.
-
-Check Soletta's [JavaScript API specification](https://github.com/solettaproject/soletta/blob/master/doc/js-spec/README.md)
-
 ## Supported OSes
 
 Soletta works on top of many different operating systems and features
diff --git a/binding.gyp b/binding.gyp
deleted file mode 100644
index 7722a6fa..00000000
--- a/binding.gyp
+++ /dev/null
@@ -1,73 +0,0 @@
-{
-	"variables": {
-		"BUILD_SOLETTA": '<!(test "x${SOLETTA_CFLAGS}x" = "xx" -o "x${SOLETTA_LIBS}x" = "xx" && echo "true" || echo "false")',
-	},
-	"conditions": [
-		[ "'<(BUILD_SOLETTA)'=='true'", {
-			"targets": [
-				{
-					"target_name": "csdk",
-					"type": "none",
-					"actions": [ {
-						"action_name": "build-csdk",
-						"message": "Building C SDK",
-						"outputs": [ "build/soletta_sysroot" ],
-						"inputs": [ "" ],
-						"action": [ "sh", "bindings/nodejs/build-for-npm.sh" ]
-					} ]
-				}
-			]
-		}, {
-			"targets": [
-				{
-					"target_name": "collectbindings",
-					"type": "none",
-					"actions": [ {
-						"action_name": "collectbindings",
-						"message": "Collecting bindings",
-						"outputs": [ "bindings/nodejs/generated/main.cc" ],
-						"inputs": [
-							"bindings/nodejs/generated/main.cc.prologue",
-							"bindings/nodejs/generated/main.cc.epilogue",
-						],
-						"action": [
-							"sh",
-							"-c",
-							'./bindings/nodejs/generate-main.sh'
-						]
-					} ]
-				},
-				{
-					"target_name": "copyapis",
-					"type": "none",
-					"actions": [ {
-						"action_name": "copyapis",
-						"message": "Copying JS APIs",
-						"inputs": [ "./bindings/nodejs/lib" ],
-						"outputs": [ "" ],
-						"action": [
-							"sh",
-							"-c",
-							"cp -a ./bindings/nodejs/lib/* ."
-						]
-					} ]
-				},
-				{
-					"target_name": "soletta",
-					"includes": [
-						"bindings/nodejs/generated/nodejs-bindings-sources.gyp"
-					],
-					"include_dirs": [
-						"<!(node -e \"require('nan')\")"
-					],
-					"cflags": [ '<!@(echo "${SOLETTA_CFLAGS}")' ],
-					"xcode_settings": {
-						"OTHER_CFLAGS": [ '<!@(echo "${SOLETTA_CFLAGS}")' ]
-					},
-					"libraries": [ '<!@(echo "${SOLETTA_LIBS}")' ],
-					"dependencies": [ "collectbindings", "copyapis" ]
-				}
-			]
-		} ]
-	]
-}
diff --git a/bindings/nodejs/build-for-npm.sh b/bindings/nodejs/build-for-npm.sh
deleted file mode 100644
index 661c87c9..00000000
--- a/bindings/nodejs/build-for-npm.sh
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/bin/sh
-
-# This file is part of the Soletta (TM) Project
-#
-# Copyright (C) 2015 Intel Corporation. All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# This script covers the use case where the user installs soletta via npm. The
-# actual build happens via Soletta's own build system, but before we fire it up
-# we configure it to make sure the node.js bindings get built and we handle the
-# case where npm wants a debug build by turning on Soletta's own debug build.
-
-if test "x${V}x" != "xx"; then
-	set -x
-fi
-
-# Node.js seems to poison these
-unset PYTHON || exit 1
-unset PYTHON_PATH || exit 1
-
-# Configure with defaults
-make alldefconfig || exit 1
-
-# Turn on node.js bindings and build with RPATH
-sed -i .config -r -e 's/(# )?USE_NODEJS.*$/USE_NODEJS=y/'
-export RPATH="y"
-
-if test "x${npm_config_debug}x" = "xtruex"; then
-
-	# If debug is on, turn off release build and optimization, and turn on debug build and symbols
-	sed -i .config -r -e 's/(# )?BUILD_TYPE_DEBUG.*$/BUILD_TYPE_DEBUG=y/'
-	sed -i .config -r -e 's/(# )?BUILD_TYPE_RELEASE.*$/# BUILD_TYPE_RELEASE is not set/'
-fi
-
-# Finally, we fire up the build
-make || exit 1
diff --git a/bindings/nodejs/configure-bindings.js b/bindings/nodejs/configure-bindings.js
deleted file mode 100644
index 7eaa5029..00000000
--- a/bindings/nodejs/configure-bindings.js
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var fs = require( "fs" ),
-	path = require( "path" );
-
-// List containing the names of source files for the bindings we wish to include.
-// Paths are relative to the location of nodejs-bindings-sources.gyp (generated below).
-var sources = [
-	"main.cc",
-	"../src/data.cc",
-	"../src/functions/sol-platform-monitors.cc",
-	"../src/functions/simple.cc",
-	"../src/hijack.cc",
-	"../src/sol-uv-integration.c",
-	"../src/structures/js-handle.cc",
-	"../src/sys-constants.cc"
-];
-
-// List containing the names of the header files in which to search for constants and enums
-var headers = [
-	"sol-platform.h"
-];
-
-var oneVariable, match;
-for ( oneVariable in process.env ) {
-
-	// If it's an environment variable starting with SOL_CONFIG_ then examine its value
-	match = oneVariable.match( /^SOL_CONFIG_(.*)$/ ) ? process.env[ oneVariable ] : null;
-
-	// If the value is "y" then add files based on the name of the variable, removing the prefix
-	match = match && ( match === "y" ) ? oneVariable.replace( /^SOL_CONFIG_/, "" ) : null;
-
-	switch( match ) {
-		case "OIC":
-            /* FIXME: uncomment when the bindings get up-to-date with
-             * the API again --
-
-			sources = sources.concat( [
-				"../src/functions/oic-client-common.cc",
-				"../src/functions/oic-client-discovery.cc",
-				"../src/functions/oic-client-resource-ops.cc",
-				"../src/functions/oic-server.cc",
-				"../src/structures/device-id.cc",
-				"../src/structures/oic-client.cc",
-				"../src/structures/oic-map.cc"
-			] );
-			headers = headers.concat( [
-				"sol-oic-client.h",
-				"sol-oic.h"
-			] );
-
-            */
-			break;
-		case "NETWORK":
-			sources = sources.concat( [
-				"../src/functions/sol-network.cc",
-				"../src/structures/network.cc"
-			] );
-			headers = headers.concat( [
-				"sol-coap.h",
-				"sol-network.h"
-			] );
-			break;
-		case "USE_GPIO":
-			sources = sources.concat( [
-				"../src/functions/gpio.cc",
-				"../src/structures/sol-js-gpio.cc"
-			] );
-			headers = headers.concat( [
-				"sol-gpio.h"
-			] );
-			break;
-		case "USE_AIO":
-			sources = sources.concat( [
-				"../src/functions/aio.cc",
-			] );
-			headers = headers.concat( [
-				"sol-aio.h"
-			] );
-			break;
-		case "USE_UART":
-			sources = sources.concat( [
-				"../src/functions/uart.cc",
-				"../src/structures/sol-js-uart.cc"
-			] );
-			headers = headers.concat( [
-				"sol-uart.h"
-			] );
-			break;
-		case "USE_PWM":
-			sources = sources.concat( [
-				"../src/functions/pwm.cc",
-				"../src/structures/sol-js-pwm.cc"
-			] );
-			headers = headers.concat( [
-				"sol-pwm.h"
-			] );
-			break;
-		case "USE_SPI":
-			sources = sources.concat( [
-				"../src/functions/spi.cc",
-				"../src/structures/sol-js-spi.cc"
-			] );
-			headers = headers.concat( [
-				"sol-spi.h"
-			] );
-			break;
-		case "USE_I2C":
-			sources = sources.concat( [
-				"../src/functions/i2c.cc"
-			] );
-			headers = headers.concat( [
-				"sol-i2c.h"
-			] );
-			break;
-		default:
-			break;
-	}
-}
-
-fs.writeFileSync( path.join( __dirname, "generated", "header-files-list" ), headers.join( "\n" ) );
-
-fs.writeFileSync( path.join( __dirname, "generated", "nodejs-bindings-sources.gyp" ),
-	JSON.stringify( { sources: sources } ) );
diff --git a/bindings/nodejs/generate-main.awk b/bindings/nodejs/generate-main.awk
deleted file mode 100644
index 9db651bb..00000000
--- a/bindings/nodejs/generate-main.awk
+++ /dev/null
@@ -1,91 +0,0 @@
-# This file is part of the Soletta Project
-#
-# Copyright (C) 2016 Intel Corporation. All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-#
-#   * Redistributions of source code must retain the above copyright
-#     notice, this list of conditions and the following disclaimer.
-#   * Redistributions in binary form must reproduce the above copyright
-#     notice, this list of conditions and the following disclaimer in
-#     the documentation and/or other materials provided with the
-#     distribution.
-#   * Neither the name of Intel Corporation nor the names of its
-#     contributors may be used to endorse or promote products derived
-#     from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-# Not using \s in this script because mawk, which runs on semaphore, doesn't understand it.
-# Using [ 	] instead (that's a class consisting of a space and a tab character)
-
-BEGIN {
-	enum_values[0] = 0;
-	delete enum_values[0];
-	enum_name = "";
-	inside_enum = 0;
-	new_enum = 0;
-	last_line_was_blank=0;
-}
-/^#define/ {
-	if ( NF > 2 && $2 ~ /^[A-Za-z_][_A-Za-z0-9]*$/ ) {
-		print "  SET_CONSTANT_" ( ( substr($3, 1, 1) == "\"" ) ? "STRING": "NUMBER" ) "(target, " $2 ");" >> "bindings/nodejs/generated/main.cc"
-		last_line_was_blank = 0;
-	}
-}
-/^(typedef[ 	]+)?enum[ 	]+[^{]*{$/ {
-	enum_name = ( $2 == "enum" ) ? $3 : $2;
-	gsub(/{/, "", enum_name);
-	inside_enum = 1;
-	new_enum = 1;
-}
-/[ 	]*}[ 	]*([^ 	]*)?[ 	]*;[ 	]*$/ {
-	if ( inside_enum == 1 ) {
-		if ( enum_name == "" ) {
-			enum_name = $0;
-			gsub(/([ 	]|[};])/, "", enum_name);
-		}
-		if ( enum_name != "" ) {
-			if ( last_line_was_blank == 0 ) {
-				print "" >> "bindings/nodejs/generated/main.cc"
-			}
-			print "  Local<Object> bind_" enum_name " = Nan::New<Object>();" >> "bindings/nodejs/generated/main.cc"
-			for ( enum_value in enum_values ) {
-				print "  SET_CONSTANT_NUMBER(bind_" enum_name ", " enum_value ");" >> "bindings/nodejs/generated/main.cc"
-			}
-			for ( enum_value in enum_values ) {
-				delete enum_values[ enum_value ];
-			}
-			print "  SET_CONSTANT_OBJECT(target, " enum_name ");" >> "bindings/nodejs/generated/main.cc"
-			print "" >> "bindings/nodejs/generated/main.cc"
-			last_line_was_blank = 1;
-		}
-		enum_name = "";
-		inside_enum = 0;
-	}
-}
-{
-	if ( new_enum == 1 ) {
-		new_enum = 0;
-	}
-	else
-	if ( inside_enum == 1 ) {
-		enum_member = $1;
-		gsub( /,/, "", enum_member );
-		if ( enum_member ~ /[A-Za-z][A-Za-z0-9]*/ ) {
-			enum_values[ enum_member ] = 0;
-		}
-	}
-}
diff --git a/bindings/nodejs/generate-main.sh b/bindings/nodejs/generate-main.sh
deleted file mode 100755
index eaa2cf09..00000000
--- a/bindings/nodejs/generate-main.sh
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/bin/sh
-
-# This file is part of the Soletta (TM) Project
-#
-# Copyright (C) 2015 Intel Corporation. All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-if test "x${V}x" != "xx"; then
-	set -x
-fi
-
-SOLETTA_SEARCH_PATHS=$(node -p '
-	( "'"$(echo "${SOLETTA_CFLAGS}" | sed 's/"/\\"/g')"'"
-		.match( /-I\s*\S+/g ) || [] )
-		.map( function( item ) {
-			return item.replace( /-I\s*/, "" );
-		} )
-		.join( " " );
-')
-
-cat bindings/nodejs/generated/main.cc.prologue > bindings/nodejs/generated/main.cc || exit 1
-cat bindings/nodejs/generated/main.h.prologue > bindings/nodejs/generated/main.h || exit 1
-
-# Add constants and enums from selected files
-HEADER_FILES_TO_EXAMINE="$(cat bindings/nodejs/generated/header-files-list)"
-
-for file in ${HEADER_FILES_TO_EXAMINE}; do
-	if test "x${file}x" = "xx"; then
-		continue
-	fi
-	echo "#include <$file>" >> bindings/nodejs/generated/main.h
-	for path in $SOLETTA_SEARCH_PATHS; do
-		if test -f $path/$file; then
-			cat $path/$file | awk -f bindings/nodejs/generate-main.awk
-		fi
-	done
-done
-
-echo "" >> "bindings/nodejs/generated/main.h"
-
-# Add all the bound functions
-node -e '
-	JSON.parse( require( "fs" )
-		.readFileSync( "bindings/nodejs/generated/nodejs-bindings-sources.gyp" ) )
-			.sources.forEach( function( oneFile ) {
-		console.log( oneFile );
-	} );
-' | while read filename; do
-	cat "bindings/nodejs/generated/${filename}" | grep '^NAN_METHOD' | while read method; do
-		echo "${method}" | sed 's/).*$/);/' >> bindings/nodejs/generated/main.h
-		echo "${method}" | sed -r 's/^\s*NAN_METHOD\s*\(\s*bind_([^)]*).*$/  SET_FUNCTION(target, \1);/' >> bindings/nodejs/generated/main.cc
-	done
-done
-
-cat bindings/nodejs/generated/main.cc.epilogue >> bindings/nodejs/generated/main.cc || exit 1
-cat bindings/nodejs/generated/main.h.epilogue >> bindings/nodejs/generated/main.h || exit 1
diff --git a/bindings/nodejs/generated/main.cc.epilogue b/bindings/nodejs/generated/main.cc.epilogue
deleted file mode 100644
index 361e71d6..00000000
--- a/bindings/nodejs/generated/main.cc.epilogue
+++ /dev/null
@@ -1,3 +0,0 @@
-}
-
-NODE_MODULE(soletta, Init)
diff --git a/bindings/nodejs/generated/main.cc.prologue b/bindings/nodejs/generated/main.cc.prologue
deleted file mode 100644
index ae12fcda..00000000
--- a/bindings/nodejs/generated/main.cc.prologue
+++ /dev/null
@@ -1,14 +0,0 @@
-#include <v8.h>
-#include <node.h>
-#include <nan.h>
-#include <sol-mainloop.h>
-
-using namespace v8;
-
-#include "main.h"
-#include "../src/common.h"
-
-NAN_MODULE_INIT(Init) {
-  sol_init();
-
-  // Constant and enum declarations generated by parsing header files appear below
diff --git a/bindings/nodejs/generated/main.h.epilogue b/bindings/nodejs/generated/main.h.epilogue
deleted file mode 100644
index 944478cb..00000000
--- a/bindings/nodejs/generated/main.h.epilogue
+++ /dev/null
@@ -1,2 +0,0 @@
-
-#endif /* ndef __SOLETTA_JS_MAIN_H__ */
diff --git a/bindings/nodejs/generated/main.h.prologue b/bindings/nodejs/generated/main.h.prologue
deleted file mode 100644
index 2f4ffa8f..00000000
--- a/bindings/nodejs/generated/main.h.prologue
+++ /dev/null
@@ -1,7 +0,0 @@
-#ifndef __SOLETTA_JS_MAIN_H__
-#define __SOLETTA_JS_MAIN_H__
-
-#include <v8.h>
-#include <node.h>
-#include <nan.h>
-
diff --git a/bindings/nodejs/lib/aio.js b/bindings/nodejs/lib/aio.js
deleted file mode 100644
index f7d24415..00000000
--- a/bindings/nodejs/lib/aio.js
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( './lowlevel'),
-	_ = require( 'lodash' );
-
-
-exports.open = function( init ) {
-	return new Promise( function( fulfill, reject ) {
-		var precision = 12;
-		var aio;
-
-		if (init.precision)
-			precision = init.precision;
-
-		if ( typeof init.name === "string" && init.name !== "" ) {
-			aio = soletta.sol_aio_open_by_label( init.name, precision );
-		} else if (init.raw) {
-			aio = soletta.sol_aio_open_raw( init.device, init.pin, precision );
-		} else {
-			aio = soletta.sol_aio_open( init.device, init.pin, precision );
-		}
-
-		if ( aio ) {
-			fulfill( AIOPin( aio ) );
-		} else {
-			reject( new Error( "Could not open AIO device" ) );
-		}
-	});
-
-}
-
-var AIOPin = function( pin ) {
-	if ( !this._isAIOPin )
-		return new AIOPin( pin );
-	this._pin = pin;
-}
-
-_.extend( AIOPin.prototype, {
-	_isAIOPin: true,
-	_pending: null,
-
-	read: function() {
-		return new Promise( _.bind( function( fulfill, reject ) {
-			this._pending = soletta.sol_aio_get_value( this._pin,
-			    _.bind( function( value ) {
-			        this._pending = null;
-			        fulfill( value );
-			    }, this ) );
-
-			if (!this._pending)
-				reject( new Error( "Failed to read the value from AIO device" ) );
-		}, this ) );
-	},
-
-	close: function() {
-		soletta.sol_aio_close( this._pin);
-		this._pending = null;
-	},
-
-	abort: function() {
-		if ( !this._pending )
-		    return;
-		soletta.sol_aio_pending_cancel( this._pin, this._pending );
-		this._pending = null;
-	}
-});
-
-exports.AIOPin = AIOPin;
diff --git a/bindings/nodejs/lib/gpio.js b/bindings/nodejs/lib/gpio.js
deleted file mode 100644
index 534b091f..00000000
--- a/bindings/nodejs/lib/gpio.js
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( './lowlevel'),
-    _ = require( 'lodash' );
-
-exports.open = function( init ) {
-    return new Promise( function( fulfill, reject ) {
-        var dir = 0;
-        var drive_mode = 0;
-        var config = null;
-        var gpiopin;
-        var callback_data = [];
-        var direction = init.direction ? init.direction : "out";
-        var edge = init.edge ? init.edge : "any";
-        var pull = init.pull ? init.pull : "none";
-        var active_low = init.activeLow ? init.activeLow : false;
-        var poll = init.poll ? init.poll : 0;
-        var gpio;
-
-        if ( direction == "in" ) {
-            config = {
-                dir: soletta.sol_gpio_direction_from_str( direction ),
-                active_low: active_low,
-                poll_timeout: poll,
-                drive_mode: soletta.sol_gpio_drive_from_str( pull ),
-                trigger_mode: soletta.sol_gpio_edge_from_str( edge ),
-                callback: function( value ) {
-                    callback_data[0].dispatchEvent( "change", {
-                        type: "change",
-                        value: value
-                    } );
-                },
-            }
-
-        } else {
-            config = {
-                dir: soletta.sol_gpio_direction_from_str( direction ),
-                active_low: active_low,
-                drive_mode: soletta.sol_gpio_drive_from_str( pull ),
-            }
-        }
-
-        if ( init.raw ) {
-            gpio = soletta.sol_gpio_open_raw( init.pin, config );
-        } else if ( typeof init.name === 'string' && init.name !== "" ) {
-            gpio = soletta.sol_gpio_open_by_label( init.name, config );
-        } else {
-            gpio = soletta.sol_gpio_open( init.pin, config );
-        }
-
-        if ( gpio ) {
-            gpiopin = GPIOPin( gpio );
-            callback_data.push( gpiopin );
-            fulfill( gpiopin );
-        } else {
-            reject( new Error( "Could not open GPIO device" ) );
-        }
-    });
-
-}
-
-var GPIOPin = function( pin ) {
-    if ( !this._isGPIOPin )
-        return new GPIOPin( pin );
-    this._pin = pin;
-}
-
-require( "util" ).inherits( GPIOPin, require( "events" ).EventEmitter );
-
-_.extend( GPIOPin.prototype, {
-    _isGPIOPin: true,
-    onchange: null,
-
-    read: function() {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            var returnValue = soletta.sol_gpio_read( this._pin );
-            if ( returnValue >= 0 )
-                fulfill(returnValue);
-            else
-                reject( new Error( "Failed to read the value from GPIO device" ) );
-        }, this ) );
-    },
-
-    write: function( value ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            var returnValue = soletta.sol_gpio_write( this._pin, value );
-            if ( returnValue )
-                fulfill();
-            else
-                reject( new Error( "Failed to write on GPIO device" ) );
-        }, this ) );
-    },
-
-    close: function() {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            fulfill( soletta.sol_gpio_close( this._pin) );
-        }, this ) );
-    },
-
-    addEventListener: GPIOPin.prototype.addListener,
-
-    removeEventListener: GPIOPin.prototype.removeListener,
-
-    dispatchEvent: function( event, request ) {
-        this.emit( event, request );
-        if ( typeof this[ "on" + event ] === "function" ) {
-            this[ "on" + event ]( request );
-        }
-    },
-
-});
-
-exports.GPIOPin = GPIOPin;
diff --git a/bindings/nodejs/lib/i2c.js b/bindings/nodejs/lib/i2c.js
deleted file mode 100644
index 53fb0cdf..00000000
--- a/bindings/nodejs/lib/i2c.js
+++ /dev/null
@@ -1,149 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( './lowlevel'),
-    _ = require( 'lodash' );
-
-exports.open = function( init ) {
-    return new Promise( function( fulfill, reject ) {
-        var bus = init.bus;
-        var spd = soletta.sol_i2c_speed_from_str(init.speed);
-        var i2cbus = null;
-
-        if (init.raw) {
-            i2cbus = I2CBus( soletta.sol_i2c_open_raw( bus, spd ) );
-        } else {
-            i2cbus = I2CBus( soletta.sol_i2c_open( bus, spd ) );
-        }
-
-        //copy the properties
-        _.extend(i2cbus, init);
-
-        fulfill( i2cbus );
-    });
-
-}
-
-var I2CBus = function( i2cbus ) {
-    if ( !this._isI2CBus )
-        return new I2CBus ( i2cbus );
-    this._construct();
-    this._i2cbus = i2cbus;
-}
-
-_.extend( I2CBus.prototype, {
-    _isI2CBus: true,
-    _pending: null,
-    _construct: function() {
-        Object.defineProperty(this, 'busy', {
-            get: function() {
-                return this._pending === "EBUSY";
-            }
-        } );
-    },
-
-    read: function( device, size, register, repetitions ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            if (!repetitions)
-                repetitions = 1;
-
-            soletta.sol_i2c_set_slave_address( this._i2cbus, device );
-            if (register == null) {
-                this._pending = soletta.sol_i2c_read( this._i2cbus,
-                    size, _.bind( function( data, status ) {
-                    this._pending = null;
-                    fulfill( data );
-                }, this ) );
-            } else if (repetitions > 1) {
-                this._pending = soletta.sol_i2c_read_register_multiple(
-                    this._i2cbus, register, size, repetitions,
-                    _.bind( function( register, data, status ) {
-                    this._pending = null;
-                    fulfill( data );
-                }, this ) );
-            } else {
-                this._pending = soletta.sol_i2c_read_register(
-                    this._i2cbus, register, size,
-                    _.bind( function( register, data, status ) {
-                    this._pending = null;
-                    fulfill( data );
-                }, this ) );
-            }
-            if ( !this._pending || typeof this._pending === "string" ) {
-                reject( new Error( "I2C read failed with errno: " + this._pending ) );
-            }
-        }, this ) );
-    },
-
-    write: function( device, data, register ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            soletta.sol_i2c_set_slave_address( this._i2cbus, device );
-            var buf;
-
-            if (Buffer.isBuffer( data ))
-                buf = data;
-            else
-                buf = new Buffer(data);
-
-            if (!register) {
-                this._pending = soletta.sol_i2c_write( this._i2cbus,
-                    buf, _.bind( function( data, status ) {
-                    this._pending = null;
-                    fulfill();
-                }, this ) );
-            } else {
-                this._pending = soletta.sol_i2c_write_register(
-                    this._i2cbus, register, buf,
-                    _.bind( function( register, data, status ) {
-                    this._pending = null;
-                    fulfill();
-                }, this ) );
-            }
-            if ( !this._pending || typeof this._pending === "string" ) {
-                reject( new Error( "I2C write failed with errno: " + this._pending ) );
-            }
-        }, this ) );
-    },
-
-    writeBit: function( device, data ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            soletta.sol_i2c_set_slave_address( this._i2cbus, device );
-            this._pending = soletta.sol_i2c_write_quick(
-                this._i2cbus, data, _.bind( function( status ) {
-                this._pending = null;
-                fulfill();
-            }, this ) );
-            if ( !this._pending || typeof this._pending === "string" ) {
-                reject( new Error( "I2C writeBit failed with errno: " + this._pending ) );
-            }
-        }, this ) );
-    },
-
-    close: function() {
-        soletta.sol_i2c_close( this._i2cbus );
-    },
-
-    abort: function() {
-        if ( !this._pending )
-            return;
-        soletta.sol_i2c_pending_cancel( this._i2cbus, this._pending );
-        this._pending = null;
-    }
-});
-
-exports.I2CBus = I2CBus;
diff --git a/bindings/nodejs/lib/pwm.js b/bindings/nodejs/lib/pwm.js
deleted file mode 100644
index 3a96aeba..00000000
--- a/bindings/nodejs/lib/pwm.js
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( './lowlevel'),
-    _ = require( 'lodash' );
-
-exports.open = function( init ) {
-    return new Promise( function( fulfill, reject ) {
-        var config = null;
-        var raw = ( typeof init.raw === 'undefined' ) ? false : init.raw;
-        var enabled = ( typeof init.enabled === 'undefined' ) ? false : init.enabled;
-        var alignment = init.alignment ? init.alignment : "left";
-        var polarity = init.polarity ? init.polarity : "normal";
-        var pwm;
-
-        config = {
-            period_ns: init.period,
-            duty_cycle_ns: init.dutyCycle,
-            alignment: soletta.sol_pwm_alignment_from_str( alignment ),
-            polarity: soletta.sol_pwm_polarity_from_str( polarity ),
-            enabled: enabled,
-        }
-
-        if ( typeof init.name === 'string' && init.name !== "" ) {
-            pwm = soletta.sol_pwm_open_by_label( init.name, config );
-        } else {
-            if ( raw )
-                pwm = soletta.sol_pwm_open_raw( init.device, init.channel, config );
-            else
-                pwm = soletta.sol_pwm_open( init.device, init.channel, config );
-        }
-
-        if ( pwm ) {
-            fulfill( PWMPin( pwm ) );
-        } else {
-            reject( new Error( "Could not open PWM device" ) );
-        }
-
-    });
-}
-
-var PWMPin = function( pin ) {
-    if ( !this._isPWMPin )
-        return new PWMPin( pin );
-    this._pin = pin;
-}
-
-_.extend(PWMPin.prototype, {
-    _isPWMPin: true,
-
-    setEnabled: function( value ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            var returnValue = soletta.sol_pwm_set_enabled( this._pin, value);
-            if ( returnValue )
-                fulfill();
-            else
-                reject( new Error( "Failed to enable PWM pin" ) );
-        }, this ) );
-    },
-
-    setDutyCycle: function( value ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            var returnValue = soletta.sol_pwm_set_duty_cycle( this._pin, value );
-            if ( returnValue )
-                fulfill();
-            else
-                reject( new Error( "Failed to set PWM duty cycle" ) );
-        }, this ) );
-    },
-
-    setPeriod: function( value ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            var returnValue = soletta.sol_pwm_set_period( this._pin, value );
-            if ( returnValue )
-                fulfill();
-            else
-                reject( new Error( "Failed to set PWM period" ) );
-        }, this ) );
-    },
-
-    close: function() {
-       soletta.sol_pwm_close( this._pin);
-    }
-});
-
-exports.PWMPin = PWMPin;
diff --git a/bindings/nodejs/lib/spi.js b/bindings/nodejs/lib/spi.js
deleted file mode 100644
index d73a505f..00000000
--- a/bindings/nodejs/lib/spi.js
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( './lowlevel'),
-    _ = require( 'lodash' );
-
-exports.open = function( init ) {
-    return new Promise( function( fulfill, reject ) {
-        var config = null;
-        var spiMode =  init.mode ? init.mode : "mode0";
-        var chipSelect =  init.chipSelect ? init.chipSelect : 0;
-        var bitsPerWord =  init.bitsPerWord ? init.bitsPerWord : 8;
-        var spi;
-
-        config = {
-            chip_select: chipSelect,
-            mode: soletta.sol_spi_mode_from_str( spiMode ),
-            frequency: init.frequency,
-            bits_per_word: bitsPerWord,
-        }
-
-        spi = soletta.sol_spi_open( init.bus, config );
-        if ( spi ) {
-            fulfill( SPIBus( spi ) );
-        } else {
-            reject( new Error( "Could not open SPI device" ) );
-        }
-    });
-}
-
-var SPIBus = function( bus ) {
-    if ( !this._isSPIBus )
-        return new SPIBus( bus );
-    this._bus = bus;
-}
-
-_.extend( SPIBus.prototype, {
-    _isSPIBus: true,
-
-    transfer: function(value) {
-       return new Promise( _.bind( function( fulfill, reject ) {
-           var txBuffer;
-           if ( Buffer.isBuffer( value ) )
-               txBuffer = value;
-           else
-               txBuffer = new Buffer(value);
-
-           var returnStatus = soletta.sol_spi_transfer( this._bus, txBuffer,
-               function( txData, rxData, count ) {
-                   if ( rxData !== null ) {
-                       fulfill( rxData );
-                   } else {
-                       reject( new Error( "SPI transmission failed" ) );
-                   }
-           });
-
-           if ( returnStatus < 0 ) {
-               reject( new Error( "SPI transmission failed" ) );
-           }
-       }, this ) );
-    },
-
-    close: function() {
-        soletta.sol_spi_close( this._bus );
-    }
-});
-
-exports.SPIBus = SPIBus;
diff --git a/bindings/nodejs/lib/uart.js b/bindings/nodejs/lib/uart.js
deleted file mode 100644
index e0eee349..00000000
--- a/bindings/nodejs/lib/uart.js
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( './lowlevel'),
-    _ = require( 'lodash' );
-
-exports.open = function( init ) {
-    return new Promise( function( fulfill, reject ) {
-        var config = null;
-        var connection;
-        var callback_data = [];
-        var flowControl = ( typeof init.flowControl === 'undefined' ) ? false : init.flowControl;
-        var baudRate = init.baud ? init.baud : "baud-115200";
-        var dataBits = init.dataBits ? init.dataBits : "databits-8";
-        var stopBits = init.stopBits ? init.stopBits : "stopbits-1";
-        var parity = init.parity ? init.parity : "none";
-
-        config = {
-            baud_rate: soletta.sol_uart_baud_rate_from_str( baudRate ),
-            data_bits: soletta.sol_uart_data_bits_from_str( dataBits ),
-            parity: soletta.sol_uart_parity_from_str( parity ),
-            stop_bits: soletta.sol_uart_stop_bits_from_str( stopBits ),
-            flow_control: flowControl,
-            on_data: function( data ) {
-                callback_data[0].dispatchEvent( "read", {
-                    type: "read",
-                    data: data
-                } );
-            },
-            on_feed_done: function( cb_status ) {
-                callback_data[0].dispatchEvent( "write", {
-                    type: "write"
-                } );
-            },
-        }
-
-        var uart = soletta.sol_uart_open( init.port, config );
-        if ( !uart ) {
-            reject( new Error( "Could not open UART device" ) );
-            return;
-        }
-        connection = UARTConnection( uart );
-        callback_data.push( connection );
-        fulfill( connection );
-    });
-}
-
-var UARTConnection = function( connection ) {
-    if ( !this._isUARTConnection )
-        return new UARTConnection( connection );
-    this._connection = connection;
-}
-
-require( "util" ).inherits( UARTConnection, require( "events" ).EventEmitter );
-
-_.extend( UARTConnection.prototype, {
-    _isUARTConnection: true,
-    onchange: null,
-
-    write: function( value ) {
-        return new Promise( _.bind( function( fulfill, reject ) {
-            var buffer;
-            if ( Buffer.isBuffer( value ) )
-                buffer = value;
-            else
-                buffer = new Buffer( value );
-
-            var returnStatus = soletta.sol_uart_feed( this._connection, buffer,
-                function( cb_status ) {
-                if ( cb_status < 0 ) {
-                    reject( new Error( "UART write failed" ) );
-                } else {
-                    fulfill();
-                }
-            });
-
-            if ( ( typeof returnStatus === 'undefined' ) || returnStatus < 0) {
-                reject( new Error( "UART write failed" ) );
-            }
-        }, this ) );
-    },
-
-    close: function() {
-        soletta.sol_uart_close( this._connection);
-    },
-
-    addEventListener: UARTConnection.prototype.addListener,
-
-    removeEventListener: UARTConnection.prototype.removeListener,
-
-    dispatchEvent: function( event, request ) {
-        this.emit( event, request );
-        if ( typeof this[ "on" + event ] === "function" ) {
-            this[ "on" + event ]( request );
-        }
-    }
-});
-
-exports.UARTConnection = UARTConnection;
diff --git a/bindings/nodejs/src/common.h b/bindings/nodejs/src/common.h
deleted file mode 100644
index bea449f9..00000000
--- a/bindings/nodejs/src/common.h
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#define SET_FUNCTION(destination, functionName) \
-    Nan::ForceSet((destination), Nan::New(#functionName).ToLocalChecked(), \
-    Nan::GetFunction(Nan::New<FunctionTemplate>( \
-    bind_ ## functionName)).ToLocalChecked(), \
-    (v8::PropertyAttribute)(v8::DontDelete));
-
-#define SET_CONSTANT_NUMBER(destination, name) \
-    Nan::ForceSet((destination), Nan::New(#name).ToLocalChecked(), \
-    Nan::New((name)), \
-    (v8::PropertyAttribute)(v8::ReadOnly | v8::DontDelete));
-
-#define SET_CONSTANT_STRING(destination, name) \
-    Nan::ForceSet((destination), Nan::New(#name).ToLocalChecked(), \
-    Nan::New((name)).ToLocalChecked(), \
-    (v8::PropertyAttribute)(v8::ReadOnly | v8::DontDelete));
-
-#define SET_CONSTANT_OBJECT(destination, name) \
-    Nan::ForceSet((destination), Nan::New(#name).ToLocalChecked(), \
-    bind_ ## name, \
-    (v8::PropertyAttribute)(v8::ReadOnly | v8::DontDelete));
-
-#define VALIDATE_CALLBACK_RETURN_VALUE_TYPE(value, typecheck, message, fallback) \
-    if (!value->typecheck()) { \
-        Nan::ThrowTypeError( \
-            message " callback return value type must satisfy " #typecheck "()"); \
-        return (fallback); \
-    }
-
-#define VALIDATE_ARGUMENT_COUNT(args, length) \
-    if ((args).Length() < (length)) { \
-        return Nan::ThrowRangeError("Argument count must be exactly " #length); \
-    }
-
-#define VALIDATE_ARGUMENT_TYPE(args, index, typecheck) \
-    if (!(args)[(index)]->typecheck()) { \
-        return Nan::ThrowTypeError("Argument " #index " must satisfy " #typecheck \
-            "()"); \
-    }
-
-#define VALIDATE_VALUE_TYPE(value, typecheck, message, failReturn) \
-    if (!(value)->typecheck()) { \
-        Nan::ThrowTypeError(message " must satisfy " #typecheck "()"); \
-        return failReturn; \
-    }
-
-#define VALIDATE_VALUE_TYPE_OR_FREE(value, typecheck, message, failReturn, \
-        pointer_to_free, free_function) \
-    if (!(value)->typecheck()) { \
-        Nan::ThrowTypeError(message " must satisfy " #typecheck "()"); \
-        free_function((pointer_to_free)); \
-        return failReturn; \
-    }
-
-#define VALIDATE_ARGUMENT_TYPE_OR_NULL(args, index, typecheck) \
-    if (!((args)[(index)]->typecheck() || (args)[(index)]->IsNull())) { \
-        return Nan::ThrowTypeError("Argument " #index " must satisfy " #typecheck \
-            "() or IsNull()"); \
-    }
-
-#define SET_STRING_IF_NOT_NULL(destination, source, memberName) \
-    if ((source)->memberName) { \
-        Nan::Set((destination), Nan::New(#memberName).ToLocalChecked(), \
-            Nan::New((source)->memberName).ToLocalChecked()); \
-    }
-
-#define SET_VALUE_ON_OBJECT(destination, type, source, memberName) \
-    Nan::Set((destination), Nan::New(#memberName).ToLocalChecked(), \
-    Nan::New<type>((source)->memberName));
-
-#define VALIDATE_AND_ASSIGN(destination, memberName, destinationType, \
-        typecheck, message, failReturn, source, accessor) \
-    Local<Value> memberName = \
-        Nan::Get(source, Nan::New(#memberName).ToLocalChecked()) \
-        .ToLocalChecked(); \
-    VALIDATE_VALUE_TYPE(memberName, typecheck, message "." #memberName, \
-    failReturn); \
-    destination.memberName = (destinationType)memberName->accessor();
diff --git a/bindings/nodejs/src/data.cc b/bindings/nodejs/src/data.cc
deleted file mode 100644
index 4e27bfd8..00000000
--- a/bindings/nodejs/src/data.cc
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include <v8.h>
-#include "data.h"
-#include "common.h"
-
-using namespace v8;
-
-Local<Array> jsArrayFromBytes(unsigned char *bytes, size_t length) {
-  size_t index;
-  Local<Array> returnValue = Nan::New<Array>(length);
-
-  for (index = 0; index < length; index++) {
-    Nan::Set(returnValue, index, Nan::New(bytes[index]));
-  }
-  return returnValue;
-}
-
-bool fillCArrayFromJSArray(unsigned char *bytes, size_t length,
-                                  Local<Array> array) {
-  size_t index, arrayLength;
-
-  arrayLength = array->Length();
-  if (arrayLength != length) {
-    Nan::ThrowError("byte array has the wrong length");
-    return false;
-  }
-
-  for (index = 0; index < length; index++) {
-    Local<Value> byte = Nan::Get(array, index).ToLocalChecked();
-    VALIDATE_VALUE_TYPE(byte, IsUint32, "byte array item", false);
-    bytes[index] = (unsigned char)(byte->Uint32Value());
-  }
-
-  return true;
-}
-
-bool c_StringNew(Local<String> jsString, char **p_string) {
-  size_t length = strlen((const char *)*(String::Utf8Value(jsString)));
-  char *string = (char *)malloc(length + 1);
-  if (!string) {
-    Nan::ThrowError("Failed to allocate memory for C string");
-    return false;
-  }
-  string[length] = 0;
-  strcpy(string, (const char *)*(String::Utf8Value(jsString)));
-
-  *p_string = string;
-  return true;
-}
diff --git a/bindings/nodejs/src/data.h b/bindings/nodejs/src/data.h
deleted file mode 100644
index a726fd0b..00000000
--- a/bindings/nodejs/src/data.h
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef __SOLETTA_JS_DATA_H__
-#define __SOLETTA_JS_DATA_H__
-
-#include <v8.h>
-
-v8::Local<v8::Array> jsArrayFromBytes(unsigned char *bytes, size_t length);
-bool fillCArrayFromJSArray(unsigned char *bytes, size_t length,
-    v8::Local<v8::Array> array);
-bool c_StringNew(v8::Local<v8::String> jsString, char **p_string);
-
-#endif /* ndef __SOLETTA_JS_DATA_H__ */
diff --git a/bindings/nodejs/src/functions/aio.cc b/bindings/nodejs/src/functions/aio.cc
deleted file mode 100644
index 008f0468..00000000
--- a/bindings/nodejs/src/functions/aio.cc
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-extern "C" {
-#include <sol-aio.h>
-}
-
-#include <v8.h>
-#include <node.h>
-#include <nan.h>
-
-#include "../common.h"
-#include "../hijack.h"
-#include "../structures/js-handle.h"
-
-using namespace v8;
-
-class SolAio : public JSHandle<SolAio> {
-public:
-    static const char *jsClassName() { return "SolAio"; }
-};
-
-NAN_METHOD(bind_sol_aio_open) {
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsInt32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsInt32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 2, IsUint32);
-
-    int32_t device;
-    int32_t pin;
-    uint32_t precision;
-    sol_aio *aio = NULL;
-
-    device = info[0]->Int32Value();
-    pin = info[1]->Int32Value();
-    precision = info[2]->Uint32Value();
-
-    aio = sol_aio_open(device, pin, precision);
-    if ( aio ) {
-        info.GetReturnValue().Set(SolAio::New(aio));
-    }
-}
-
-NAN_METHOD(bind_sol_aio_open_by_label) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsString);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-
-    uint32_t precision;
-    sol_aio *aio = NULL;
-
-    precision = info[1]->Uint32Value();
-
-    aio = sol_aio_open_by_label((const char *)*String::Utf8Value(info[0]), precision);
-    if ( aio ) {
-        info.GetReturnValue().Set(SolAio::New(aio));
-    }
-}
-
-NAN_METHOD(bind_sol_aio_open_raw) {
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsInt32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsInt32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 2, IsUint32);
-
-    int32_t device;
-    int32_t pin;
-    uint32_t precision;
-    sol_aio *aio = NULL;
-
-    device = info[0]->Int32Value();
-    pin = info[1]->Int32Value();
-    precision = info[2]->Uint32Value();
-
-    aio = sol_aio_open_raw(device, pin, precision);
-    if ( aio ) {
-        info.GetReturnValue().Set(SolAio::New(aio));
-    }
-}
-
-NAN_METHOD(bind_sol_aio_close) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    Local<Object> jsAio = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_aio *aio = (sol_aio *)SolAio::Resolve(jsAio);
-    if (!aio)
-        return;
-
-    sol_aio_close(aio);
-    Nan::SetInternalFieldPointer(jsAio, 0, 0);
-}
-
-static void sol_aio_read_cb(void *cb_data, struct sol_aio *aio,
-                            int32_t ret)
-{
-    Nan::HandleScope scope;
-    Nan::Callback *callback = (Nan::Callback *)cb_data;
-
-    Local<Value> arguments[1] = {
-        Nan::New(ret)
-    };
-    callback->Call(1, arguments);
-
-    delete callback;
-    hijack_unref();
-}
-
-NAN_METHOD(bind_sol_aio_get_value) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsFunction);
-    Local<Object> jsAio = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_aio *aio = (sol_aio *)SolAio::Resolve(jsAio);
-    if (!aio)
-        return;
-
-    Nan::Callback *callback =
-        new Nan::Callback(Local<Function>::Cast(info[1]));
-
-    sol_aio_pending *aio_pending =
-        sol_aio_get_value(aio, sol_aio_read_cb, callback);
-
-    if (!aio_pending) {
-        delete callback;
-        return;
-    } else if (!hijack_ref()) {
-        sol_aio_pending_cancel(aio, aio_pending);        
-        delete callback;
-        return;
-    }
-
-    info.GetReturnValue().Set(SolAio::New(aio_pending));
-}
-
-NAN_METHOD(bind_sol_aio_pending_cancel)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-    Local<Object> jsAio = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_aio *aio = (sol_aio *)SolAio::Resolve(jsAio);
-    if (!aio)
-        return;
-
-    Local<Object> jsAioPending = Nan::To<Object>(info[1]).ToLocalChecked();
-    sol_aio_pending *aio_pending = (sol_aio_pending *)SolAio::Resolve(jsAioPending);
-    if (!aio_pending)
-        return;
-
-    sol_aio_pending_cancel(aio, aio_pending);
-}
diff --git a/bindings/nodejs/src/functions/gpio.cc b/bindings/nodejs/src/functions/gpio.cc
deleted file mode 100644
index 725dd9a4..00000000
--- a/bindings/nodejs/src/functions/gpio.cc
+++ /dev/null
@@ -1,237 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <sol-gpio.h>
-
-#include <v8.h>
-#include <node.h>
-#include <nan.h>
-#include <map>
-
-#include "../common.h"
-#include "../hijack.h"
-#include "../structures/sol-js-gpio.h"
-#include "../structures/js-handle.h"
-
-using namespace v8;
-
-class SolGpio : public JSHandle<SolGpio> {
-public:
-    static const char *jsClassName() { return "SolGpio"; }
-};
-
-#define OPEN_GPIO(functionname, pin, jsGPIOConfig) \
-    do { \
-        sol_gpio_config config; \
-        sol_gpio *gpio = NULL; \
-\
-        sol_gpio_data *gpio_data = new sol_gpio_data; \
-        gpio_data->callback = NULL; \
-\
-        if (!c_sol_gpio_config(jsGPIOConfig->ToObject(), gpio_data, &config)) { \
-            delete gpio_data; \
-            Nan::ThrowError("Unable to extract sol_gpio_config\n"); \
-            return; \
-        } \
-\
-        Nan::Callback *callback = gpio_data->callback; \
-        if (callback) { \
-            if (!hijack_ref()) { \
-                delete callback; \
-                delete gpio_data; \
-                return; \
-            } \
-            config.in.cb = sol_gpio_read_callback; \
-        } \
-\
-        gpio = functionname(pin, &config); \
-        if (gpio) { \
-            gpio_data->gpio = gpio; \
-            info.GetReturnValue().Set(SolGpio::New(gpio_data)); \
-            return; \
-        } else { \
-            if (callback) { \
-                delete callback; \
-                hijack_unref(); \
-            } \
-            delete gpio_data; \
-        } \
-    } while(0)
-
-static void sol_gpio_read_callback(void *data, struct sol_gpio *gpio, bool value) {
-    Nan::HandleScope scope;
-    sol_gpio_data *gpio_data = (sol_gpio_data *)data;
-    Nan::Callback *callback = gpio_data->callback;
-    if (!callback)
-        return;
-
-    Local<Value> arguments[1] = {
-        Nan::New(value)
-    };
-    callback->Call(1, arguments);
-}
-
-NAN_METHOD(bind_sol_gpio_open) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsUint32);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-
-    uint32_t pin = info[0]->Uint32Value();
-    OPEN_GPIO(sol_gpio_open, pin, info[1]);
-}
-
-NAN_METHOD(bind_sol_gpio_open_by_label) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsString);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-
-    String::Utf8Value label(info[0]);
-    OPEN_GPIO(sol_gpio_open_by_label, (const char *)*label, info[1]);
-}
-
-NAN_METHOD(bind_sol_gpio_open_raw) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsUint32);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-
-    uint32_t pin = info[0]->Uint32Value();
-    OPEN_GPIO(sol_gpio_open_raw, pin, info[1]);
-}
-
-NAN_METHOD(bind_sol_gpio_close) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    Local<Object> jsGpio = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_gpio_data *gpio_data = (sol_gpio_data *)SolGpio::Resolve(jsGpio);
-    sol_gpio *gpio;
-
-    if (!gpio_data)
-        return;
-    gpio = gpio_data->gpio;
-
-    Nan::Callback *callback = gpio_data->callback;
-    sol_gpio_close(gpio);
-    if (callback) {
-        delete callback;
-        hijack_unref();
-    }
-
-    delete gpio_data;
-    Nan::SetInternalFieldPointer(jsGpio, 0, 0);
-}
-
-NAN_METHOD(bind_sol_gpio_write) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsBoolean);
-    bool value;
-    Local<Object> jsGpio = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_gpio_data *gpio_data = (sol_gpio_data *)SolGpio::Resolve(jsGpio);
-    sol_gpio *gpio;
-
-    if (!gpio_data)
-        return;
-
-    gpio = gpio_data->gpio;
-    value = info[1]->BooleanValue();
-
-    info.GetReturnValue().Set(Nan::New(sol_gpio_write(gpio, value)));
-}
-
-NAN_METHOD(bind_sol_gpio_read) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    Local<Object> jsGpio = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_gpio_data *gpio_data = (sol_gpio_data *)SolGpio::Resolve(jsGpio);
-    sol_gpio *gpio;
-
-    if (!gpio_data)
-        return;
-
-    gpio = gpio_data->gpio;
-    info.GetReturnValue().Set(Nan::New(sol_gpio_read(gpio)));
-}
-
-NAN_METHOD(bind_sol_gpio_direction_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_gpio_direction direction = sol_gpio_direction_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(direction));
-}
-
-NAN_METHOD(bind_sol_gpio_direction_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_gpio_direction_to_str(
-        (sol_gpio_direction)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_gpio_edge_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_gpio_edge edge = sol_gpio_edge_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(edge));
-}
-
-NAN_METHOD(bind_sol_gpio_edge_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_gpio_edge_to_str(
-        (sol_gpio_edge)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_gpio_drive_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_gpio_drive drive = sol_gpio_drive_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(drive));
-}
-
-NAN_METHOD(bind_sol_gpio_drive_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_gpio_drive_to_str(
-        (sol_gpio_drive)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
diff --git a/bindings/nodejs/src/functions/i2c.cc b/bindings/nodejs/src/functions/i2c.cc
deleted file mode 100644
index c8292070..00000000
--- a/bindings/nodejs/src/functions/i2c.cc
+++ /dev/null
@@ -1,516 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <errno.h>
-#include <v8.h>
-#include <node.h>
-#include <nan.h>
-
-#include <sol-i2c.h>
-
-#include "../common.h"
-#include "../data.h"
-#include "../hijack.h"
-#include "../structures/js-handle.h"
-#include "../sys-constants.h"
-
-using namespace v8;
-
-class SolI2c : public JSHandle<SolI2c> {
-public:
-    static const char *jsClassName() { return "SolI2c"; }
-};
-
-NAN_METHOD(bind_sol_i2c_open)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsUint32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-
-    sol_i2c *i2c = NULL;
-    sol_i2c_speed speed = (sol_i2c_speed) info[1]->Uint32Value();
-
-    i2c = sol_i2c_open(info[0]->Uint32Value(), speed);
-
-    if (i2c) {
-        info.GetReturnValue().Set(SolI2c::New(i2c));
-    }
-}
-
-NAN_METHOD(bind_sol_i2c_open_raw)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsUint32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-
-    sol_i2c *i2c = NULL;
-    sol_i2c_speed speed = (sol_i2c_speed) info[1]->Uint32Value();
-    i2c = sol_i2c_open_raw(info[0]->Uint32Value(), speed);
-
-    if (i2c) {
-        info.GetReturnValue().Set(SolI2c::New(i2c));
-    }
-}
-
-NAN_METHOD(bind_sol_i2c_set_slave_address)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    int returnValue = sol_i2c_set_slave_address(i2c, info[1]->Uint32Value());
-    if (returnValue < 0) {
-        info.GetReturnValue().Set(ReverseLookupConstant("E", -returnValue));
-    } else {
-        info.GetReturnValue().Set(Nan::New(returnValue));
-    }
-}
-
-NAN_METHOD(bind_sol_i2c_close)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    sol_i2c_close(i2c);
-    Nan::SetInternalFieldPointer(jsI2c, 0, 0);
-}
-
-NAN_METHOD(bind_sol_i2c_pending_cancel)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    Local<Object> jsI2cPending = Nan::To<Object>(info[1]).ToLocalChecked();
-    sol_i2c_pending *i2c_pending = (sol_i2c_pending *)SolI2c::Resolve(jsI2cPending);
-
-    sol_i2c_pending_cancel(i2c, i2c_pending);
-    Nan::SetInternalFieldPointer(jsI2cPending, 0, 0);
-}
-
-static void sol_i2c_write_cb(void *cb_data, struct sol_i2c *i2c,
-                             uint8_t *data, ssize_t status)
-{
-    Nan::HandleScope scope;
-    Nan::Callback *callback = (Nan::Callback *)cb_data;
-    Local<Value> buffer;
-
-    if (status >= 0) {
-        buffer = Nan::NewBuffer((char *)data, status).ToLocalChecked();
-    } else {
-        buffer = Nan::Null();
-        free(data);
-    }
-
-    Local<Value> arguments[2] = {
-        buffer,
-        Nan::New((int)status)
-    };
-
-    callback->Call(2, arguments);
-    delete callback;
-    hijack_unref();
-}
-
-NAN_METHOD(bind_sol_i2c_write)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 2, IsFunction);
-
-    uint8_t *inputBuffer = (uint8_t *) 0;
-    size_t count = 0;
-
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    if (!node::Buffer::HasInstance(info[1])) {
-        Nan::ThrowTypeError("Argument 1 must be a node Buffer");
-        return;
-    }
-
-    count = node::Buffer::Length(info[1]);
-
-    inputBuffer = (uint8_t *) calloc(count, sizeof(uint8_t));
-    if (!inputBuffer)
-    {
-        Nan::ThrowError("Failed to allocate memory for input buffer");
-        return;
-    }
-
-    memcpy(inputBuffer, node::Buffer::Data(info[1]), count);
-
-    if (!hijack_ref()) {
-        free(inputBuffer);
-        return;
-    }
-
-    Nan::Callback *callback =
-            new Nan::Callback(Local<Function>::Cast(info[2]));
-    sol_i2c_pending *i2c_pending =
-            sol_i2c_write(i2c, inputBuffer, count, sol_i2c_write_cb, callback);
-
-    if (!i2c_pending) {
-        free(inputBuffer);
-        delete callback;
-        hijack_unref();
-        info.GetReturnValue().Set(ReverseLookupConstant("E", errno));
-        return;
-    }
-
-    info.GetReturnValue().Set(SolI2c::New(i2c_pending));
-}
-
-static void sol_i2c_write_reg_cb(void *cb_data, struct sol_i2c *i2c,
-                                 uint8_t reg, uint8_t *data, ssize_t status)
-{
-    Nan::HandleScope scope;
-    Nan::Callback *callback = (Nan::Callback *)cb_data;
-    Local<Value> buffer;
-
-    if (status >= 0) {
-        buffer = Nan::NewBuffer((char *)data, status).ToLocalChecked();
-    } else {
-        buffer = Nan::Null();
-        free(data);
-    }
-
-    Local<Value> arguments[3] = {
-        Nan::New(reg),
-        buffer,
-        Nan::New((int)status)
-    };
-
-    callback->Call(3, arguments);
-
-    delete callback;
-    hijack_unref();
-}
-
-NAN_METHOD(bind_sol_i2c_write_register)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 4);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 2, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 3, IsFunction);
-
-    uint8_t *inputBuffer = (uint8_t *) 0;
-    size_t count;
-
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    uint8_t reg = info[1]->Uint32Value();
-
-    if (!node::Buffer::HasInstance(info[2])) {
-        Nan::ThrowTypeError("Argument 2 must be a node Buffer");
-        return;
-    }
-
-    count = node::Buffer::Length(info[2]);
-
-    inputBuffer = (uint8_t *) calloc(count, sizeof(uint8_t));
-    if (!inputBuffer) {
-        Nan::ThrowError("Failed to allocate memory for input buffer");
-        return;
-    }
-
-    memcpy(inputBuffer, node::Buffer::Data(info[2]), count);
-
-    if (!hijack_ref()) {
-        free(inputBuffer);
-        return;
-    }
-
-    Nan::Callback *callback =
-            new Nan::Callback(Local<Function>::Cast(info[3]));
-    sol_i2c_pending *i2c_pending =
-            sol_i2c_write_register(i2c, reg, inputBuffer, count,
-                                   sol_i2c_write_reg_cb, callback);
-
-    if (!i2c_pending) {
-        free(inputBuffer);
-        delete callback;
-        hijack_unref();
-        info.GetReturnValue().Set(ReverseLookupConstant("E", errno));
-        return;
-    }
-
-    info.GetReturnValue().Set(SolI2c::New(i2c_pending));
-}
-
-static void sol_i2c_write_quick_cb(void *cb_data, struct sol_i2c *i2c,
-                                   ssize_t status)
-{
-    Nan::HandleScope scope;
-    Nan::Callback *callback = (Nan::Callback *)cb_data;
-
-    Local<Value> arguments[1] = {
-        Nan::New((int)status)
-    };
-
-    callback->Call(1, arguments);
-    delete callback;
-    hijack_unref();
-}
-
-NAN_METHOD(bind_sol_i2c_write_quick)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsBoolean);
-    VALIDATE_ARGUMENT_TYPE(info, 2, IsFunction);
-
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    bool rw = info[1]->BooleanValue();
-
-    if (!hijack_ref())
-        return;
-
-    Nan::Callback *callback =
-            new Nan::Callback(Local<Function>::Cast(info[2]));
-
-    sol_i2c_pending *i2c_pending =
-            sol_i2c_write_quick(i2c, rw, sol_i2c_write_quick_cb, callback);
-
-    if (!i2c_pending) {
-        delete callback;
-        hijack_unref();
-        info.GetReturnValue().Set(ReverseLookupConstant("E", errno));
-        return;
-    }
-
-    info.GetReturnValue().Set(SolI2c::New(i2c_pending));
-}
-
-static void sol_i2c_read_cb(void *cb_data, struct sol_i2c *i2c, uint8_t *data,
-                            ssize_t status)
-{
-    Nan::HandleScope scope;
-    Nan::Callback *callback = (Nan::Callback *)cb_data;
-    Local<Value> buffer;
-
-    if (status >= 0) {
-        buffer = Nan::NewBuffer((char *)data, status).ToLocalChecked();
-    } else {
-        buffer = Nan::Null();
-        free(data);
-    }
-
-    Local<Value> arguments[2] = {
-        buffer,
-        Nan::New((int)status)
-    };
-
-    callback->Call(2, arguments);
-    delete callback;
-    hijack_unref();
-}
-
-NAN_METHOD(bind_sol_i2c_read)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-    VALIDATE_ARGUMENT_TYPE(info, 2, IsFunction);
-
-    uint8_t *outputBuffer = (uint8_t *) 0;
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    size_t count = info[1]->Uint32Value();
-    outputBuffer = (uint8_t *) calloc(count, sizeof(uint8_t));
-
-    if (!outputBuffer) {
-        Nan::ThrowError("Failed to allocate memory for output buffer");
-        return;
-    }
-
-    if (!hijack_ref()) {
-        free(outputBuffer);
-        return;
-    }
-
-    Nan::Callback *callback =
-            new Nan::Callback(Local<Function>::Cast(info[2]));
-
-    sol_i2c_pending *i2c_pending =
-            sol_i2c_read(i2c, outputBuffer, count, sol_i2c_read_cb, callback);
-
-    if (!i2c_pending) {
-        free(outputBuffer);
-        delete callback;
-        hijack_unref();
-        info.GetReturnValue().Set(ReverseLookupConstant("E", errno));
-        return;
-    }
-
-    info.GetReturnValue().Set(SolI2c::New(i2c_pending));
-}
-
-static void sol_i2c_read_reg_cb(void *cb_data, struct sol_i2c *i2c,
-                                uint8_t reg, uint8_t *data, ssize_t status)
-{
-    Nan::HandleScope scope;
-    Nan::Callback *callback = (Nan::Callback *)cb_data;
-    Local<Value> buffer;
-
-    if (status >= 0) {
-        buffer = Nan::NewBuffer((char *)data, status).ToLocalChecked();
-    } else {
-        free(data);
-        buffer = Nan::Null();
-    }
-
-    Local<Value> arguments[3] = {
-        Nan::New(reg),
-        buffer,
-        Nan::New((int)status)
-    };
-
-    callback->Call(3, arguments);
-    delete callback;
-    hijack_unref();
-}
-
-NAN_METHOD(bind_sol_i2c_read_register)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 4);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 2, IsUint32);
-    VALIDATE_ARGUMENT_TYPE(info, 3, IsFunction);
-
-    uint8_t *outputBuffer = (uint8_t *) 0;
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    uint8_t reg = info[1]->Uint32Value();
-    size_t count = info[2]->Uint32Value();
-
-    outputBuffer = (uint8_t *) calloc(count, sizeof(uint8_t));
-    if (!outputBuffer) {
-        Nan::ThrowError("Failed to allocate memory for output buffer");
-        return;
-    }
-
-    if (!hijack_ref()) {
-        free(outputBuffer);
-        return;
-    }
-
-    Nan::Callback *callback =
-            new Nan::Callback(Local<Function>::Cast(info[3]));
-
-    sol_i2c_pending *i2c_pending =
-            sol_i2c_read_register(i2c, reg, outputBuffer, count,
-                                  sol_i2c_read_reg_cb, callback);
-
-    if (!i2c_pending) {
-        free(outputBuffer);
-        delete callback;
-        hijack_unref();
-        info.GetReturnValue().Set(ReverseLookupConstant("E", errno));
-        return;
-    }
-
-    info.GetReturnValue().Set(SolI2c::New(i2c_pending));
-}
-
-NAN_METHOD(bind_sol_i2c_read_register_multiple)
-{
-    VALIDATE_ARGUMENT_COUNT(info, 5);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsUint32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 2, IsUint32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 3, IsUint32);
-    VALIDATE_ARGUMENT_TYPE(info, 4, IsFunction);
-
-    uint8_t *outputBuffer = (uint8_t *) 0;
-    Local<Object> jsI2c = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_i2c *i2c = (sol_i2c *)SolI2c::Resolve(jsI2c);
-
-    uint8_t reg = info[1]->Uint32Value();
-    size_t count = info[2]->Uint32Value();
-    uint8_t times = info[3]->Uint32Value();
-
-    outputBuffer = (uint8_t *) calloc(times * count, sizeof(uint8_t));
-    if (!outputBuffer) {
-        Nan::ThrowError("Failed to allocate memory for output buffer");
-        return;
-    }
-
-    if (!hijack_ref()) {
-        free(outputBuffer);
-        return;
-    }
-
-    Nan::Callback *callback =
-            new Nan::Callback(Local<Function>::Cast(info[4]));
-
-    sol_i2c_pending *i2c_pending =
-            sol_i2c_read_register_multiple(i2c, reg, outputBuffer,
-                                           count, times,
-                                           sol_i2c_read_reg_cb, callback);
-
-    if (!i2c_pending) {
-        free(outputBuffer);
-        delete callback;
-        hijack_unref();
-        info.GetReturnValue().Set(ReverseLookupConstant("E", errno));
-        return;
-    }
-
-    info.GetReturnValue().Set(SolI2c::New(i2c_pending));
-}
-
-NAN_METHOD(bind_sol_i2c_speed_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_i2c_speed speed = sol_i2c_speed_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(speed));
-}
-
-NAN_METHOD(bind_sol_i2c_speed_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_i2c_speed_to_str(
-        (sol_i2c_speed)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
diff --git a/bindings/nodejs/src/functions/oic-client-common.cc b/bindings/nodejs/src/functions/oic-client-common.cc
deleted file mode 100644
index 344dd0b7..00000000
--- a/bindings/nodejs/src/functions/oic-client-common.cc
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "../structures/oic-client.h"
-#include "../common.h"
-
-using namespace v8;
-
-NAN_METHOD(bind_sol_oic_client_new) {
-    VALIDATE_ARGUMENT_COUNT(info, 0);
-    struct sol_oic_client *client = sol_oic_client_new();
-    if (client) {
-        info.GetReturnValue().Set(SolOicClient::New(client));
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_oic_client_del) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    Local<Object> jsClient = Nan::To<Object>(info[0]).ToLocalChecked();
-    struct sol_oic_client *client = (struct sol_oic_client *)
-        SolOicClient::Resolve(jsClient);
-    if (client) {
-        sol_oic_client_del(client);
-        Nan::SetInternalFieldPointer(jsClient, 0, 0);
-    }
-}
diff --git a/bindings/nodejs/src/functions/oic-client-discovery.cc b/bindings/nodejs/src/functions/oic-client-discovery.cc
deleted file mode 100644
index 33e701cc..00000000
--- a/bindings/nodejs/src/functions/oic-client-discovery.cc
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <string.h>
-#include <nan.h>
-#include <sol-oic-client.h>
-
-#include "../common.h"
-#include "../structures/network.h"
-#include "../structures/oic-client.h"
-
-using namespace v8;
-
-static bool resourceFound(void *data, struct sol_oic_client *client,
-    struct sol_oic_resource *resource) {
-    Nan::HandleScope scope;
-
-    // If Soletta tells us there are no more resources, we detach this callback
-    // no matter what the JS callback returns
-    bool keepDiscovering = !!resource;
-    OicCallbackData *callbackData = (OicCallbackData *)data;
-
-    // Call the JS callback
-    Local<Value> arguments[2] = {
-        Nan::New(*(callbackData->jsClient)),
-        Nan::Null()
-    };
-    if (resource) {
-        arguments[1] = SolOicClientResource::New(resource);
-    }
-    Local<Value> jsResult = callbackData->callback->Call(2, arguments);
-
-    // Determine whether we should keep discovering
-    if (!jsResult->IsBoolean()) {
-        Nan::ThrowTypeError(
-            "Resource discovery callback return value is not boolean");
-    } else {
-        keepDiscovering = keepDiscovering &&
-            Nan::To<bool>(jsResult).FromJust();
-    }
-
-    // Tear down if discovery is done
-    if (!keepDiscovering) {
-        delete callbackData;
-    }
-
-    return keepDiscovering;
-}
-
-NAN_METHOD(bind_sol_oic_client_find_resources) {
-    VALIDATE_ARGUMENT_COUNT(info, 4);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 2, IsString);
-    VALIDATE_ARGUMENT_TYPE(info, 3, IsString);
-    VALIDATE_ARGUMENT_TYPE(info, 4, IsFunction);
-
-    struct sol_network_link_addr theAddress;
-    if (!c_sol_network_link_addr(Nan::To<Object>(info[1]).ToLocalChecked(),
-        &theAddress)) {
-        return;
-    }
-
-    Local<Object> jsClient = Nan::To<Object>(info[0]).ToLocalChecked();
-    struct sol_oic_client *client = (struct sol_oic_client *)
-        SolOicClient::Resolve(jsClient);
-    if (!client) {
-        return;
-    }
-
-    OicCallbackData *callbackData =
-        OicCallbackData::New(jsClient, Local<Function>::Cast(info[4]));
-    if (!callbackData) {
-        return;
-    }
-
-    struct sol_oic_pending *pending =
-        (sol_oic_client_find_resources((struct sol_oic_client *)client,
-        &theAddress, (const char *)*String::Utf8Value(info[2]),
-        (const char *)*String::Utf8Value(info[3]), resourceFound,
-        callbackData) == 0);
-
-    if (!pending) {
-        delete callbackData;
-    }
-
-    //FIXME: properly expose pending handle to JS
-    info.GetReturnValue().Set(Nan::New(pending));
-}
diff --git a/bindings/nodejs/src/functions/oic-client-resource-ops.cc b/bindings/nodejs/src/functions/oic-client-resource-ops.cc
deleted file mode 100644
index d45b5a5c..00000000
--- a/bindings/nodejs/src/functions/oic-client-resource-ops.cc
+++ /dev/null
@@ -1,288 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <sol-oic-client.h>
-
-#include "../common.h"
-#include "../structures/network.h"
-#include "../structures/oic-client.h"
-#include "../structures/oic-map.h"
-
-using namespace v8;
-
-class OicClientRequest: public OicCallbackData {
-protected:
-    OicClientRequest(bool _isOneShot = true): OicCallbackData(),
-        isOneShot(_isOneShot) {}
-public:
-    static OicClientRequest *New(Local<Object> jsClient,
-        Local<Function> jsCallback) {
-        OicClientRequest *request = new OicClientRequest;
-        if (!request) {
-            Nan::ThrowError("Failed to allocate OicClientRequest");
-        } else if (!request->init(jsClient, jsCallback)) {
-            delete request;
-            request = 0;
-        }
-        return request;
-    }
-    bool isOneShot;
-};
-
-static void requestAnswered(void *data, enum sol_coap_response_code code,
-    struct sol_oic_client *client,
-    const struct sol_network_link_addr *address,
-    const struct sol_oic_map_reader *response) {
-    Nan::HandleScope scope;
-    OicClientRequest *request = (OicClientRequest *)data;
-    Local<Value> arguments[4] = {
-        Nan::New(code),
-        Nan::New<Object>(*(request->jsClient)),
-        js_sol_network_link_addr(address),
-        js_sol_oic_map_reader(response)
-    };
-
-    // We need to copy the value of isOneShot because in the case of
-    // observation, the JS callback we invoke may cause the deletion of request
-    // if it ends up calling the unobserve() binding. In such a case we can no
-    // longer dereference request after having called the callback.
-    bool isOneShot = request->isOneShot;
-
-    request->callback->Call(4, arguments);
-
-    if (isOneShot) {
-        delete request;
-    }
-}
-
-static bool request_setup(Local<Object> jsClient, Local<Object> jsResource,
-    struct sol_oic_client **client, struct sol_oic_resource **resource) {
-    *client = (struct sol_oic_client *)SolOicClient::Resolve(jsClient);
-    *resource =
-        (struct sol_oic_resource *)SolOicClientResource::Resolve(jsResource);
-    if (!((*client) && (*resource))) {
-        return false;
-    }
-    return true;
-}
-
-static Local<Value> do_request(
-    struct sol_oic_request *(*create_request_cAPI)(
-        enum sol_coap_method method,
-        struct sol_oic_resource *res),
-    Local<Object> jsClient, Local<Object> jsResource, enum sol_coap_method method,
-    Local<Value> jsPayload, Local<Function> jsCallback) {
-    Nan::Persistent<Object> *persistentPayload = 0;
-    struct sol_oic_client *client = 0;
-    struct sol_oic_resource *resource = 0;
-    struct sol_oic_request *oic_request;
-    struct sol_oic_pending *pending;
-
-    if (!request_setup(jsClient, jsResource, &client, &resource)) {
-        return Nan::Undefined();
-    }
-
-    OicClientRequest *request = OicClientRequest::New(jsClient, jsCallback);
-    if (!request) {
-        return Nan::Undefined();
-    }
-
-    if (!jsPayload->IsNull()) {
-        persistentPayload =
-            new Nan::Persistent<Object>(
-                Nan::To<Object>(jsPayload).ToLocalChecked());
-        if (!persistentPayload) {
-            delete request;
-            return Nan::Undefined();
-        }
-    }
-
-    oic_request = create_request_cAPI(method, resource);
-    if (oic_request &&
-        oic_map_writer_callback(persistentPayload,
-        sol_oic_client_request_get_writer(oic_request))) {
-        pending = sol_oic_client_request(client, oic_request,
-            requestAnswered, request) == 0;
-    }
-
-    if (persistentPayload) {
-        persistentPayload->Reset();
-        delete persistentPayload;
-    }
-
-    if (!pending) {
-        delete request;
-    }
-
-    //FIXME: properly expose pending handle to JS
-    return Nan::New(pending);
-}
-
-#define DO_REQUEST(info, cAPI) \
-    do { \
-        VALIDATE_ARGUMENT_COUNT(info, 5); \
-        VALIDATE_ARGUMENT_TYPE(info, 0, IsObject); \
-        VALIDATE_ARGUMENT_TYPE(info, 1, IsObject); \
-        VALIDATE_ARGUMENT_TYPE(info, 2, IsUint32); \
-        VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 3, IsObject); \
-        VALIDATE_ARGUMENT_TYPE(info, 4, IsFunction); \
-        info.GetReturnValue().Set(do_request((cAPI), \
-            Nan::To<Object>(info[0]).ToLocalChecked(), \
-            Nan::To<Object>(info[1]).ToLocalChecked(), \
-            (enum sol_coap_method)Nan::To<uint32_t>(info[2]).FromJust(), \
-            info[3], Local<Function>::Cast(info[4]))); \
-    } while(0)
-
-NAN_METHOD(bind_sol_oic_client_request) {
-    DO_REQUEST(info, sol_oic_client_request_new);
-}
-
-NAN_METHOD(bind_sol_oic_client_resource_non_confirmable_request) {
-    DO_REQUEST(info, sol_oic_client_non_confirmable_request_new);
-}
-
-typedef int (*ObserveAPI)(
-    struct sol_oic_client *client,
-    struct sol_oic_resource *res,
-    void(*callback)(
-        void *data,
-        enum sol_coap_response_code response_code,
-        struct sol_oic_client *cli,
-        const struct sol_network_link_addr *addr,
-        const struct sol_oic_map_reader *repr_map),
-    const void *data,
-    bool observe);
-
-class OicClientObservation : public OicClientRequest {
-protected:
-    OicClientObservation(ObserveAPI _cAPI): OicClientRequest(false),
-        cAPI(_cAPI) {}
-public:
-    bool init(Local<Object> jsClient, Local<Object> _jsResource,
-        Local<Function> jsCallback) {
-        jsResource =
-            new Nan::Persistent<Object>(_jsResource);
-        if (!jsResource) {
-            Nan::ThrowError(
-                "OicClientObservation: Failed to allocate resource");
-            return false;
-        }
-        if (!OicCallbackData::init(jsClient, jsCallback)) {
-            jsResource->Reset();
-            delete jsResource;
-            return false;
-        }
-        return true;
-    }
-    static OicClientObservation *New(Local<Object> jsClient,
-        Local<Object> jsResource, Local<Function> jsCallback,
-        ObserveAPI cAPI) {
-        OicClientObservation *observation = new OicClientObservation(cAPI);
-        if (!observation) {
-            Nan::ThrowError("Failed to allocate OicClientObservation");
-        } else if (!observation->init(jsClient, jsResource, jsCallback)) {
-            delete observation;
-            observation = 0;
-        }
-        return observation;
-    }
-    virtual ~OicClientObservation() {
-        if (jsResource) {
-            jsResource->Reset();
-            delete jsResource;
-        }
-    }
-    Nan::Persistent<Object> *jsResource;
-    ObserveAPI cAPI;
-};
-
-class SolOicObservation : public JSHandle<SolOicObservation> {
-public:
-    static const char *jsClassName() { return "SolOicObservation"; }
-};
-
-Local<Value> do_observe(ObserveAPI cAPI, Local<Object> jsClient,
-    Local<Object> jsResource, Local<Function> jsCallback) {
-
-    struct sol_oic_client *client = 0;
-    struct sol_oic_resource *resource = 0;
-    if (!request_setup(jsClient, jsResource, &client, &resource)) {
-        return Nan::Undefined();
-    }
-
-    OicClientObservation *observation =
-        OicClientObservation::New(jsClient, jsResource, jsCallback, cAPI);
-    if (!observation) {
-        return Nan::Undefined();
-    }
-
-    if (cAPI(client, resource, requestAnswered, observation, true) < 0) {
-        delete observation;
-        return Nan::Undefined();
-    }
-
-    return SolOicObservation::New(observation);
-}
-
-#define DO_OBSERVE(cAPI) \
-    do { \
-        VALIDATE_ARGUMENT_COUNT(info, 3); \
-        VALIDATE_ARGUMENT_TYPE(info, 0, IsObject); \
-        VALIDATE_ARGUMENT_TYPE(info, 1, IsObject); \
-        VALIDATE_ARGUMENT_TYPE(info, 2, IsFunction); \
-        info.GetReturnValue().Set(do_observe((cAPI),\
-            Nan::To<Object>(info[0]).ToLocalChecked(), \
-            Nan::To<Object>(info[1]).ToLocalChecked(), \
-            Local<Function>::Cast(info[2]))); \
-    } while(0)
-
-NAN_METHOD(bind_sol_oic_client_resource_observe) {
-    DO_OBSERVE(sol_oic_client_resource_set_observable);
-}
-
-NAN_METHOD(bind_sol_oic_client_resource_observe_non_confirmable) {
-    DO_OBSERVE(sol_oic_client_resource_set_observable_non_confirmable);
-}
-
-NAN_METHOD(bind_sol_oic_client_resource_unobserve) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-
-    Local<Object> jsObservation = Nan::To<Object>(info[0]).ToLocalChecked();
-    OicClientObservation *observation = (OicClientObservation *)
-        SolOicObservation::Resolve(jsObservation);
-    if (!observation) {
-        return;
-    }
-
-    struct sol_oic_client *client = 0;
-    struct sol_oic_resource *resource = 0;
-    if (!request_setup(Nan::New(*(observation->jsClient)),
-        Nan::New(*(observation->jsResource)), &client, &resource)) {
-        return;
-    }
-
-    bool result = (observation->cAPI(client, resource, requestAnswered,
-        observation, false) == 0);
-    if (result) {
-        Nan::SetInternalFieldPointer(jsObservation, 0, 0);
-        delete observation;
-    }
-
-    info.GetReturnValue().Set(Nan::New(result));
-}
diff --git a/bindings/nodejs/src/functions/oic-server.cc b/bindings/nodejs/src/functions/oic-server.cc
deleted file mode 100644
index 8ee63b87..00000000
--- a/bindings/nodejs/src/functions/oic-server.cc
+++ /dev/null
@@ -1,272 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <map>
-#include <string.h>
-#include <nan.h>
-#include <sol-oic-server.h>
-
-#include "../common.h"
-#include "../hijack.h"
-#include "../structures/js-handle.h"
-#include "../structures/network.h"
-#include "../structures/oic-map.h"
-
-using namespace v8;
-
-class SolOicServerResource : public JSHandle<SolOicServerResource> {
-public:
-    static const char *jsClassName() { return "SolOicServerResource"; }
-};
-
-enum OicServerMethod {
-    OIC_SERVER_GET = 0,
-    OIC_SERVER_PUT = 1,
-    OIC_SERVER_POST = 2,
-    OIC_SERVER_DEL = 3,
-    OIC_SERVER_METHOD_COUNT = 4
-};
-static const char *keys[4] = { "get", "put", "post", "del" };
-
-class ResourceInfo {
-    ResourceInfo(): hijackRefWasSuccessful(false), resource(0) {
-        handlers[0] = handlers[1] = handlers[2] = handlers[3] = 0;
-    }
-    bool hijackRefWasSuccessful;
-public:
-    bool init(Local<Object> definition) {
-        for (int index = 0; index < OIC_SERVER_METHOD_COUNT; index++) {
-            Local<Value> value =
-                Nan::Get(definition, Nan::New(keys[index]).ToLocalChecked())
-                    .ToLocalChecked();
-            if (value->IsFunction()) {
-                handlers[index] =
-                    new Nan::Callback(Local<Function>::Cast(value));
-                if (!handlers[index]) {
-                    return false;
-                }
-            }
-        }
-        hijackRefWasSuccessful = hijack_ref();
-        return hijackRefWasSuccessful;
-    }
-    virtual ~ResourceInfo() {
-        for (int index = 0; index < OIC_SERVER_METHOD_COUNT; index++) {
-            delete handlers[index];
-        }
-        if (hijackRefWasSuccessful) {
-            hijack_unref();
-        }
-    }
-    static ResourceInfo *New(Local<Object> definition) {
-        ResourceInfo *info = new ResourceInfo;
-        if (!info->init(definition)) {
-            Nan::ThrowError("Failed to allocate ResourceInfo");
-            delete info;
-            info = 0;
-        }
-        return info;
-    }
-    struct sol_oic_server_resource *resource;
-    Nan::Callback *handlers[4];
-};
-
-#define ENTITY_HANDLER_SIGNATURE \
-    void *data, \
-    struct sol_oic_request *request
-
-static int entityHandler(ENTITY_HANDLER_SIGNATURE,
-    enum OicServerMethod method) {
-    Nan::HandleScope scope;
-    enum sol_coap_response_code returnValue = SOL_COAP_RESPONSE_CODE_NOT_IMPLEMENTED;
-    struct ResourceInfo *info = (struct ResourceInfo *)data;
-    struct sol_oic_response *response = NULL;
-    Local<Object> outputPayload = Nan::New<Object>();
-    Local<Value> arguments[2] = {
-        js_sol_oic_map_reader(sol_oic_server_request_get_reader(request)),
-        outputPayload
-    };
-    //TODO: Make JS API Async
-    Nan::Callback *callback = info->handlers[method];
-    if (callback) {
-        Local<Value> jsReturnValue = callback->Call(2, arguments);
-        VALIDATE_CALLBACK_RETURN_VALUE_TYPE(jsReturnValue, IsUint32,
-            "entity handler", returnValue);
-        returnValue = (enum sol_coap_response_code)
-            Nan::To<uint32_t>(jsReturnValue).FromJust();
-
-        response = sol_oic_server_response_new(request);
-        if (!response) {
-            Nan::ThrowError("entity handler: Failed to create response");
-        }
-        if (!c_sol_oic_map_writer(outputPayload,
-            sol_oic_server_response_get_writer(response))) {
-            sol_oic_server_response_free(response);
-            Nan::ThrowError("entity handler: Failed to encode output payload");
-        }
-
-    }
-    return sol_oic_server_send_response(request, response, returnValue);
-}
-
-static int defaultGet(ENTITY_HANDLER_SIGNATURE) {
-    return entityHandler(data, request, OIC_SERVER_GET);
-}
-
-static int defaultPut(ENTITY_HANDLER_SIGNATURE) {
-    return entityHandler(data, request, OIC_SERVER_PUT);
-}
-
-static int defaultPost(ENTITY_HANDLER_SIGNATURE) {
-    return entityHandler(data, request, OIC_SERVER_POST);
-}
-
-static int defaultDel(ENTITY_HANDLER_SIGNATURE) {
-    return entityHandler(data, request, OIC_SERVER_DEL);
-}
-
-#define ASSIGN_STR_SLICE_MEMBER_FROM_PROPERTY(to, from, message, member) \
-    do { \
-        to.member.data = strdup((const char *)*String::Utf8Value( \
-            Nan::Get(from, Nan::New(#member).ToLocalChecked()) \
-                .ToLocalChecked())); \
-        if (!to.member.data) { \
-            message = "Failed to allocate memory for " #member; \
-            goto member##_failed; \
-        } \
-        to.member.len = strlen(to.member.data); \
-    } while(0)
-
-static bool c_sol_oic_resource_type(Local<Object> js,
-    struct sol_oic_resource_type *definition) {
-    const char *error = 0;
-    struct sol_oic_resource_type local = {
-		SOL_SET_API_VERSION(.api_version = SOL_OIC_RESOURCE_TYPE_API_VERSION,)
-        .resource_type = {0, 0},
-        .interface = {0, 0},
-        .path = {0, 0},
-        .get = { .handle = defaultGet },
-        .put = { .handle = defaultPut },
-        .post = { .handle = defaultPost },
-        .del = { .handle = defaultDel }
-    };
-
-    ASSIGN_STR_SLICE_MEMBER_FROM_PROPERTY(local, js, error, resource_type);
-    ASSIGN_STR_SLICE_MEMBER_FROM_PROPERTY(local, js, error, interface);
-    ASSIGN_STR_SLICE_MEMBER_FROM_PROPERTY(local, js, error, path);
-
-    *definition = local;
-    return true;
-
-path_failed:
-    free((void *)(local.interface.data));
-interface_failed:
-    free((void *)(local.resource_type.data));
-resource_type_failed:
-    Nan::ThrowError(error);
-    return false;
-}
-
-NAN_METHOD(bind_sol_oic_server_register_resource) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsUint32);
-
-    struct sol_oic_server_resource *resource = 0;
-
-    struct sol_oic_resource_type resourceType;
-    if (!c_sol_oic_resource_type(Nan::To<Object>(info[0]).ToLocalChecked(),
-        &resourceType)) {
-        return;
-    }
-
-    struct ResourceInfo *resourceInfo =
-        ResourceInfo::New(Nan::To<Object>(info[0]).ToLocalChecked());
-    if (!resourceInfo) {
-        return;
-    }
-
-    resource = sol_oic_server_register_resource(&resourceType, resourceInfo,
-        (enum sol_oic_resource_flag)(Nan::To<uint32_t>(info[1]).FromJust()));
-    resourceInfo->resource = resource;
-
-    free((void *)(resourceType.resource_type.data));
-    free((void *)(resourceType.interface.data));
-    free((void *)(resourceType.path.data));
-
-    if (!resource) {
-        delete resourceInfo;
-    } else {
-        info.GetReturnValue().Set(SolOicServerResource::New(resourceInfo));
-    }
-}
-
-NAN_METHOD(bind_sol_oic_server_unregister_resource) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    Local<Object> jsResourceInfo = Nan::To<Object>(info[0]).ToLocalChecked();
-    struct ResourceInfo *resourceInfo = (struct ResourceInfo *)
-        SolOicServerResource::Resolve(jsResourceInfo);
-    if (!resourceInfo) {
-        return;
-    }
-    sol_oic_server_unregister_resource(resourceInfo->resource);
-    delete resourceInfo;
-    Nan::SetInternalFieldPointer(jsResourceInfo, 0, 0);
-}
-
-NAN_METHOD(bind_sol_oic_server_notify) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsObject);
-    struct sol_oic_response *notification;
-    bool result = true;
-    struct ResourceInfo *resourceInfo = (struct ResourceInfo *)
-        SolOicServerResource::Resolve(
-            Nan::To<Object>(info[0]).ToLocalChecked());
-    if (!resourceInfo) {
-        return;
-    }
-
-    notification = sol_oic_server_notification_new(resourceInfo->resource);
-    if (!notification) {
-        info.GetReturnValue().Set(Nan::New(false));
-        return;
-    }
-
-    Nan::Persistent<Object> *jsPayload = 0;
-    if (!info[1]->IsNull()) {
-        jsPayload = new Nan::Persistent<Object>(
-            Nan::To<Object>(info[1]).ToLocalChecked());
-    }
-
-    if (jsPayload) {
-        result = oic_map_writer_callback(jsPayload, sol_oic_server_response_get_writer(notification));
-    }
-
-    if (result)
-        result = sol_oic_server_notify(notification) == 0;
-    else
-        sol_oic_server_response_free(notification);
-    info.GetReturnValue().Set(Nan::New(result));
-
-    if (jsPayload) {
-        jsPayload->Reset();
-        delete jsPayload;
-    }
-}
diff --git a/bindings/nodejs/src/functions/pwm.cc b/bindings/nodejs/src/functions/pwm.cc
deleted file mode 100644
index 76f5ca66..00000000
--- a/bindings/nodejs/src/functions/pwm.cc
+++ /dev/null
@@ -1,240 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <sol-pwm.h>
-
-#include <v8.h>
-#include <node.h>
-#include <nan.h>
-
-#include "../common.h"
-#include "../structures/js-handle.h"
-#include "../structures/sol-js-pwm.h"
-
-using namespace v8;
-
-class SolPwm : public JSHandle<SolPwm> {
-public:
-    static const char *jsClassName() { return "SolPwm"; }
-};
-
-NAN_METHOD(bind_sol_pwm_open) {
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsInt32);
-    VALIDATE_ARGUMENT_TYPE(info, 2, IsObject);
-
-    int device;
-    int channel;
-    sol_pwm_config config;
-    sol_pwm *pwm = NULL;
-
-    device = info[0]->Int32Value();
-    channel = info[1]->Int32Value();
-
-    if (!c_sol_pwm_config(info[2]->ToObject(), &config)) {
-        return;
-    }
-
-    pwm = sol_pwm_open(device, channel, &config);
-    if (pwm) {
-        info.GetReturnValue().Set(SolPwm::New(pwm));
-    }
-}
-
-NAN_METHOD(bind_sol_pwm_open_raw) {
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsInt32);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsInt32);
-    VALIDATE_ARGUMENT_TYPE(info, 2, IsObject);
-
-    int device;
-    int channel;
-    sol_pwm_config config;
-    sol_pwm *pwm = NULL;
-
-    device = info[0]->Int32Value();
-    channel = info[1]->Int32Value();
-
-    if (!c_sol_pwm_config(info[2]->ToObject(), &config)) {
-        return;
-    }
-
-    pwm = sol_pwm_open_raw(device, channel, &config);
-    if (pwm) {
-        info.GetReturnValue().Set(SolPwm::New(pwm));
-    }
-}
-
-NAN_METHOD(bind_sol_pwm_open_by_label) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsString);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-
-    sol_pwm_config config;
-    sol_pwm *pwm = NULL;
-
-    if (!c_sol_pwm_config(info[1]->ToObject(), &config)) {
-        return;
-    }
-
-    pwm = sol_pwm_open_by_label((const char *)*String::Utf8Value(info[0]),
-        &config);
-
-    if (pwm) {
-        info.GetReturnValue().Set(SolPwm::New(pwm));
-    }
-}
-
-NAN_METHOD(bind_sol_pwm_close) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-
-    Local<Object> jsPwm = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_pwm *pwm = (sol_pwm *)SolPwm::Resolve(jsPwm);
-    if (!pwm)
-        return;
-
-    sol_pwm_close(pwm);
-    Nan::SetInternalFieldPointer(jsPwm, 0, 0);
-}
-
-NAN_METHOD(bind_sol_pwm_set_enabled) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsBoolean);
-
-    Local<Object> jsPwm = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_pwm *pwm = (sol_pwm *)SolPwm::Resolve(jsPwm);
-    if (!pwm)
-        return;
-
-    bool value = info[1]->BooleanValue();
-    info.GetReturnValue().Set(Nan::New(sol_pwm_set_enabled(pwm, value)));
-}
-
-NAN_METHOD(bind_sol_pwm_set_period) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsUint32);
-
-    Local<Object> jsPwm = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_pwm *pwm = (sol_pwm *)SolPwm::Resolve(jsPwm);
-    if (!pwm)
-        return;
-
-    uint32_t value = info[1]->Uint32Value();
-    info.GetReturnValue().Set(Nan::New(sol_pwm_set_period(pwm, value)));
-}
-
-NAN_METHOD(bind_sol_pwm_set_duty_cycle) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsUint32);
-
-    Local<Object> jsPwm = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_pwm *pwm = (sol_pwm *)SolPwm::Resolve(jsPwm);
-    if (!pwm)
-        return;
-
-    uint32_t value = info[1]->Uint32Value();
-    info.GetReturnValue().Set(Nan::New(sol_pwm_set_duty_cycle(pwm, value)));
-}
-
-
-NAN_METHOD(bind_sol_pwm_is_enabled) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-
-    Local<Object> jsPwm = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_pwm *pwm = (sol_pwm *)SolPwm::Resolve(jsPwm);
-    if (!pwm)
-        return;
-
-    info.GetReturnValue().Set(Nan::New(sol_pwm_is_enabled(pwm)));
-}
-
-NAN_METHOD(bind_sol_pwm_get_period) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-
-    Local<Object> jsPwm = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_pwm *pwm = (sol_pwm *)SolPwm::Resolve(jsPwm);
-    if (!pwm)
-        return;
-
-    info.GetReturnValue().Set(Nan::New(sol_pwm_get_period(pwm)));
-}
-
-NAN_METHOD(bind_sol_pwm_get_duty_cycle) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-
-    Local<Object> jsPwm = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_pwm *pwm = (sol_pwm *)SolPwm::Resolve(jsPwm);
-    if (!pwm)
-        return;
-
-    info.GetReturnValue().Set(Nan::New(sol_pwm_get_duty_cycle(pwm)));
-}
-
-NAN_METHOD(bind_sol_pwm_alignment_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_pwm_alignment alignment = sol_pwm_alignment_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(alignment));
-}
-
-NAN_METHOD(bind_sol_pwm_alignment_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_pwm_alignment_to_str(
-        (sol_pwm_alignment)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_pwm_polarity_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_pwm_polarity polarity = sol_pwm_polarity_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(polarity));
-}
-
-NAN_METHOD(bind_sol_pwm_polarity_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_pwm_polarity_to_str(
-        (sol_pwm_polarity)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
diff --git a/bindings/nodejs/src/functions/simple.cc b/bindings/nodejs/src/functions/simple.cc
deleted file mode 100644
index d06da0f8..00000000
--- a/bindings/nodejs/src/functions/simple.cc
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include "../common.h"
-
-#include <sol-platform.h>
-
-using namespace v8;
-
-#define RETURN_CONSTANT_STRING_NO_PARAMS(functionName) \
-    do { \
-        VALIDATE_ARGUMENT_COUNT(info, 0); \
-        const char *theReturnValue = functionName(); \
-        if (theReturnValue) { \
-            info.GetReturnValue().Set(Nan::New(theReturnValue).ToLocalChecked()); \
-        } else { \
-            info.GetReturnValue().Set(Nan::Null()); \
-        } \
-    } while(0)
-
-NAN_METHOD(bind_sol_platform_get_machine_id) {
-    RETURN_CONSTANT_STRING_NO_PARAMS(sol_platform_get_machine_id);
-}
-NAN_METHOD(bind_sol_platform_get_hostname) {
-    RETURN_CONSTANT_STRING_NO_PARAMS(sol_platform_get_hostname);
-}
-NAN_METHOD(bind_sol_platform_get_board_name) {
-    RETURN_CONSTANT_STRING_NO_PARAMS(sol_platform_get_board_name);
-}
-NAN_METHOD(bind_sol_platform_get_os_version) {
-    RETURN_CONSTANT_STRING_NO_PARAMS(sol_platform_get_os_version);
-}
-NAN_METHOD(bind_sol_platform_get_serial_number) {
-    RETURN_CONSTANT_STRING_NO_PARAMS(sol_platform_get_serial_number);
-}
-NAN_METHOD(bind_sol_platform_get_sw_version) {
-    RETURN_CONSTANT_STRING_NO_PARAMS(sol_platform_get_sw_version);
-}
-NAN_METHOD(bind_sol_platform_get_timezone) {
-    RETURN_CONSTANT_STRING_NO_PARAMS(sol_platform_get_timezone);
-}
-
-NAN_METHOD(bind_sol_platform_get_locale) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-    const char *returnValue = sol_platform_get_locale(
-        (enum sol_platform_locale_category)info[0]->Int32Value());
-    if (returnValue) {
-        info.GetReturnValue().Set(Nan::New(returnValue).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_platform_get_service_state) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-    info.GetReturnValue().Set(Nan::New((int)sol_platform_get_service_state(
-        (const char *)*String::Utf8Value(info[0]))));
-}
-
-NAN_METHOD(bind_sol_platform_get_state) {
-    VALIDATE_ARGUMENT_COUNT(info, 0);
-    info.GetReturnValue().Set(Nan::New(sol_platform_get_state()));
-}
-
-NAN_METHOD(bind_sol_platform_get_system_clock) {
-    VALIDATE_ARGUMENT_COUNT(info, 0);
-    info.GetReturnValue().Set(
-        Nan::New((double)sol_platform_get_system_clock()));
-}
-
-#define RETURN_INT_SINGLE_STRING_PARAM(functionName) \
-    VALIDATE_ARGUMENT_COUNT(info, 1); \
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString); \
-    info.GetReturnValue().Set(Nan::New(functionName((const char *)*String::Utf8Value(info[0]))));
-
-NAN_METHOD(bind_sol_platform_start_service) {
-    RETURN_INT_SINGLE_STRING_PARAM(sol_platform_start_service);
-}
-NAN_METHOD(bind_sol_platform_stop_service) {
-    RETURN_INT_SINGLE_STRING_PARAM(sol_platform_stop_service);
-}
-NAN_METHOD(bind_sol_platform_restart_service) {
-    RETURN_INT_SINGLE_STRING_PARAM(sol_platform_restart_service);
-}
-NAN_METHOD(bind_sol_platform_set_hostname) {
-    RETURN_INT_SINGLE_STRING_PARAM(sol_platform_set_hostname);
-}
-NAN_METHOD(bind_sol_platform_set_target) {
-    RETURN_INT_SINGLE_STRING_PARAM(sol_platform_set_target);
-}
-NAN_METHOD(bind_sol_platform_set_timezone) {
-    RETURN_INT_SINGLE_STRING_PARAM(sol_platform_set_timezone);
-}
-NAN_METHOD(bind_sol_platform_set_system_clock) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsNumber);
-    info.GetReturnValue().Set(Nan::New(sol_platform_set_system_clock(
-        (int64_t)info[0]->NumberValue())));
-}
-NAN_METHOD(bind_sol_platform_set_locale) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsUint32);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsString);
-    info.GetReturnValue().Set(Nan::New(sol_platform_set_locale(
-        (enum sol_platform_locale_category)info[0]->Uint32Value(),
-        (const char *)*String::Utf8Value(info[0]))));
-}
diff --git a/bindings/nodejs/src/functions/sol-network.cc b/bindings/nodejs/src/functions/sol-network.cc
deleted file mode 100644
index eb3854ee..00000000
--- a/bindings/nodejs/src/functions/sol-network.cc
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <sol-network.h>
-#include <nan.h>
-
-#include "../common.h"
-#include "../structures/network.h"
-
-using namespace v8;
-
-NAN_METHOD(bind_sol_network_link_addr_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsString);
-
-    struct sol_network_link_addr local;
-    if (!c_sol_network_link_addr(Nan::To<Object>(info[0]).ToLocalChecked(),
-        &local)) {
-        return;
-    }
-    const struct sol_network_link_addr *result =
-        sol_network_link_addr_from_str(&local,
-            (const char *)*String::Utf8Value(info[1]));
-    if (result) {
-        info.GetReturnValue().Set(js_sol_network_link_addr(result));
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
diff --git a/bindings/nodejs/src/functions/sol-platform-monitors.cc b/bindings/nodejs/src/functions/sol-platform-monitors.cc
deleted file mode 100644
index 4908de62..00000000
--- a/bindings/nodejs/src/functions/sol-platform-monitors.cc
+++ /dev/null
@@ -1,229 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <string.h>
-#include <nan.h>
-#include <sol-platform.h>
-
-#include "../hijack.h"
-#include "../common.h"
-#include "../structures/js-handle.h"
-
-using namespace v8;
-
-class SolPlatformMonitor: public JSHandle<SolPlatformMonitor> {
-public:
-    static const char *jsClassName() { return "SolPlatformMonitor"; }
-};
-
-#define ADD_MONITOR(name, marshaller) \
-    do { \
-        VALIDATE_ARGUMENT_COUNT(info, 1); \
-        VALIDATE_ARGUMENT_TYPE(info, 0, IsFunction); \
-        int result; \
-\
-        if (!hijack_ref()) { \
-            return; \
-        } \
-\
-        Nan::Callback *callback = \
-            new Nan::Callback(Local<Function>::Cast(info[0])); \
-        if (!callback) { \
-            result = -ENOMEM; \
-            goto error; \
-        } \
-\
-        result = sol_platform_add_##name##_monitor((marshaller), callback); \
-        if (result) { \
-            goto free_callback_error; \
-        } \
-\
-        info.GetReturnValue().Set(SolPlatformMonitor::New(callback)); \
-        return; \
-    free_callback_error: \
-        delete callback; \
-    error: \
-        hijack_unref(); \
-        Nan::ThrowError(strerror(-result)); \
-    } while(0)
-
-#define DEL_MONITOR(name, marshaller) \
-    do { \
-        VALIDATE_ARGUMENT_COUNT(info, 1); \
-        VALIDATE_ARGUMENT_TYPE(info, 0, IsObject); \
-        int result; \
-        Local<Object> jsHandle = Nan::To<Object>(info[0]).ToLocalChecked(); \
-        Nan::Callback *callback = \
-            (Nan::Callback *)SolPlatformMonitor::Resolve(jsHandle); \
-        if (!(callback && hijack_unref())) { \
-            return; \
-        } \
-        result = sol_platform_del_##name##_monitor((marshaller), callback); \
-        if (result) { \
-            hijack_ref(); \
-            return Nan::ThrowError(strerror(-result)); \
-        } \
-\
-        delete callback; \
-        Nan::SetInternalFieldPointer(jsHandle, 0, 0); \
-        info.GetReturnValue().Set(Nan::New(result)); \
-    } while(0)
-
-static void stringMonitor(void *data, const char *newValue) {
-    Nan::HandleScope scope;
-    Local<Value> arguments[1] = {Nan::New(newValue).ToLocalChecked()};
-    ((Nan::Callback *)data)->Call(1, arguments);
-}
-
-NAN_METHOD(bind_sol_platform_add_hostname_monitor) {
-    ADD_MONITOR(hostname, stringMonitor);
-}
-
-NAN_METHOD(bind_sol_platform_del_hostname_monitor) {
-    DEL_MONITOR(hostname, stringMonitor);
-}
-
-NAN_METHOD(bind_sol_platform_add_timezone_monitor) {
-    ADD_MONITOR(timezone, stringMonitor);
-}
-
-NAN_METHOD(bind_sol_platform_del_timezone_monitor) {
-    DEL_MONITOR(timezone, stringMonitor);
-}
-
-static void localeMonitor(void *data,
-    enum sol_platform_locale_category category, const char *locale) {
-    Nan::HandleScope scope;
-    Local<Value> arguments[2] = {
-        Nan::New(category),
-        Nan::New(locale).ToLocalChecked()
-    };
-    ((Nan::Callback *)data)->Call(2, arguments);
-}
-
-NAN_METHOD(bind_sol_platform_add_locale_monitor) {
-    ADD_MONITOR(locale, localeMonitor);
-}
-
-NAN_METHOD(bind_sol_platform_del_locale_monitor) {
-    DEL_MONITOR(locale, localeMonitor);
-}
-
-static void stateMonitor(void *data, enum sol_platform_state state) {
-    Nan::HandleScope scope;
-    Local<Value> arguments[1] = {Nan::New(state)};
-    ((Nan::Callback *)data)->Call(1, arguments);
-}
-
-NAN_METHOD(bind_sol_platform_add_state_monitor) {
-    ADD_MONITOR(state, stateMonitor);
-}
-
-NAN_METHOD(bind_sol_platform_del_state_monitor) {
-    DEL_MONITOR(state, stateMonitor);
-}
-
-static void systemClockMonitor(void *data, int64_t timestamp) {
-    Nan::HandleScope scope;
-    Local<Value> arguments[1] = {
-        Nan::New<Date>((double)timestamp).ToLocalChecked()
-    };
-    ((Nan::Callback *)data)->Call(1, arguments);
-}
-
-NAN_METHOD(bind_sol_platform_add_system_clock_monitor) {
-    ADD_MONITOR(system_clock, systemClockMonitor);
-}
-
-NAN_METHOD(bind_sol_platform_del_system_clock_monitor) {
-    DEL_MONITOR(system_clock, systemClockMonitor);
-}
-
-class ServiceInfo {
-public:
-    ServiceInfo(Local<Function> _jsCallback, const char *_service):
-        callback(new Nan::Callback(_jsCallback)), service(strdup(_service)) {}
-    ~ServiceInfo() {
-        delete callback;
-        free(service);
-    }
-    Nan::Callback *callback;
-    char *service;
-};
-
-static void serviceMonitor(void *data, const char *service,
-    enum sol_platform_service_state state) {
-    Nan::HandleScope scope;
-    Local<Value> arguments[2] = {
-        Nan::New(service).ToLocalChecked(),
-        Nan::New(state)
-    };
-    ((Nan::Callback *)data)->Call(2, arguments);
-}
-
-NAN_METHOD(bind_sol_platform_add_service_monitor) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsFunction);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsString);
-    int result;
-
-    if (!hijack_ref()) {
-        return;
-    }
-
-    ServiceInfo *serviceInfo = new ServiceInfo(
-        Local<Function>::Cast(info[0]),
-        (const char *)*String::Utf8Value(info[1]));
-    if (!serviceInfo) {
-        result = -ENOMEM;
-        goto error;
-    }
-
-    result = sol_platform_add_service_monitor(serviceMonitor,
-        serviceInfo->service, serviceInfo->callback);
-    if (result) {
-        goto free_callback_error;
-    }
-
-    info.GetReturnValue().Set(SolPlatformMonitor::New(serviceInfo));
-    return;
-free_callback_error:
-    delete serviceInfo;
-error:
-    hijack_unref();
-    Nan::ThrowError(strerror(-result));
-}
-
-NAN_METHOD(bind_sol_platform_del_service_monitor) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsObject);
-    int result;
-    ServiceInfo *serviceInfo = (ServiceInfo *)
-        SolPlatformMonitor::Resolve(Nan::To<Object>(info[0]).ToLocalChecked());
-    if (!(serviceInfo && hijack_unref())) {
-        return;
-    }
-    result = sol_platform_del_service_monitor(serviceMonitor,
-        serviceInfo->service, serviceInfo->callback);
-    if (result) {
-        hijack_ref();
-        return Nan::ThrowError(strerror(-result));
-    }
-    delete serviceInfo;
-    info.GetReturnValue().Set(Nan::New(result));
-}
diff --git a/bindings/nodejs/src/functions/spi.cc b/bindings/nodejs/src/functions/spi.cc
deleted file mode 100644
index 12039cab..00000000
--- a/bindings/nodejs/src/functions/spi.cc
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <node.h>
-#include <nan.h>
-#include <sol-spi.h>
-
-#include "../common.h"
-#include "../data.h"
-#include "../hijack.h"
-#include "../structures/js-handle.h"
-#include "../structures/sol-js-spi.h"
-
-using namespace v8;
-
-class SolSpi : public JSHandle<SolSpi> {
-public:
-    static const char *jsClassName() { return "SolSpi"; }
-};
-
-NAN_METHOD(bind_sol_spi_open) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsUint32);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-
-    sol_spi_config config;
-    sol_spi *spi = NULL;
-
-    if (!c_sol_spi_config(info[1]->ToObject(), &config)) {
-        return;
-    }
-
-    spi = sol_spi_open(info[0]->Uint32Value(), &config);
-    if (spi) {
-        info.GetReturnValue().Set(SolSpi::New(spi));
-    }
-}
-
-NAN_METHOD(bind_sol_spi_close) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsObject);
-    Local<Object> jsSpi = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_spi *spi= (sol_spi *)SolSpi::Resolve(jsSpi);
-    if (!spi)
-        return;
-
-    sol_spi_close(spi);
-    Nan::SetInternalFieldPointer(jsSpi, 0, 0);
-}
-
-static void sol_spi_transfer_cb(void *cb_data, struct sol_spi *spi,
-    const uint8_t *tx, uint8_t *rx, ssize_t status) {
-    Nan::HandleScope scope;
-    Nan::Callback *callback = (Nan::Callback *)cb_data;
-    Local<Value> txBuffer, rxBuffer;
-
-    if (status >= 0) {
-        txBuffer = Nan::NewBuffer((char *)tx, status).ToLocalChecked();
-        rxBuffer = Nan::NewBuffer((char *)rx, status).ToLocalChecked();
-    } else {
-        free((void *)tx);
-        free(rx);
-        txBuffer = Nan::Null();
-        rxBuffer = Nan::Null();
-    }
-
-    Local<Value> arguments[3] = {
-        txBuffer,
-        rxBuffer,
-        Nan::New((int)status)
-    };
-
-    callback->Call(3, arguments);
-    delete callback;
-    hijack_unref();
-}
-
-NAN_METHOD(bind_sol_spi_transfer) {
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 2, IsFunction);
-    Local<Object> jsSpi = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_spi *spi= (sol_spi *)SolSpi::Resolve(jsSpi);
-    if (!spi)
-        return;
-
-    if (!node::Buffer::HasInstance(info[1])) {
-        Nan::ThrowTypeError("Argument 1 must be a node Buffer");
-        return;
-    }
-
-    size_t length = node::Buffer::Length(info[1]);
-    uint8_t *txBuffer = (uint8_t *) calloc(length, sizeof(uint8_t));
-    if (!txBuffer) {
-        Nan::ThrowError("Failed to allocate memory for output buffer");
-        return;
-    }
-
-    uint8_t *rxBuffer = (uint8_t *) calloc(length, sizeof(uint8_t));
-    if (!rxBuffer) {
-        free(txBuffer);
-        Nan::ThrowError("Failed to allocate memory for input buffer");
-        return;
-    }
-
-    if (!hijack_ref()) {
-        free(txBuffer);
-        free(rxBuffer);
-        return;
-    }
-
-    memcpy(txBuffer, node::Buffer::Data(info[1]), length);
-    Nan::Callback *callback =
-        new Nan::Callback(Local<Function>::Cast(info[2]));
-    int returnValue =
-        sol_spi_transfer(spi, txBuffer, rxBuffer, length,
-            sol_spi_transfer_cb, callback);
-
-    if (returnValue < 0) {
-        free(txBuffer);
-        free(rxBuffer);
-        delete callback;
-        hijack_unref();
-    }
-
-    info.GetReturnValue().Set(Nan::New(returnValue));
-}
-
-NAN_METHOD(bind_sol_spi_mode_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_spi_mode mode = sol_spi_mode_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(mode));
-}
-
-NAN_METHOD(bind_sol_spi_mode_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_spi_mode_to_str(
-        (sol_spi_mode)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
diff --git a/bindings/nodejs/src/functions/uart.cc b/bindings/nodejs/src/functions/uart.cc
deleted file mode 100644
index 8c69ffb9..00000000
--- a/bindings/nodejs/src/functions/uart.cc
+++ /dev/null
@@ -1,295 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <sol-buffer.h>
-#include <sol-str-slice.h>
-#include <sol-uart.h>
-#include <node.h>
-#include <nan.h>
-
-#include "../common.h"
-#include "../hijack.h"
-#include "../structures/sol-js-uart.h"
-#include "../structures/js-handle.h"
-
-using namespace v8;
-
-class SolUART : public JSHandle<SolUART> {
-public:
-    static const char *jsClassName() { return "SolUART"; }
-};
-
-static ssize_t sol_uart_on_data_callback(void *user_data,
-    struct sol_uart *uart, const struct sol_buffer *buf) {
-    Nan::HandleScope scope;
-    sol_uart_data *uart_data = (sol_uart_data *)user_data;
-    if (!uart_data)
-        return 0;
-
-    Nan::Callback *callback = uart_data->on_data_cb;
-    if (!callback)
-        return 0;
-
-    struct sol_str_slice slice;
-    slice = sol_buffer_get_slice(buf);
-    Local<Value> buffer =
-        Nan::CopyBuffer(slice.data, slice.len).ToLocalChecked();
-
-    Local<Value> arguments[1] = {
-        buffer
-    };
-    callback->Call(1, arguments);
-
-    return slice.len;
-}
-
-static void sol_uart_on_feed_done_callback(void *user_data,
-    struct sol_uart *uart, struct sol_blob *blob, int status) {
-    Nan::HandleScope scope;
-    sol_uart_data *uart_data = (sol_uart_data *)user_data;
-    if (!uart_data)
-        return;
-
-    Local<Value> arguments[1] = {
-        Nan::New(status)
-    };
-
-    Nan::Callback *on_feed_done_cb = uart_data->on_feed_done_cb;
-    if (on_feed_done_cb)
-        on_feed_done_cb->Call(1, arguments);
-
-   // Retrieve the JS feed callback and call it
-   auto iter = uart_data->feed_callbacks_map.find(blob);
-   if (iter != uart_data->feed_callbacks_map.end()) {
-       CallbackInfo *info = iter->second;
-       Nan::Callback *callback = info->callback;
-       callback->Call(1, arguments);
-       uart_data->feed_callbacks_map.erase(blob);
-       delete callback;
-
-       Nan::Persistent<Value> *js_buffer = info->js_buffer;
-       js_buffer->Reset();
-       delete js_buffer;
-       delete info;
-   }
-}
-
-NAN_METHOD(bind_sol_uart_open) {
-    VALIDATE_ARGUMENT_COUNT(info, 2);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsString);
-    VALIDATE_ARGUMENT_TYPE(info, 1, IsObject);
-    sol_uart_config config;
-    sol_uart *uart = NULL;
-
-    if (!hijack_ref())
-        return;
-
-    sol_uart_data *uart_data = new sol_uart_data;
-    uart_data->on_data_cb = NULL;
-    uart_data->on_feed_done_cb = NULL;
-    if (!c_sol_uart_config(info[1]->ToObject(), uart_data, &config)) {
-        delete uart_data;
-        Nan::ThrowError("Unable to extract sol_uart_config\n");
-        return;
-    }
-
-    Nan::Callback *on_data_cb = uart_data->on_data_cb;
-    Nan::Callback *on_feed_done_cb = uart_data->on_feed_done_cb;
-    config.on_data = sol_uart_on_data_callback;
-    config.on_feed_done = sol_uart_on_feed_done_callback;
-
-    uart = sol_uart_open((const char *)*String::Utf8Value(info[0]), &config);
-    if (!uart) {
-        if (on_data_cb)
-            delete on_data_cb;
-        if (on_feed_done_cb)
-            delete on_feed_done_cb;
-        delete uart_data;
-        hijack_unref();
-        return;
-    }
-
-    uart_data->uart = uart;
-    info.GetReturnValue().Set(SolUART::New(uart_data));
-}
-
-NAN_METHOD(bind_sol_uart_close) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsObject);
-    Local<Object> jsUART = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_uart_data *uart_data = (sol_uart_data *)SolUART::Resolve(jsUART);
-    if (!uart_data)
-        return;
-
-    sol_uart *uart = uart_data->uart;
-    Nan::Callback *on_data_cb = uart_data->on_data_cb;
-    Nan::Callback *on_feed_done_cb = uart_data->on_feed_done_cb;
-    sol_uart_close(uart);
-
-    if (on_data_cb)
-        delete on_data_cb;
-
-    if (on_feed_done_cb)
-        delete on_feed_done_cb;
-
-    hijack_unref();
-    delete uart_data;
-    Nan::SetInternalFieldPointer(jsUART, 0, 0);
-}
-
-NAN_METHOD(bind_sol_uart_feed) {
-    VALIDATE_ARGUMENT_COUNT(info, 3);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 0, IsObject);
-    VALIDATE_ARGUMENT_TYPE_OR_NULL(info, 1, IsObject);
-    VALIDATE_ARGUMENT_TYPE(info, 2, IsFunction);
-
-    Local<Object> jsUART = Nan::To<Object>(info[0]).ToLocalChecked();
-    sol_uart_data *uart_data = (sol_uart_data *)SolUART::Resolve(jsUART);
-    if (!uart_data)
-        return;
-
-    sol_uart *uart = uart_data->uart;
-    if (!node::Buffer::HasInstance(info[1])) {
-        Nan::ThrowTypeError("Argument 1 must be a Buffer");
-        return;
-    }
-
-    size_t length = node::Buffer::Length(info[1]);
-    Nan::Persistent<Value> *js_buffer = new Nan::Persistent<Value>(info[1]);
-
-    struct sol_blob *blob;
-    blob = sol_blob_new(&SOL_BLOB_TYPE_NO_FREE_DATA, NULL,
-        node::Buffer::Data(info[1]), length);
-    if (!blob) {
-        js_buffer->Reset();
-        delete js_buffer;
-        Nan::ThrowError("Failed to allocate memory for blob");
-        return;
-    }
-
-    CallbackInfo *callback_info = new CallbackInfo;
-    callback_info->callback = new Nan::Callback(Local<Function>::Cast(info[2]));
-    callback_info->js_buffer = js_buffer;
-
-    // Map JS feed callback info to a blob
-    uart_data->feed_callbacks_map[blob] = callback_info;
-    int returnValue = sol_uart_feed(uart, blob);
-    if (returnValue < 0) {
-        uart_data->feed_callbacks_map.erase(blob);
-        js_buffer->Reset();
-        delete js_buffer;
-
-        delete callback_info->callback;
-        delete callback_info;
-    }
-
-    sol_blob_unref(blob);
-    info.GetReturnValue().Set(Nan::New(returnValue));
-}
-
-NAN_METHOD(bind_sol_uart_baud_rate_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_uart_baud_rate baud_rate = sol_uart_baud_rate_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(baud_rate));
-}
-
-NAN_METHOD(bind_sol_uart_baud_rate_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_uart_baud_rate_to_str(
-        (sol_uart_baud_rate)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_uart_data_bits_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_uart_data_bits data_bits = sol_uart_data_bits_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(data_bits));
-}
-
-NAN_METHOD(bind_sol_uart_data_bits_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_uart_data_bits_to_str(
-        (sol_uart_data_bits)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_uart_stop_bits_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_uart_stop_bits stop_bits = sol_uart_stop_bits_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(stop_bits));
-}
-
-NAN_METHOD(bind_sol_uart_stop_bits_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_uart_stop_bits_to_str(
-        (sol_uart_stop_bits)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
-
-NAN_METHOD(bind_sol_uart_parity_from_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsString);
-
-    sol_uart_parity parity = sol_uart_parity_from_str(
-        (const char *)*String::Utf8Value(info[0]));
-    info.GetReturnValue().Set(Nan::New(parity));
-}
-
-NAN_METHOD(bind_sol_uart_parity_to_str) {
-    VALIDATE_ARGUMENT_COUNT(info, 1);
-    VALIDATE_ARGUMENT_TYPE(info, 0, IsInt32);
-
-    const char *idString = sol_uart_parity_to_str(
-        (sol_uart_parity)info[0]->Int32Value());
-
-    if (idString) {
-        info.GetReturnValue().Set(Nan::New(idString).ToLocalChecked());
-    } else {
-        info.GetReturnValue().Set(Nan::Null());
-    }
-}
diff --git a/bindings/nodejs/src/hijack.cc b/bindings/nodejs/src/hijack.cc
deleted file mode 100644
index 1bd5cc14..00000000
--- a/bindings/nodejs/src/hijack.cc
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <string>
-#include <nan.h>
-#include <sol-log.h>
-#include "sol-uv-integration.h"
-#include "hijack.h"
-
-using namespace v8;
-
-static uint16_t hijack_refcount = 0;
-
-bool hijack_ref() {
-    int result = 0;
-
-    SOL_DBG("Entering");
-
-    if (hijack_refcount == UINT16_MAX) {
-        result = -ERANGE;
-        goto error;
-    }
-
-    if (hijack_refcount == 0) {
-        SOL_DBG("hijacking main loop");
-        result = hijack_main_loop();
-        if (result) {
-            goto error;
-        }
-    }
-
-    hijack_refcount++;
-    return true;
-error:
-    Nan::ThrowError((std::string("Hijack main loop: ") +
-        strerror(-result)).c_str());
-    return false;
-}
-
-bool hijack_unref() {
-    int result = 0;
-
-    SOL_DBG("Entering");
-
-    if (hijack_refcount == 0) {
-        result = -ERANGE;
-        goto error;
-    }
-
-    if (hijack_refcount == 1) {
-        SOL_DBG("releasing main loop");
-        result = release_main_loop();
-        if (result) {
-            goto error;
-        }
-    }
-
-    hijack_refcount--;
-    return true;
-error:
-    Nan::ThrowError((std::string("Release main loop: ") +
-        strerror(-result)).c_str());
-    return false;
-}
diff --git a/bindings/nodejs/src/hijack.h b/bindings/nodejs/src/hijack.h
deleted file mode 100644
index 26c6e6e6..00000000
--- a/bindings/nodejs/src/hijack.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-bool hijack_ref();
-
-bool hijack_unref();
diff --git a/bindings/nodejs/src/sol-uv-integration.c b/bindings/nodejs/src/sol-uv-integration.c
deleted file mode 100644
index e17b25fd..00000000
--- a/bindings/nodejs/src/sol-uv-integration.c
+++ /dev/null
@@ -1,234 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <stdio.h>
-#include <errno.h>
-#include <uv.h>
-#include <sol-mainloop.h>
-#include <sol-log.h>
-
-#define RESOLVE_MAINLOOP_STATE(state) \
-    ( state == MAINLOOP_HIJACKING_STARTED ? "MAINLOOP_HIJACKING_STARTED" : \
-    state == MAINLOOP_HIJACKED ? "MAINLOOP_HIJACKED" : \
-    state == MAINLOOP_RELEASING_STARTED ? "MAINLOOP_RELEASING_STARTED" : \
-    state == MAINLOOP_RELEASED ? "MAINLOOP_RELEASED" : "Unknown" )
-
-enum MainloopState {
-    MAINLOOP_HIJACKING_STARTED,
-    MAINLOOP_HIJACKED,
-    MAINLOOP_RELEASING_STARTED,
-    MAINLOOP_RELEASED
-};
-
-static enum MainloopState mainloopState = MAINLOOP_RELEASED;
-static uv_idle_t uv_idle;
-static uv_prepare_t uv_token_handle;
-static struct sol_mainloop_source *uv_loop_source = NULL;
-static struct sol_fd *uv_loop_fd = NULL;
-
-static void
-uv_idle_callback()
-{
-    SOL_DBG("Entering with state %s", RESOLVE_MAINLOOP_STATE(mainloopState));
-    if (mainloopState == MAINLOOP_HIJACKING_STARTED) {
-        SOL_DBG("running sol_run()");
-        mainloopState = MAINLOOP_HIJACKED;
-        sol_run();
-        SOL_DBG("sol_run() has returned. state is %s",
-            RESOLVE_MAINLOOP_STATE(mainloopState));
-        if (mainloopState == MAINLOOP_RELEASING_STARTED) {
-            mainloopState = MAINLOOP_RELEASED;
-        }
-    } else if ( mainloopState == MAINLOOP_HIJACKED) {
-        SOL_DBG("main loop already hijacked. Stopping idler");
-        uv_idle_stop(&uv_idle);
-    }
-}
-
-static bool
-uv_loop_source_check(void *data)
-{
-    uv_loop_t *loop = data;
-
-    uv_update_time(loop);
-
-    bool returnValue = uv_loop_alive(loop);
-    SOL_DBG("Returning %s", returnValue ? "true" : "false");
-    return returnValue;
-}
-
-static bool
-uv_loop_source_get_next_timeout(void *data, struct timespec *timeout)
-{
-    int uvTimeout = uv_backend_timeout(data);
-    bool returnValue = ( uvTimeout >= 0 ) && uv_loop_source_check(data);
-
-    SOL_DBG("uvTimeout = %d", uvTimeout);
-
-    if (returnValue) {
-        timeout->tv_sec = (int)(uvTimeout / 1000);
-        timeout->tv_nsec = (uvTimeout % 1000) * 1000000;
-    }
-    return returnValue;
-}
-
-static void
-uv_loop_source_dispatch(void *data)
-{
-    SOL_DBG("Running one uv loop iteration");
-    uv_run(data, UV_RUN_NOWAIT);
-}
-
-static const struct sol_mainloop_source_type uv_loop_source_funcs = {
-    SOL_SET_API_VERSION(.api_version = SOL_MAINLOOP_SOURCE_TYPE_API_VERSION, )
-    .prepare = NULL,
-    .get_next_timeout = uv_loop_source_get_next_timeout,
-    .check = uv_loop_source_check,
-    .dispatch = uv_loop_source_dispatch,
-    .dispose = NULL
-};
-
-static bool
-uv_loop_fd_changed(void *data, int fd, uint32_t active_flags)
-{
-    SOL_DBG("Running one uv loop iteration");
-    uv_run(data, UV_RUN_NOWAIT);
-    return true;
-}
-
-void
-uv_token_callback(uv_prepare_t *handle)
-{
-    SOL_DBG("Entering");
-}
-
-int
-hijack_main_loop()
-{
-    int returnValue;
-    uv_loop_t *uv_loop = NULL;
-
-    SOL_DBG("Entering with state %s", RESOLVE_MAINLOOP_STATE(mainloopState));
-    if (mainloopState == MAINLOOP_HIJACKED ||
-        mainloopState == MAINLOOP_HIJACKING_STARTED) {
-        return 0;
-    }
-
-    uv_loop = uv_default_loop();
-
-    // The actual hijacking starts here, inspired by node-gtk. The plan:
-    // 1. uv has two ways of letting us know that it needs to run its loop. One
-    //    is that its backend timeout is >= 0, and the other is a file
-    //    descriptor which can become readable/writable/errored. So, attach a
-    //    source to the soletta main loop which will run the uv main loop in
-    //    a non-blocking fashion. Also attach a file descriptor watch via which
-    //    uv can signal that it needs to run an iteration.
-    // 2. Attach an idler to the uv main loop and call sol_run() from it when
-    //    it first runs. This interrupts the uv main loop, because sol_run()
-    //    doesn't return but, since we've already added the above sources to
-    //    the soletta main loop in the first step, the source or the file
-    //    descriptor watch will end up running one non-blocking iteration of
-    //    the uv main loop which, in turn, will recursively call the idler we
-    //    added. At that point, the idler can remove itself from the uv main
-    //    loop. After that, only the soletta main loop runs, but it runs an
-    //    iteration of the uv main loop in a non-blocking fashion whenever the
-    //    uv main loop signals to the soletta main loop via the attached
-    //    source or the attached file descriptor watch.
-    // 3. Attach a token handle to the uv main loop which represents all
-    //    soletta open handles. This is necessary because the uv main loop
-    //    would otherwise quit when it runs out of its own handles. We remove
-    //    this token handle when we release the uv main loop so that if, at
-    //    that point, it has no more handles, it is free to cause the node.js
-    //    process to quit.
-
-    // We allocate the various needed structures only once. After that, we
-    // reuse them. We never free them, even if we release the uv main loop.
-    if (!uv_loop_source) {
-        uv_loop_source = sol_mainloop_add_source(&uv_loop_source_funcs,
-            uv_loop);
-        if (!uv_loop_source) {
-            return -ENOMEM;
-        }
-    }
-
-    if (!uv_loop_fd) {
-        uv_loop_fd = sol_fd_add(uv_backend_fd(uv_loop),
-            SOL_FD_FLAGS_IN | SOL_FD_FLAGS_OUT | SOL_FD_FLAGS_ERR,
-            uv_loop_fd_changed, uv_loop);
-        if (!uv_loop_fd) {
-            return -ENOMEM;
-        }
-    }
-
-    returnValue = uv_prepare_init(uv_loop, &uv_token_handle);
-    if (returnValue) {
-        return returnValue;
-    }
-
-    returnValue = uv_idle_init(uv_loop, &uv_idle);
-    if (returnValue) {
-        return returnValue;
-    }
-
-    SOL_DBG("Starting token handle");
-    returnValue = uv_prepare_start(&uv_token_handle, uv_token_callback);
-    if (returnValue) {
-        return returnValue;
-    }
-
-    SOL_DBG("Starting idler");
-    returnValue = uv_idle_start(&uv_idle, uv_idle_callback);
-    if (returnValue) {
-        return returnValue;
-    }
-
-    mainloopState = MAINLOOP_HIJACKING_STARTED;
-    return 0;
-}
-
-int
-release_main_loop()
-{
-    int returnValue = 0;
-
-    SOL_DBG("Entering with state %s", RESOLVE_MAINLOOP_STATE(mainloopState));
-    if (mainloopState == MAINLOOP_RELEASED ||
-        mainloopState == MAINLOOP_RELEASING_STARTED) {
-        return returnValue;
-    }
-
-    SOL_DBG("Stopping token handle");
-    returnValue = uv_prepare_stop(&uv_token_handle);
-    if (returnValue) {
-        return returnValue;
-    }
-
-    // hijack_main_loop() was called, but the idler has not run yet
-    if (mainloopState == MAINLOOP_HIJACKING_STARTED) {
-        SOL_DBG("idler has not run yet, so stopping it");
-        returnValue = uv_idle_stop(&uv_idle);
-        if (!returnValue) {
-            mainloopState = MAINLOOP_RELEASED;
-        }
-    } else {
-        SOL_DBG("quitting main loop");
-        mainloopState = MAINLOOP_RELEASING_STARTED;
-        sol_quit();
-    }
-    return returnValue;
-}
diff --git a/bindings/nodejs/src/sol-uv-integration.h b/bindings/nodejs/src/sol-uv-integration.h
deleted file mode 100644
index d2883832..00000000
--- a/bindings/nodejs/src/sol-uv-integration.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#ifdef __cplusplus
-extern "C" {
-#endif /* def __cplusplus */
-
-int hijack_main_loop();
-
-int release_main_loop();
-
-#ifdef __cplusplus
-}
-#endif /* def __cplusplus */
diff --git a/bindings/nodejs/src/structures/device-id.cc b/bindings/nodejs/src/structures/device-id.cc
deleted file mode 100644
index 786869ba..00000000
--- a/bindings/nodejs/src/structures/device-id.cc
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "device-id.h"
-
-#include <nan.h>
-
-using namespace v8;
-
-Local<Value> js_DeviceIdFromSlice(const struct sol_str_slice *slice) {
-    char returnValue[37] = "";
-    if (slice->len != 16) {
-        Nan::ThrowRangeError("Data for deviceId is not 16 bytes long");
-        return Nan::Null();
-    }
-
-    // Canonical uuid format
-    int result = snprintf(returnValue, 37,
-        "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
-        (unsigned char)(slice->data[0]), (unsigned char)(slice->data[1]),
-        (unsigned char)(slice->data[2]), (unsigned char)(slice->data[3]),
-        (unsigned char)(slice->data[4]), (unsigned char)(slice->data[5]),
-        (unsigned char)(slice->data[6]), (unsigned char)(slice->data[7]),
-        (unsigned char)(slice->data[8]), (unsigned char)(slice->data[9]),
-        (unsigned char)(slice->data[10]), (unsigned char)(slice->data[11]),
-        (unsigned char)(slice->data[12]), (unsigned char)(slice->data[13]),
-        (unsigned char)(slice->data[14]), (unsigned char)(slice->data[15]));
-
-    if (result != 36) {
-        Nan::ThrowError("Failed to convert deviceId to string");
-        return Nan::Null();
-    }
-
-    return Nan::New(returnValue).ToLocalChecked();
-}
diff --git a/bindings/nodejs/src/structures/device-id.h b/bindings/nodejs/src/structures/device-id.h
deleted file mode 100644
index 61832d81..00000000
--- a/bindings/nodejs/src/structures/device-id.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <v8.h>
-#include <sol-str-slice.h>
-
-v8::Local<v8::Value> js_DeviceIdFromSlice(const struct sol_str_slice *slice);
diff --git a/bindings/nodejs/src/structures/js-handle.cc b/bindings/nodejs/src/structures/js-handle.cc
deleted file mode 100644
index 3f74406c..00000000
--- a/bindings/nodejs/src/structures/js-handle.cc
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "js-handle.h"
-
-using namespace v8;
-
-UnrefData::UnrefData(void *_data, void (*_unref)(void *), Local<Object> js):
-    data(_data), unref(_unref), persistent(new Nan::Persistent<Object>(js)) {
-}
-
-UnrefData::~UnrefData() {
-    unref(data);
-    persistent->Reset();
-    delete persistent;
-}
diff --git a/bindings/nodejs/src/structures/js-handle.h b/bindings/nodejs/src/structures/js-handle.h
deleted file mode 100644
index f4fbbc33..00000000
--- a/bindings/nodejs/src/structures/js-handle.h
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <string>
-#include <nan.h>
-#include <sol-macros.h>
-
-template <class T> class JSHandle {
-    static Nan::Persistent<v8::FunctionTemplate> &
-    theTemplate()
-    {
-        static Nan::Persistent<v8::FunctionTemplate> returnValue;
-
-        if (SOL_UNLIKELY(returnValue.IsEmpty())) {
-            v8::Local<v8::FunctionTemplate> theTemplate =
-                Nan::New<v8::FunctionTemplate>();
-            theTemplate
-            ->SetClassName(Nan::New(T::jsClassName()).ToLocalChecked());
-            theTemplate->InstanceTemplate()->SetInternalFieldCount(1);
-            Nan::Set(Nan::GetFunction(theTemplate).ToLocalChecked(),
-                Nan::New("displayName").ToLocalChecked(),
-                Nan::New(T::jsClassName()).ToLocalChecked());
-            returnValue.Reset(theTemplate);
-        }
-        return returnValue;
-    }
-public:
-    static v8::Local<v8::Object> New(void *data)
-    {
-        v8::Local<v8::Object> returnValue =
-            Nan::GetFunction(Nan::New(theTemplate())).ToLocalChecked()
-            ->NewInstance();
-        Nan::SetInternalFieldPointer(returnValue, 0, data);
-
-        return returnValue;
-    }
-
-    // If the object is not of the expected type, or if the pointer inside the
-    // object has already been removed, then we must throw an error
-    static void *
-    Resolve(v8::Local<v8::Object> jsObject)
-    {
-        void *returnValue = 0;
-
-        if (Nan::New(theTemplate())->HasInstance(jsObject)) {
-            returnValue = Nan::GetInternalFieldPointer(jsObject, 0);
-        }
-        if (!returnValue) {
-            Nan::ThrowTypeError((std::string("Object is not of type ") +
-                T::jsClassName()).c_str());
-        }
-        return returnValue;
-    }
-};
-
-class UnrefData {
-public:
-    UnrefData(void *_data, void (*_unref)(void *), v8::Local<v8::Object> js);
-    virtual ~UnrefData();
-    void *data;
-    void (*unref)(void *);
-    Nan::Persistent<v8::Object> *persistent;
-};
-
-template <class T> class JSReffableHandle : public JSHandle<T> {
-    static void
-    InstanceIsGone(const Nan::WeakCallbackInfo<UnrefData> & data)
-    {
-        delete data.GetParameter();
-    }
-public:
-    static v8::Local<v8::Object> New(void *data)
-    {
-        v8::Local<v8::Object> theObject = JSHandle<T>::New(data);
-        T::ref(data);
-        UnrefData *unrefData = new UnrefData(data, T::unref, theObject);
-
-        unrefData->persistent->SetWeak(unrefData, InstanceIsGone,
-            Nan::WeakCallbackType::kParameter);
-        return theObject;
-    }
-};
diff --git a/bindings/nodejs/src/structures/network.cc b/bindings/nodejs/src/structures/network.cc
deleted file mode 100644
index f8270003..00000000
--- a/bindings/nodejs/src/structures/network.cc
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include "../common.h"
-#include "../data.h"
-#include "network.h"
-
-using namespace v8;
-
-bool c_sol_network_link_addr(Local<Object> jsAddress,
-    struct sol_network_link_addr *destination) {
-    struct sol_network_link_addr local;
-
-    Local<Value> jsBytesValue =
-        Nan::Get(jsAddress, Nan::New("bytes").ToLocalChecked())
-            .ToLocalChecked();
-    VALIDATE_VALUE_TYPE(jsBytesValue, IsArray, "Network address bytes array",
-        false);
-    Local<Array> jsBytes = Local<Array>::Cast(jsBytesValue);
-    if (!fillCArrayFromJSArray(local.addr.in6, 16 * sizeof(char), jsBytes)) {
-        return false;
-    }
-
-    VALIDATE_AND_ASSIGN(local, family, enum sol_network_family, IsUint32,
-        "Network address family", false, jsAddress, Uint32Value);
-    VALIDATE_AND_ASSIGN(local, port, uint16_t, IsUint32,
-        "Network address port", false, jsAddress, Uint32Value);
-
-    *destination = local;
-    return true;
-}
-
-Local<Value> js_sol_network_link_addr(
-    const struct sol_network_link_addr *c_address) {
-
-    if (!c_address) {
-        return Nan::Null();
-    }
-
-    Local<Object> returnValue = Nan::New<Object>();
-
-    Local<Array> bytes =
-        jsArrayFromBytes((unsigned char *)(c_address->addr.in6),
-            16 * sizeof(char));
-    Nan::Set(returnValue, Nan::New("bytes").ToLocalChecked(), bytes);
-
-    SET_VALUE_ON_OBJECT(returnValue, Uint32, c_address, family);
-    SET_VALUE_ON_OBJECT(returnValue, Uint32, c_address, port);
-
-    return returnValue;
-}
diff --git a/bindings/nodejs/src/structures/network.h b/bindings/nodejs/src/structures/network.h
deleted file mode 100644
index 6dd7d6fe..00000000
--- a/bindings/nodejs/src/structures/network.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <v8.h>
-#include <sol-network.h>
-
-bool c_sol_network_link_addr(v8::Local<v8::Object> jsAddress, struct sol_network_link_addr *destination);
-v8::Local<v8::Value> js_sol_network_link_addr(const struct sol_network_link_addr *c_address);
diff --git a/bindings/nodejs/src/structures/oic-client.cc b/bindings/nodejs/src/structures/oic-client.cc
deleted file mode 100644
index 341ed413..00000000
--- a/bindings/nodejs/src/structures/oic-client.cc
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <sol-oic-client.h>
-
-#include "device-id.h"
-#include "network.h"
-#include "oic-client.h"
-#include "../hijack.h"
-
-const char *SolOicClientResource::jsClassName() {
-    return "SolOicClientResource";
-}
-
-void SolOicClientResource::ref(void *data) {
-    sol_oic_resource_ref((struct sol_oic_resource *)data);
-}
-
-void SolOicClientResource::unref(void *data) {
-    sol_oic_resource_unref((struct sol_oic_resource *)data);
-}
-
-using namespace v8;
-
-static Local<Array> jsStringArrayFromStrSliceVector(
-    struct sol_vector *vector) {
-    Local<Array> jsArray = Nan::New<Array>(vector->len);
-    sol_str_slice *slice;
-    int index;
-    SOL_VECTOR_FOREACH_IDX(vector, slice, index) {
-        jsArray->Set(index,
-            Nan::New<String>(slice->data, slice->len).ToLocalChecked());
-    }
-    return jsArray;
-}
-
-Local<Object> SolOicClientResource::New(struct sol_oic_resource *resource) {
-    Local<Object> jsResource =
-        JSReffableHandle<SolOicClientResource>::New((void *)resource);
-
-    Nan::Set(jsResource, Nan::New("addr").ToLocalChecked(),
-        js_sol_network_link_addr(&(resource->addr)));
-    Nan::Set(jsResource, Nan::New("device_id").ToLocalChecked(),
-        js_DeviceIdFromSlice(&(resource->device_id)));
-    Nan::Set(jsResource, Nan::New("path").ToLocalChecked(),
-        Nan::New<String>(resource->path.data,
-            resource->path.len).ToLocalChecked());
-    Nan::Set(jsResource, Nan::New("interfaces").ToLocalChecked(),
-        jsStringArrayFromStrSliceVector(&(resource->interfaces)));
-    Nan::Set(jsResource, Nan::New("is_observed").ToLocalChecked(),
-        Nan::New(resource->is_observed));
-    Nan::Set(jsResource, Nan::New("observable").ToLocalChecked(),
-        Nan::New(resource->observable));
-    Nan::Set(jsResource, Nan::New("secure").ToLocalChecked(),
-        Nan::New(resource->secure));
-    Nan::Set(jsResource, Nan::New("types").ToLocalChecked(),
-        jsStringArrayFromStrSliceVector(&(resource->types)));
-
-    return jsResource;
-}
-
-const char *SolOicClient::jsClassName() {
-    return "SolOicClient";
-}
-
-void SolOicClient::ref(void *data) {}
-
-void SolOicClient::unref(void *data) {
-    sol_oic_client_del((sol_oic_client *)data);
-}
-
-OicCallbackData::OicCallbackData(): jsClient(0), callback(0),
-    hijackRefWasSuccessful(false) {}
-OicCallbackData::~OicCallbackData() {
-    if (jsClient) {
-        jsClient->Reset();
-        delete jsClient;
-    }
-    delete callback;
-    if (hijackRefWasSuccessful) {
-        hijack_unref();
-    }
-}
-
-bool OicCallbackData::init(Local<Object> _jsClient,
-    Local<Function> jsCallback) {
-    callback = new Nan::Callback(jsCallback);
-    if (!callback) {
-        Nan::ThrowError("OicCallbackData: Failed to allocate callback");
-        return false;
-    }
-    jsClient = new Nan::Persistent<Object>(_jsClient);
-    if (!jsClient) {
-        delete callback;
-        Nan::ThrowError("OicCallbackData: Failed to allocate client");
-        return false;
-    }
-
-    hijackRefWasSuccessful = hijack_ref();
-    return hijackRefWasSuccessful;
-}
-
-OicCallbackData *OicCallbackData::New(Local<Object> jsClient,
-    Local<Function> jsCallback) {
-    OicCallbackData *data = new OicCallbackData;
-    if (!data) {
-        Nan::ThrowError("Failed to allocate OicCallbackData");
-    } else if (!data->init(jsClient, jsCallback)) {
-        delete data;
-        data = 0;
-    }
-    return data;
-}
diff --git a/bindings/nodejs/src/structures/oic-client.h b/bindings/nodejs/src/structures/oic-client.h
deleted file mode 100644
index 7097c8b7..00000000
--- a/bindings/nodejs/src/structures/oic-client.h
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <sol-oic-client.h>
-#include "../structures/js-handle.h"
-
-class SolOicClientResource : public JSReffableHandle<SolOicClientResource> {
-public:
-    static const char *jsClassName();
-    static void ref(void *data);
-    static void unref(void *data);
-    static v8::Local<v8::Object> New(struct sol_oic_resource *resource);
-};
-
-class SolOicClient : public JSReffableHandle<SolOicClient> {
-public:
-    static const char *jsClassName();
-    static void ref(void *data);
-    static void unref(void *data);
-};
-
-class OicCallbackData {
-protected:
-    OicCallbackData();
-public:
-    bool init(v8::Local<v8::Object> jsClient, v8::Local<v8::Function> jsCallback);
-    virtual ~OicCallbackData();
-    static OicCallbackData *New(v8::Local<v8::Object> jsClient, v8::Local<v8::Function> jsCallback);
-    Nan::Persistent<v8::Object> *jsClient;
-    Nan::Callback *callback;
-private:
-    bool hijackRefWasSuccessful;
-};
diff --git a/bindings/nodejs/src/structures/oic-map.cc b/bindings/nodejs/src/structures/oic-map.cc
deleted file mode 100644
index 5bdb30db..00000000
--- a/bindings/nodejs/src/structures/oic-map.cc
+++ /dev/null
@@ -1,172 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <string>
-#include <nan.h>
-
-#include "../common.h"
-#include "../data.h"
-#include "oic-map.h"
-
-using namespace v8;
-
-Local<Value> js_sol_oic_map_reader(
-    const struct sol_oic_map_reader *representation) {
-    if (!representation) {
-        return Nan::Null();
-    }
-    Local<Object> returnValue = Nan::New<Object>();
-
-    struct sol_oic_repr_field field;
-    enum sol_oic_map_loop_status end_status;
-    struct sol_oic_map_reader iterator = {0, 0, 0, 0, 0, 0};
-    SOL_OIC_MAP_LOOP(representation, &field, &iterator, end_status) {
-        Local<Value> jsValue;
-        if (field.type == SOL_OIC_REPR_TYPE_UINT) {
-            jsValue = Nan::New<Uint32>((uint32_t)field.v_uint);
-        } else if (field.type == SOL_OIC_REPR_TYPE_INT) {
-            jsValue = Nan::New<Int32>((int32_t)field.v_int);
-        } else if (field.type == SOL_OIC_REPR_TYPE_SIMPLE) {
-            jsValue = Nan::New(field.v_simple);
-        } else if (field.type == SOL_OIC_REPR_TYPE_TEXT_STRING) {
-            jsValue = Nan::New<String>(field.v_slice.data,
-                field.v_slice.len).ToLocalChecked();
-        } else if (field.type == SOL_OIC_REPR_TYPE_BYTE_STRING) {
-            jsValue = jsArrayFromBytes((unsigned char *)(field.v_slice.data),
-                        field.v_slice.len);
-        } else if (field.type == SOL_OIC_REPR_TYPE_FLOAT) {
-            jsValue = Nan::New(field.v_float);
-        } else if (field.type == SOL_OIC_REPR_TYPE_DOUBLE) {
-            jsValue = Nan::New(field.v_double);
-        } else {
-            jsValue = Nan::Undefined();
-        }
-        Nan::Set(returnValue, Nan::New(field.key).ToLocalChecked(), jsValue);
-    }
-
-    return returnValue;
-}
-
-static bool encodeSingleValue(const char *name, Local<Value> value,
-    struct sol_oic_map_writer *map) {
-    struct sol_oic_repr_field field;
-    bool returnValue = true;
-    std::string buffer("");
-
-    if (value->IsInt32()) {
-        field.key = name;
-        field.type = SOL_OIC_REPR_TYPE_INT;
-        field.v_uint = value->Int32Value();
-    }
-    else
-    if (value->IsUint32()) {
-        field.key = name;
-        field.type = SOL_OIC_REPR_TYPE_UINT;
-        field.v_uint = value->Uint32Value();
-    }
-    else
-    if (value->IsString()) {
-        char *theString = 0;
-        if (!c_StringNew(value->ToString(), &theString)) {
-            return false;
-        }
-        field.key = name;
-        field.type = SOL_OIC_REPR_TYPE_TEXT_STRING;
-        field.v_slice.data = theString;
-        field.v_slice.len = strlen(theString);
-    }
-    else
-    if (value->IsArray()) {
-        unsigned char *theData = 0;
-        size_t theDataLength = 0;
-
-        Local<Array> array = Local<Array>::Cast(value);
-        theDataLength = array->Length();
-        theData = (unsigned char *)malloc(theDataLength);
-        if (!theData) {
-            buffer += std::string(name) + ": unable to allocate array";
-            goto error;
-        }
-
-        if (!fillCArrayFromJSArray(theData, theDataLength, array)) {
-            free(theData);
-            return false;
-        }
-
-        field.key = name;
-        field.type = SOL_OIC_REPR_TYPE_BYTE_STRING;
-        field.v_slice.data = (const char *)theData;
-        field.v_slice.len = theDataLength;
-    }
-    else
-    if (value->IsNumber()) {
-        field.key = name;
-        field.type = SOL_OIC_REPR_TYPE_DOUBLE;
-        field.v_double = value->NumberValue();
-    }
-    else {
-        buffer += std::string(name) + ": unable to handle value type";
-        goto error;
-    }
-
-    returnValue = (sol_oic_map_append(map, &field) == 0);
-    if (field.type == SOL_OIC_REPR_TYPE_TEXT_STRING ||
-            field.type == SOL_OIC_REPR_TYPE_BYTE_STRING) {
-        free((void *)(field.v_slice.data));
-    }
-    if (!returnValue) {
-        buffer += std::string(name) + ": encoding failed";
-        goto error;
-    }
-
-    return true;
-error:
-    Nan::ThrowError(buffer.c_str());
-    return false;
-}
-
-bool c_sol_oic_map_writer(Local<Object> payload,
-    struct sol_oic_map_writer *map) {
-    bool returnValue = true;
-
-    uint32_t index, length;
-    Local<Array> propertyNames =
-        Nan::GetPropertyNames(payload).ToLocalChecked();
-    length = propertyNames->Length();
-    for (index = 0; index < length && returnValue; index++) {
-        Local<Value> name = Nan::Get(propertyNames, index).ToLocalChecked();
-        Local<Value> value = Nan::Get(payload, name).ToLocalChecked();
-        returnValue = encodeSingleValue((const char *)*String::Utf8Value(name),
-            value, map);
-    }
-
-    return returnValue;
-}
-
-bool oic_map_writer_callback(void *data, struct sol_oic_map_writer *map) {
-    bool returnValue = true;
-
-    if (data) {
-        Nan::HandleScope scope;
-        Nan::Persistent<Object> *jsPayload = (Nan::Persistent<Object> *)data;
-        returnValue = c_sol_oic_map_writer(Nan::New<Object>(*jsPayload), map);
-    }
-
-    return returnValue;
-}
-
diff --git a/bindings/nodejs/src/structures/oic-map.h b/bindings/nodejs/src/structures/oic-map.h
deleted file mode 100644
index ee524218..00000000
--- a/bindings/nodejs/src/structures/oic-map.h
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <v8.h>
-#include <sol-oic-client.h>
-
-v8::Local<v8::Value> js_sol_oic_map_reader(const struct sol_oic_map_reader *representation);
-
-bool c_sol_oic_map_writer(v8::Local<v8::Object> payload, struct sol_oic_map_writer *map);
-
-/* @p data is a Nan::Persistent<Object> * */
-bool oic_map_writer_callback(void *data, struct sol_oic_map_writer *map);
diff --git a/bindings/nodejs/src/structures/sol-js-gpio.cc b/bindings/nodejs/src/structures/sol-js-gpio.cc
deleted file mode 100644
index 94a988d3..00000000
--- a/bindings/nodejs/src/structures/sol-js-gpio.cc
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include "sol-js-gpio.h"
-#include "../common.h"
-
-using namespace v8;
-
-bool c_sol_gpio_config(v8::Local<v8::Object> jsGPIOConfig, 
-    sol_gpio_data *gpio_data, sol_gpio_config *config) {
-    SOL_SET_API_VERSION(config->api_version = SOL_GPIO_CONFIG_API_VERSION; )
-
-    VALIDATE_AND_ASSIGN((*config), dir, sol_gpio_direction, IsInt32,
-        "(GPIO direction)", false, jsGPIOConfig,
-        Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), drive_mode, sol_gpio_drive, IsInt32,
-        "(GPIO pull-up/pull-down resistor)", false, jsGPIOConfig,
-        Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), active_low, bool, IsBoolean,
-        "(GPIO active_low state)", false, jsGPIOConfig,
-        BooleanValue);
-
-    if (config->dir == SOL_GPIO_DIR_IN) {
-        Local<Value> poll_timeout =
-            Nan::Get(jsGPIOConfig, Nan::New("poll_timeout").ToLocalChecked())
-                .ToLocalChecked();
-        VALIDATE_VALUE_TYPE(poll_timeout, IsUint32, "GPIO in poll_timeout",
-            false);
-        config->in.poll_timeout = (uint32_t)poll_timeout->Uint32Value();
-
-        Local<Value> trigger_mode =
-            Nan::Get(jsGPIOConfig, Nan::New("trigger_mode").ToLocalChecked())
-                .ToLocalChecked();
-        VALIDATE_VALUE_TYPE(trigger_mode, IsInt32, "GPIO in trigger_mode",
-            false);
-        config->in.trigger_mode = (sol_gpio_edge) trigger_mode->Int32Value();
-
-        Local<Value> read_cb = Nan::Get(jsGPIOConfig,
-            Nan::New("callback").ToLocalChecked()).ToLocalChecked();
-
-        if (read_cb->IsFunction()) {
-            Nan::Callback *callback =
-                new Nan::Callback(Local<Function>::Cast(read_cb));
-            gpio_data->callback = callback;
-            config->in.user_data = gpio_data;
-        }
-    }
-
-    return true;
-}
diff --git a/bindings/nodejs/src/structures/sol-js-gpio.h b/bindings/nodejs/src/structures/sol-js-gpio.h
deleted file mode 100644
index f94a6883..00000000
--- a/bindings/nodejs/src/structures/sol-js-gpio.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
- #ifndef __SOLETTA_JS_GPIO_H__
-#define __SOLETTA_JS_GPIO_H__
-
-#include <v8.h>
-#include <sol-gpio.h>
-
-struct sol_gpio_data {
-    sol_gpio *gpio;
-    Nan::Callback *callback;
-};
-
-bool c_sol_gpio_config(v8::Local<v8::Object> gpioConfig, sol_gpio_data *data,
-    sol_gpio_config *config);
-
-#endif /* __SOLETTA_JS_GPIO_H__ */
-
diff --git a/bindings/nodejs/src/structures/sol-js-pwm.cc b/bindings/nodejs/src/structures/sol-js-pwm.cc
deleted file mode 100644
index 69697181..00000000
--- a/bindings/nodejs/src/structures/sol-js-pwm.cc
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include "sol-js-pwm.h"
-#include "../common.h"
-
-using namespace v8;
-
-bool c_sol_pwm_config(v8::Local<v8::Object> jsPWMConfig, sol_pwm_config *config) {
-    SOL_SET_API_VERSION(config->api_version = SOL_PWM_CONFIG_API_VERSION;)
-
-    VALIDATE_AND_ASSIGN((*config), period_ns,  int32_t, IsInt32,
-        "(PWM Period)", false, jsPWMConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), duty_cycle_ns,  int32_t, IsInt32,
-        "(PWM Duty Cycle)", false, jsPWMConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), alignment, sol_pwm_alignment, IsInt32,
-        "(PWM Alignment)", false, jsPWMConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), polarity, sol_pwm_polarity, IsInt32,
-        "(PWM polarity)", false, jsPWMConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), enabled, bool, IsBoolean,
-        "(PWM enabled)", false, jsPWMConfig, BooleanValue);
-
-    return true;
-}
diff --git a/bindings/nodejs/src/structures/sol-js-pwm.h b/bindings/nodejs/src/structures/sol-js-pwm.h
deleted file mode 100644
index 476c82cf..00000000
--- a/bindings/nodejs/src/structures/sol-js-pwm.h
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef __SOLETTA_JS_PWM_H__
-#define __SOLETTA_JS_PWM_H__
-
-#include <v8.h>
-#include <sol-pwm.h>
-
-bool c_sol_pwm_config(v8::Local<v8::Object> pwmConfig, sol_pwm_config *config);
-
-#endif /* __SOLETTA_JS_PWM_H__ */
-
diff --git a/bindings/nodejs/src/structures/sol-js-spi.cc b/bindings/nodejs/src/structures/sol-js-spi.cc
deleted file mode 100644
index 7e46c619..00000000
--- a/bindings/nodejs/src/structures/sol-js-spi.cc
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include "../common.h"
-#include "sol-js-spi.h"
-
-using namespace v8;
-
-bool c_sol_spi_config(v8::Local<v8::Object> jsSPIConfig,
-    sol_spi_config *config) {
-    SOL_SET_API_VERSION(config->api_version = SOL_SPI_CONFIG_API_VERSION;)
-
-    VALIDATE_AND_ASSIGN((*config), chip_select, unsigned int, IsUint32,
-        "(Chip select)", false, jsSPIConfig, Uint32Value);
-
-    VALIDATE_AND_ASSIGN((*config), mode, sol_spi_mode, IsInt32,
-        "(SPI transfer mode)", false, jsSPIConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), frequency, uint32_t, IsUint32,
-        "(Frequency in Hz)", false, jsSPIConfig, Uint32Value);
-
-    VALIDATE_AND_ASSIGN((*config), bits_per_word, uint8_t, IsUint32,
-        "(Bits per word)", false, jsSPIConfig, Uint32Value);
-
-    return true;
-}
diff --git a/bindings/nodejs/src/structures/sol-js-spi.h b/bindings/nodejs/src/structures/sol-js-spi.h
deleted file mode 100644
index 11d820ac..00000000
--- a/bindings/nodejs/src/structures/sol-js-spi.h
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef __SOLETTA_JS_SPI_H__
-#define __SOLETTA_JS_SPI_H__
-
-#include <v8.h>
-#include <sol-spi.h>
-
-bool c_sol_spi_config(v8::Local<v8::Object> jsSPIConfig,
-    sol_spi_config *config);
-
-#endif /* __SOLETTA_JS_SPI_H__ */
diff --git a/bindings/nodejs/src/structures/sol-js-uart.cc b/bindings/nodejs/src/structures/sol-js-uart.cc
deleted file mode 100644
index 5d723829..00000000
--- a/bindings/nodejs/src/structures/sol-js-uart.cc
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include "../common.h"
-#include "sol-js-uart.h"
-
-using namespace v8;
-
-bool c_sol_uart_config(v8::Local<v8::Object> jsUARTConfig,
-    sol_uart_data *uart_data, sol_uart_config *config) {
-    SOL_SET_API_VERSION(config->api_version = SOL_UART_CONFIG_API_VERSION;)
-
-    VALIDATE_AND_ASSIGN((*config), baud_rate, sol_uart_baud_rate, IsInt32,
-        "(Baud rate)", false, jsUARTConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), data_bits, sol_uart_data_bits, IsInt32,
-        "(Amount of data bits)", false, jsUARTConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), parity, sol_uart_parity, IsInt32,
-        "(Parity characteristic)", false, jsUARTConfig, Int32Value);
-
-    VALIDATE_AND_ASSIGN((*config), stop_bits, sol_uart_stop_bits, IsInt32,
-        "(Amount of stop bits)", false, jsUARTConfig, Int32Value);
-
-    Local<Value> on_data_cb = Nan::Get(jsUARTConfig,
-        Nan::New("on_data").ToLocalChecked()).ToLocalChecked();
-    if (on_data_cb->IsFunction()) {
-        Nan::Callback *on_data =
-            new Nan::Callback(Local<Function>::Cast(on_data_cb));
-
-        uart_data->on_data_cb = on_data;
-    }
-
-    Local<Value> on_feed_done_cb = Nan::Get(jsUARTConfig,
-        Nan::New("on_feed_done").ToLocalChecked()).ToLocalChecked();
-    if (on_feed_done_cb->IsFunction()) {
-        Nan::Callback *on_feed_done =
-            new Nan::Callback(Local<Function>::Cast(on_feed_done_cb));
-
-        uart_data->on_feed_done_cb = on_feed_done;
-    }
-    config->user_data = uart_data;
-    config->feed_size = 0;
-    config->data_buffer_size = 0;
-
-    VALIDATE_AND_ASSIGN((*config), flow_control, bool, IsBoolean,
-        "(Enable software flow control)", false, jsUARTConfig,
-        BooleanValue);
-
-    return true;
-}
diff --git a/bindings/nodejs/src/structures/sol-js-uart.h b/bindings/nodejs/src/structures/sol-js-uart.h
deleted file mode 100644
index 42a3828f..00000000
--- a/bindings/nodejs/src/structures/sol-js-uart.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef __SOLETTA_JS_UART_H__
-#define __SOLETTA_JS_UART_H__
-
-#include <v8.h>
-#include <sol-uart.h>
-#include <map>
-
-struct CallbackInfo {
-    Nan::Callback *callback;
-    Nan::Persistent<v8::Value> *js_buffer;
-};
-
-struct sol_uart_data {
-    sol_uart *uart;
-    Nan::Callback *on_data_cb;
-    Nan::Callback *on_feed_done_cb;
-    std::map<sol_blob *, CallbackInfo *> feed_callbacks_map;
-};
-
-bool c_sol_uart_config(v8::Local<v8::Object> UARTConfig, sol_uart_data *data,
-    sol_uart_config *config);
-
-#endif /* __SOLETTA_JS_UART_H__ */
diff --git a/bindings/nodejs/src/sys-constants.cc b/bindings/nodejs/src/sys-constants.cc
deleted file mode 100644
index 6cbee659..00000000
--- a/bindings/nodejs/src/sys-constants.cc
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <nan.h>
-#include "sys-constants.h"
-
-using namespace v8;
-
-namespace node {void DefineConstants(Local<Object> target);}
-
-static Nan::Persistent<Object> forwardTable;
-static Nan::Persistent<Object> reverseTable;
-
-NAN_METHOD(bind__sysConstants) {
-	if (info.Length() < 1) {
-		Local<Object> raw = Nan::New<Object>();
-		node::DefineConstants(raw);
-		info.GetReturnValue().Set(raw);
-	} else {
-		Local<Object> constants = Nan::To<Object>(info[0]).ToLocalChecked();
-		Local<Object> forward = Nan::To<Object>(Nan::Get(constants,
-			Nan::New("forward").ToLocalChecked()).ToLocalChecked())
-				.ToLocalChecked();
-		Local<Object> reverse = Nan::To<Object>(Nan::Get(constants,
-			Nan::New("reverse").ToLocalChecked()).ToLocalChecked())
-				.ToLocalChecked();
-		forwardTable.Reset(forward);
-		reverseTable.Reset(reverse);
-	}
-}
-
-Local<Value> ReverseLookupConstant(const char *nameSpace, int value) {
-	Local<Value> returnValue = Nan::Undefined();
-
-	Local<Value> jsNameSpaceValue = Nan::Get(Nan::New<Object>(reverseTable),
-		Nan::New(nameSpace).ToLocalChecked()).ToLocalChecked();
-	if (jsNameSpaceValue->IsObject()) {
-		Local<Object> jsNameSpace =
-			Nan::To<Object>(jsNameSpaceValue).ToLocalChecked();
-		returnValue = Nan::Get(jsNameSpace, Nan::New(value)).ToLocalChecked();
-	}
-
-	return returnValue;
-}
diff --git a/bindings/nodejs/src/sys-constants.h b/bindings/nodejs/src/sys-constants.h
deleted file mode 100644
index 362bbebf..00000000
--- a/bindings/nodejs/src/sys-constants.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <v8.h>
-
-v8::Local<v8::Value> ReverseLookupConstant(const char *nameSpace, int value);
diff --git a/bindings/nodejs/tests/assert-to-console.js b/bindings/nodejs/tests/assert-to-console.js
deleted file mode 100644
index e6e0ad76..00000000
--- a/bindings/nodejs/tests/assert-to-console.js
+++ /dev/null
@@ -1,21 +0,0 @@
-module.exports = {
-
-	// Create an assertion and pass it to the parent process via stdout
-	assert: function( assertion ) {
-		var copyOfArguments;
-
-		// Copy the arguments and remove the assertion
-		copyOfArguments = Array.prototype.slice.call( arguments, 0 );
-		copyOfArguments.shift();
-
-		console.log( JSON.stringify( {
-			assertion: assertion,
-			arguments: copyOfArguments
-		} ) );
-	},
-
-	die: function( message ) {
-		console.log( JSON.stringify( { teardown: true, message: message, isError: true } ) );
-		process.exit( 1 );
-	}
-};
diff --git a/bindings/nodejs/tests/getresult.js b/bindings/nodejs/tests/getresult.js
deleted file mode 100644
index 7a92e2f5..00000000
--- a/bindings/nodejs/tests/getresult.js
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2016 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var fs = require( "fs" );
-
-var jsonFilename = require( "path" ).resolve( __dirname, "results.json" );
-
-var date = new Date(),
-  data = "",
-  caseList = [],
-  setList = [],
-  allList = [],
-  test = {},
-  testInfo = {};
-
-exports.getTestResult = function( status ) {
-
-  testInfo = {
-    "message": (  status.runtime  + ": " + status.message ),
-    "result": ( status.result ? "PASS" : "FAIL" ),
-    "runtime": ( date.toLocaleTimeString() )
-  };
-
-  if ( setList.indexOf( status.name ) > -1 && ( "results" in test ) ) {
-    test.results.push( testInfo );
-    caseList.push( test );
-  } else {
-    setList.push( status.name );
-    test = { "test": status.name, "results": [ testInfo ] };
-    caseList.push( test );
-    allList.push( test );
-  }
-
-  data = JSON.stringify( { "output": allList }, null, 4 );
-  fs.writeFileSync( jsonFilename, data );
-};
diff --git a/bindings/nodejs/tests/helpers/main-loop-interruption-master.js b/bindings/nodejs/tests/helpers/main-loop-interruption-master.js
deleted file mode 100644
index 96fb7ae9..00000000
--- a/bindings/nodejs/tests/helpers/main-loop-interruption-master.js
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-module.exports = function parentProcess( childProcessWontQuit ) {
-	console.log( JSON.stringify( { assertionCount: 2 } ) );
-	var childHasReceivedSIGINT = false;
-	var childHadToBeKilled = false;
-	var utils = require( "../assert-to-console" );
-	var theChild = require( "child_process" ).spawn( "node",
-		[ __filename, childProcessWontQuit ? "noCleanup" : "cleanup" ], {
-		stdio: [ process.stdin, "pipe", process.stderr ]
-	} );
-	var drawConclusion = function() {
-		utils.assert( "strictEqual", childHasReceivedSIGINT, true,
-			"Child process has received SIGINT" );
-		utils.assert( "strictEqual", childHadToBeKilled, childProcessWontQuit,
-			"Child process termination was as expected" );
-	};
-	var failsafeTimeout = setTimeout( function() {
-		childHadToBeKilled = true;
-		theChild.kill( "SIGKILL" );
-	}, 5000 );
-	theChild.on( "close", function() {
-		clearTimeout( failsafeTimeout );
-		drawConclusion();
-	} );
-	theChild.stdout.on( "data", function( data ) {
-		var index, oneLine, theMessage = {};
-		var lines = data.toString().split( "\n" );
-		for ( index in lines ) {
-			oneLine = lines[ index ];
-			if ( !oneLine ) {
-				continue;
-			}
-			try {
-				theMessage = JSON.parse( oneLine );
-			} catch ( anError ) {}
-			if ( theMessage.SIGINT ) {
-				childHasReceivedSIGINT = true;
-			} else if ( theMessage.readyToDie ) {
-				theChild.kill( "SIGINT" );
-			}
-		}
-	} );
-};
-
-if ( require.main === module ) {
-
-	// We were run directly, instead of via require(), so we are the child process
-	var soletta = require( require( "path" )
-		.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-	var monitor = soletta.sol_platform_add_hostname_monitor( function() {} );
-	process.on( "SIGINT", function() {
-		console.log( JSON.stringify( { SIGINT: true } ) );
-		if ( process.argv[ 2 ] === "cleanup" ) {
-			soletta.sol_platform_del_hostname_monitor( monitor );
-		}
-	} );
-
-	// It is essential that we attempt to print something out on the stderr to reproduce the issue
-	console.error( "" );
-	console.log( JSON.stringify( { readyToDie: true } ) );
-}
diff --git a/bindings/nodejs/tests/helpers/observation-client.js b/bindings/nodejs/tests/helpers/observation-client.js
deleted file mode 100644
index 6b21ca72..00000000
--- a/bindings/nodejs/tests/helpers/observation-client.js
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-module.exports = function( messagePrefix, desiredObservationCount, clientCount ) {
-
-var _ = require( "lodash" );
-var async = require( "async" );
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var testUtils = require( "../assert-to-console" );
-var payload = require( "./payload" );
-var uuid = process.argv[ 2 ];
-var observationCount = 0;
-var theResource;
-
-console.log( JSON.stringify( { assertionCount: desiredObservationCount + 5 } ) );
-
-var client = soletta.sol_oic_client_new();
-var destination = soletta.sol_network_link_addr_from_str( {
-		bytes: _.fill( Array( 16 ), 0 ),
-		family: soletta.sol_network_family.SOL_NETWORK_FAMILY_INET,
-		port: 5683
-	}, "224.0.1.187" );
-
-async.series( [
-	function findResource( callback ) {
-		var result = soletta.sol_oic_client_find_resources( client, destination, "", "",
-			function( client, resource ) {
-				if ( !resource ) {
-					callback( new Error( messagePrefix + "Resource not found" ) );
-				}
-				if ( resource && resource.path === "/a/" + uuid ) {
-					testUtils.assert( "ok", true, messagePrefix + "Resource found" );
-					theResource = resource;
-					callback();
-					return false;
-				}
-				return !!resource;
-			} );
-	},
-
-	function observeResource( callback ) {
-		var observationHandle = soletta.sol_oic_client_resource_observe( client, theResource,
-			function( code, client, address, response ) {
-				testUtils.assert( "deepEqual", response, payload.validate( response ),
-					messagePrefix + "payload is as expected" );
-				observationCount++;
-				if ( observationCount === desiredObservationCount ) {
-					var typeError = {};
-					soletta.sol_oic_client_resource_unobserve( observationHandle );
-					try {
-						soletta.sol_oic_client_resource_unobserve( observationHandle );
-					} catch( theError ) {
-						typeError = theError;
-					}
-					testUtils.assert( "strictEqual", typeError instanceof TypeError, true,
-						messagePrefix +
-							"Attempting double free of observation throws a type error" );
-					testUtils.assert( "strictEqual", typeError.message,
-						"Object is not of type SolOicObservation",
-						messagePrefix + "Double free error message is as expected" );
-					callback();
-				}
-			} );
-	},
-
-	function maybeQuit( callback ) {
-		var pending = soletta.sol_oic_client_request( client, theResource,
-			soletta.sol_coap_method.SOL_COAP_METHOD_PUT, { finished: uuid },
-			function( code, client, address, response ) {
-				if ( response && response.clientsFinished === clientCount ) {
-					console.log( JSON.stringify( { killPeer: true } ) );
-				}
-				callback();
-			} );
-		//FIXME: adapt to new var type
-		//testUtils.assert( "strictEqual", pending, true, messagePrefix + "PUT request succeeded" );
-	}
-], function( error ) {
-	if ( error ) {
-		testUtils.die( error.message );
-	}
-} );
-
-process.on( "exit", function() {
-	testUtils.assert( "strictEqual", observationCount, desiredObservationCount,
-		"Exactly the desired number of observations was made" );
-} );
-
-};
diff --git a/bindings/nodejs/tests/helpers/observation-server.js b/bindings/nodejs/tests/helpers/observation-server.js
deleted file mode 100644
index 3ad68ffd..00000000
--- a/bindings/nodejs/tests/helpers/observation-server.js
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-module.exports = function( setObservable ) {
-
-var _ = require( "lodash" );
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var testUtils = require( "../assert-to-console" );
-var payload = require( "./payload" );
-var uuid = process.argv[ 2 ];
-var observationCount = 0;
-var theResource;
-var theInterval;
-
-console.log( JSON.stringify( { assertionCount: 0 } ) );
-
-theResource = soletta.sol_oic_server_register_resource( _.extend( {
-		interface: "oic.if.baseline",
-		resource_type: "core.light",
-		path: "/a/" + uuid,
-		put: function putHandler( input, output ) {
-			if ( input.finished === uuid ) {
-				observationCount++;
-				output.clientsFinished = observationCount;
-			}
-			if ( observationCount >= 2 && !setObservable ) {
-				clearInterval(theInterval);
-			}
-			return soletta.sol_coap_response_code.SOL_COAP_RESPONSE_CODE_OK;
-		},
-	}, setObservable ? {} : {
-		get: function getHandler( input, output ) {
-			_.extend( output, payload.generate() );
-			return soletta.sol_coap_response_code.SOL_COAP_RESPONSE_CODE_OK;
-		}
-	} ),
-		soletta.sol_oic_resource_flag.SOL_OIC_FLAG_DISCOVERABLE |
-		( setObservable ? soletta.sol_oic_resource_flag.SOL_OIC_FLAG_OBSERVABLE : 0 ) |
-		soletta.sol_oic_resource_flag.SOL_OIC_FLAG_ACTIVE );
-
-console.log( JSON.stringify( { ready: true } ) );
-
-if ( !setObservable ) {
-	theInterval = setInterval( function() {
-		soletta.sol_oic_server_notify( theResource, payload.generate() );
-	}, 200 );
-}
-
-process.on( "SIGINT", function() {
-	soletta.sol_oic_server_unregister_resource( theResource );
-} );
-
-};
diff --git a/bindings/nodejs/tests/helpers/payload.js b/bindings/nodejs/tests/helpers/payload.js
deleted file mode 100644
index 8c5e3d6b..00000000
--- a/bindings/nodejs/tests/helpers/payload.js
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var cities = [
-	"Helsinki",
-	"Hamilton",
-	"Halifax",
-	"Hong Kong",
-	"Haifa",
-	"Honolulu",
-	"Harare",
-	"Hiroshima"
-];
-
-module.exports = {
-	generate: function() {
-		return {
-			destination: cities[ Math.round( Math.random() * ( cities.length - 1 ) ) ],
-			speed: Math.round( Math.random() * 500 ) + 500
-		};
-	},
-	validate: function( payload ) {
-		return ( ( payload && cities.indexOf( payload.destination ) >= 0 && payload.speed >= 500 &&
-			payload.speed <= 1000 ) ? payload : "invalid" );
-	}
-};
diff --git a/bindings/nodejs/tests/invasive-tests/Main Loop Integration.js b/bindings/nodejs/tests/invasive-tests/Main Loop Integration.js
deleted file mode 100644
index c1062e62..00000000
--- a/bindings/nodejs/tests/invasive-tests/Main Loop Integration.js	
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var async = require( "async" );
-var utils = require( "../assert-to-console" );
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var exec = require( "child_process" ).exec;
-var initialHostname = require( "os" ).hostname();
-var initialTimezone, destinationTimezone;
-var sudo = ( process.geteuid() ? "sudo " : "" );
-
-console.log( JSON.stringify( { assertionCount: 5 } ) );
-
-// commands like sudo don't like having an LD_PRELOAD
-delete process.env.LD_PRELOAD;
-
-var hostnameMonitor, timezoneMonitor;
-
-async.series( [
-	function getInitialTimezone( callback ) {
-		exec( "timedatectl", function( error, stdout ) {
-			if ( !error ) {
-				initialTimezone = stdout
-					.toString()
-					.split( "\n" )
-					.reduce( function( previousValue, currentValue ) {
-						if ( !previousValue ) {
-							previousValue = ( currentValue
-								.match( /^\s+Time\s*zone:\s*([^ ]*).*$/ ) || [ 0, false ] )[ 1 ];
-						}
-						return previousValue;
-					}, false );
-				if ( !initialTimezone ) {
-					error = new Error( "Can't establish initial time zone" );
-				}
-			}
-			callback( error );
-		} );
-	},
-
-	function pickDifferentTimezone( callback ) {
-		exec( "timedatectl list-timezones", function( error, stdout ) {
-			if ( !error ) {
-				destinationTimezone = stdout
-					.toString()
-					.split( "\n" )
-					.reduce( function( previousValue, currentValue, theIndex, theArray ) {
-						if ( typeof previousValue !== "string" &&
-							Math.round( ( theArray.length - 1 ) * previousValue ) === theIndex ) {
-							previousValue = currentValue;
-						}
-						return previousValue;
-					}, Math.random() );
-				if ( typeof destinationTimezone !== "string" ) {
-					error = new Error( "Can't establish time zone to use for the test" );
-				}
-			}
-			callback( error );
-		} );
-	},
-
-	function testHostnameMonitor( callback ) {
-		hostnameMonitor = soletta.sol_platform_add_hostname_monitor( function( newHostname ) {
-			utils.assert( "strictEqual", newHostname, initialHostname,
-				"The new hostname is as expected" );
-			callback();
-		} );
-		exec( sudo + "hostname " + initialHostname, function( error ) {
-			if ( error ) {
-				utils.die( error.message );
-			}
-		} );
-	},
-
-	function deleteHostnameMonitorAndAddTimezoneMonitor( callback ) {
-
-		// It is important that the timezone monitor be added immediate after the hostname montior
-		// has been removed, without an intervening main loop iteration. This tests the synchronous
-		// sequence of hijack_ref()/hijack_unref()
-		soletta.sol_platform_del_hostname_monitor( hostnameMonitor );
-		timezoneMonitor = soletta.sol_platform_add_timezone_monitor( function( newTimeZone ) {
-			utils.assert( "strictEqual", newTimeZone, destinationTimezone,
-				"The new time zone is '" + destinationTimezone + "'" );
-			callback();
-		} );
-		exec( sudo + "timedatectl set-timezone " + destinationTimezone, function( error ) {
-			if ( error ) {
-				utils.die( error.message );
-			}
-		} );
-	},
-
-	function deleteTimezoneMonitorAndRestoreTimezone( callback ) {
-		var theError = {};
-		soletta.sol_platform_del_timezone_monitor( timezoneMonitor );
-		try {
-			soletta.sol_platform_del_timezone_monitor( timezoneMonitor );
-		} catch( anError ) {
-			theError = anError;
-		}
-		utils.assert( "strictEqual", theError instanceof TypeError, true,
-			"Attempting to delete a monitor twice throws a TypeError" );
-		utils.assert( "strictEqual", theError.message, "Object is not of type SolPlatformMonitor",
-			"The message of the TypeError is as expected" );
-		exec( sudo + "timedatectl set-timezone " + initialTimezone, callback );
-	}
-], function( error ) {
-	if ( error ) {
-		utils.die( error.message );
-	}
-} );
-
-process.on( "exit", function() {
-	utils.assert( "ok", true, "The process exits when the last handle is released" );
-} );
diff --git a/bindings/nodejs/tests/setup.js b/bindings/nodejs/tests/setup.js
deleted file mode 100644
index 4c14adfd..00000000
--- a/bindings/nodejs/tests/setup.js
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var success = "\x1b[42;30m\x1b[0m",
-	failure = "\x1b[41;30m\x1b[0m",
-	QUnit = require( "qunitjs" ),
-	results = require( "./getresult" );
-
-// Right-align runtime in a field that's 10 columns wide
-function formatRuntime( runtime ) {
-	var index,
-		str = "" + runtime,
-		indent = "";
-
-	for ( index = 0; index < Math.max( 0, 10 - str.length ); index++ ) {
-		indent += " ";
-	}
-
-	return indent + str;
-}
-
-QUnit.load();
-QUnit.config.requireExpects = true;
-QUnit.config.testTimeout = 300000;
-QUnit.config.callbacks.moduleStart.push( function( status ) {
-
-	// Parameters: status: { name, tests }
-
-	if ( status.name ) {
-		console.log( "\n### " + status.name );
-	}
-} );
-QUnit.config.callbacks.testStart.push( function( status ) {
-
-	// Parameters: status: { name, module, testId }
-
-	if ( status.name ) {
-		console.log( "\n" + status.name );
-	}
-} );
-QUnit.config.callbacks.log.push( function( status ) {
-
-	// Parameters: status: { module, result(t/f), message, actual, expected, testId, runtime }
-
-	results.getTestResult( status );
-
-	console.log(
-		( status.result ? success : failure ) +
-		" @" + formatRuntime( status.runtime ) + ": " +
-		status.message );
-	if ( !status.result ) {
-		console.log( "Actual: " );
-		console.log( QUnit.dump.parse( status.actual ) );
-		console.log( "Expected: " );
-		console.log( QUnit.dump.parse( status.expected ) );
-	}
-} );
-
-QUnit.config.callbacks.done.push( function( status ) {
-	var passed = "\x1b[42;30m " + status.passed + " \x1b[0m",
-		failed = "\x1b[41;30m " + status.failed + " \x1b[0m";
-
-	console.log( "Total assertions: " +
-		"(" + passed + ( status.failed > 0 ? "+" + failed : "" ) + ") / " + status.total );
-
-	process.exit( status.failed > 0 ? 1 : 0 );
-} );
-
-module.exports = QUnit;
diff --git a/bindings/nodejs/tests/suite.js b/bindings/nodejs/tests/suite.js
deleted file mode 100644
index 7f520709..00000000
--- a/bindings/nodejs/tests/suite.js
+++ /dev/null
@@ -1,284 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var QUnit,
-	async = require( "async" ),
-	glob = require( "glob" ),
-	_ = require( "lodash" ),
-	childProcess = require( "child_process" ),
-	fs = require( "fs" ),
-	path = require( "path" ),
-	uuid = require( "uuid" ),
-	suiteOptions = _.extend( {
-
-		// Default options
-		prefix: "tests",
-	}, require( "yargs" ).argv ),
-	runningProcesses = [],
-	getQUnit = function() {
-		if ( !QUnit ) {
-			QUnit = require( "./setup" );
-		}
-		return QUnit;
-	};
-
-function havePromises() {
-	var nodeVersion = _.map(
-		process.versions.node.split( "." ),
-		function( item ) {
-			return +item;
-		} );
-
-	return ( nodeVersion.length > 1 &&
-		( nodeVersion[ 0 ] > 0 ||
-		nodeVersion[ 0 ] === 0 && nodeVersion[ 1 ] > 11 ) );
-}
-
-// Spawn a single child and process its stdout.
-function spawnOne( assert, options ) {
-	var theChild = childProcess.spawn(
-		"node",
-		[ "--expose_gc", options.path ].concat( options.uuid ? [ options.uuid ] : [] ),
-		{
-			stdio: [ process.stdin, "pipe", process.stderr ],
-			env: _.extend( {}, process.env,
-				suiteOptions.ldPreload ? { LD_PRELOAD: suiteOptions.ldPreload } : {} )
-		} );
-
-	theChild.commandLine = "node" + " " + options.path + " " + options.uuid;
-	runningProcesses.push( theChild );
-
-	theChild
-		.on( "exit", function( code, signal ) {
-			var exitCodeOK = ( code === 0 || code === null ),
-				signalOK = ( signal !== "SIGSEGV" );
-
-			assert.ok( exitCodeOK, options.name + " exited successfully (" + code + ")" );
-			assert.ok( signalOK, options.name + " did not segfault" );
-		} )
-		.on( "close", function() {
-			var childIndex = runningProcesses.indexOf( theChild );
-			if ( childIndex >= 0 ) {
-				runningProcesses.splice( childIndex, 1 );
-			}
-			options.maybeQuit( theChild );
-		} );
-
-	// The stdout of the child is a sequence of \n-separated stringified JSON objects.
-	theChild.stdout.on( "data", function serverStdoutData( data ) {
-		_.each( data.toString().split( "\n" ), function( value ) {
-			var jsonObject;
-
-			if ( !value ) {
-				return;
-			}
-
-			// Attempt to retrieve a JSON object from stdout.
-			try {
-				jsonObject = JSON.parse( value );
-			} catch ( e ) {
-				options.teardown( "Error parsing " + options.name + " JSON: '" + value + "'" +
-					( e.message ? e.message : e ), true );
-				return;
-			}
-
-			// The child is reporting the number of assertions it will be making. We add our own
-			// two assertions ( 1.) successful exit and 2.) no segfault) to that count.
-			if ( jsonObject.assertionCount !== undefined ) {
-				options.reportAssertions( jsonObject.assertionCount + 2 );
-
-			// The child has requested a teardown.
-			} else if ( jsonObject.teardown ) {
-				options.teardown(
-					options.name + " requested teardown: " + jsonObject.message );
-
-			// The child has requested that its peer be killed.
-			} else if ( jsonObject.killPeer ) {
-				options.teardown( null, theChild );
-
-			// The child is reporting that it is ready. Only servers do this.
-			} else if ( jsonObject.ready ) {
-				if ( options.onReady ) {
-					options.onReady();
-				}
-
-			// The child is making an assertion.
-			} else if ( jsonObject.assertion ) {
-				assert[ jsonObject.assertion ].apply( assert, jsonObject.arguments );
-
-			// Otherwise, we have received unknown JSON from the child - bail.
-			} else {
-				options.teardown( "Unknown JSON from " + options.name + ": " + value, true );
-			}
-		} );
-	} );
-
-	return theChild;
-}
-
-function runTestSuites( files ) {
-	_.each( files, function( item ) {
-		var clientPathIndex,
-			clientPaths = glob.sync( path.join( item, "client*.js" ) ),
-			serverPath = path.join( item, "server.js" );
-
-		if ( fs.lstatSync( item ).isFile() ) {
-			getQUnit().test( path.basename( item ).replace( /\.js$/, "" ), function( assert ) {
-				var theChild,
-					spawnOptions = {
-						uuid: uuid.v4(),
-						name: "Test",
-						path: item,
-						teardown: function( error ) {
-							if ( theChild ) {
-								theChild.kill( "SIGTERM" );
-							}
-							if ( error ) {
-								throw new Error( error );
-							}
-						},
-						maybeQuit: assert.async(),
-						reportAssertions: _.bind( assert.expect, assert )
-					};
-				theChild = spawnOne( assert, spawnOptions );
-			} );
-			return;
-		}
-
-		if ( !fs.lstatSync( item ).isDirectory() ) {
-			return;
-		}
-
-		for ( clientPathIndex in clientPaths ) {
-			if ( !( fs.lstatSync( clientPaths[ clientPathIndex ] ).isFile() ) ) {
-				throw new Error( "Cannot find client at " + clientPaths[ clientPathIndex ] );
-			}
-		}
-
-		if ( !( fs.lstatSync( serverPath ).isFile() ) ) {
-			throw new Error( "Cannot find server at " + serverPath );
-		}
-
-		getQUnit().test( path.basename( item ), function( assert ) {
-			var totalChildren = clientPaths.length + 1,
-
-				// Track the child processes involved in this test in this array
-				children = [],
-
-				// Turn this test async
-				done = assert.async(),
-
-				// Count assertions made by the children. Report them to assert.expect() when both
-				// children have reported their number of assertions.
-				totalAssertions = 0,
-				childrenAssertionsReported = 0,
-
-				spawnOptions = {
-					uuid: uuid.v4(),
-					teardown: function( error, sourceProcess ) {
-						var index,
-							signal = error ? "SIGTERM" : "SIGINT",
-
-							// When killing child processes in a loop we have to copy the array
-							// because it may become modified by the incoming notifications that a
-							// process has exited.
-							copyOfChildren = children.slice();
-
-						for ( index in copyOfChildren ) {
-							if ( sourceProcess && sourceProcess === copyOfChildren[ index ] ) {
-								continue;
-							}
-							copyOfChildren[ index ].kill( signal );
-						}
-
-						if ( error ) {
-							throw new Error( error );
-						}
-					},
-					maybeQuit: function( theChild ) {
-						var childIndex = children.indexOf( theChild );
-						if ( childIndex >= 0 ) {
-							children.splice( childIndex, 1 );
-						}
-						if ( children.length === 0 ) {
-							done();
-						}
-					},
-					reportAssertions: function( assertionCount ) {
-						childrenAssertionsReported++;
-						totalAssertions += assertionCount;
-						if ( childrenAssertionsReported === totalChildren ) {
-							assert.expect( totalAssertions );
-						}
-					}
-				};
-
-			// We run the server first, because the server has to be there before the clients
-			// can run. OTOH, the clients may initiate the termination of the test via a non-error
-			// teardown request.
-			children.push( spawnOne( assert, _.extend( {}, spawnOptions, {
-				name: "Server",
-				path: serverPath,
-				onReady: function() {
-					var clientIndex = 0;
-					async.eachSeries( clientPaths, function startOneChild( item, callback ) {
-						children.push( spawnOne( assert, _.extend( {}, spawnOptions, {
-							name: "Client" +
-								( clientPaths.length > 1 ? " " + ( ++clientIndex ) : "" ),
-						path: item } ) ) );
-
-						// Spawn clients at least two seconds apart to avoid message uniqueness
-						// issue in iotivity: https://jira.iotivity.org/browse/IOT-724
-						setTimeout( callback, 2000 );
-					} );
-				}
-			} ) ) );
-		} );
-	} );
-}
-
-// Run tests. If no tests were specified on the command line, we scan the tests directory and run
-// all the tests we find therein.
-runTestSuites( ( suiteOptions.testList ?
-	( _.map( suiteOptions.testList.split( "," ), function( item ) {
-		return path.join( __dirname, suiteOptions.prefix, item );
-	} ) ) :
-	( glob.sync( path.join( __dirname, suiteOptions.prefix,
-		( havePromises() ? "" : "!(API)" ) + "*" ) ) ) ) );
-
-function processIsDying( anError, exitSignal ) {
-	var childIndex;
-
-	if ( anError && typeof anError !== "number" ) {
-		console.error( anError.message + anError.stack );
-	}
-
-	for ( childIndex in runningProcesses ) {
-		runningProcesses[ childIndex ].kill( "SIGKILL" );
-	}
-}
-
-process.on( "SIGINT", function() {
-	processIsDying();
-	process.exit( 0 );
-} );
-process.on( "exit", processIsDying );
-process.on( "uncaughtException", function( anError ) {
-	processIsDying( anError );
-	process.exit( 0 );
-} );
diff --git a/bindings/nodejs/tests/tests/Load Library.js b/bindings/nodejs/tests/tests/Load Library.js
deleted file mode 100644
index ac06e417..00000000
--- a/bindings/nodejs/tests/tests/Load Library.js	
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var testUtils = require( "../assert-to-console" );
-var theError = null;
-
-console.log( JSON.stringify( { assertionCount: 1 } ) );
-
-try {
-	require( require( "path" )
-		.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-} catch( anError ) {
-	theError = anError;
-}
-
-testUtils.assert( "deepEqual", theError, null,
-	"No error was thrown attempting to load the bindings" );
diff --git a/bindings/nodejs/tests/tests/Main Loop Interruption No Cleanup.js b/bindings/nodejs/tests/tests/Main Loop Interruption No Cleanup.js
deleted file mode 100644
index 8311ab13..00000000
--- a/bindings/nodejs/tests/tests/Main Loop Interruption No Cleanup.js	
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-require( "../helpers/main-loop-interruption-master" )( true );
diff --git a/bindings/nodejs/tests/tests/Main Loop Interruption.js b/bindings/nodejs/tests/tests/Main Loop Interruption.js
deleted file mode 100644
index dca8b258..00000000
--- a/bindings/nodejs/tests/tests/Main Loop Interruption.js	
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-require( "../helpers/main-loop-interruption-master" )( false );
diff --git a/bindings/nodejs/tests/tests/OIC Discovery/client1.js b/bindings/nodejs/tests/tests/OIC Discovery/client1.js
deleted file mode 100644
index 57bac3a1..00000000
--- a/bindings/nodejs/tests/tests/OIC Discovery/client1.js	
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var messagePrefix = "Client 1: ";
-var async = require( "async" );
-var _ = require( "lodash" );
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var testUtils = require( "../../assert-to-console" );
-var lastDiscoveryReturnValue;
-var theResource;
-
-console.log( JSON.stringify( { assertionCount: 4 } ) );
-
-var defaultAddress = {
-	bytes: _.fill( Array( 16 ), 0 ),
-	family: soletta.sol_network_family.SOL_NETWORK_FAMILY_INET,
-	port: 0
-};
-
-var client = soletta.sol_oic_client_new();
-
-var destination = soletta.sol_network_link_addr_from_str( {
-		bytes: _.fill( Array( 16 ), 0 ),
-		family: soletta.sol_network_family.SOL_NETWORK_FAMILY_INET,
-		port: 5683
-	}, "224.0.1.187" );
-testUtils.assert( "ok", !!destination, messagePrefix + "sol_network_addr_from_str() successful" );
-
-async.series( [
-	function findResource( callback ) {
-		soletta.sol_oic_client_find_resources( client, destination, "", "",
-			function( client, resource ) {
-				lastDiscoveryReturnValue = true;
-				if ( resource && resource.path === "/a/" + process.argv[ 2 ] ) {
-					testUtils.assert( "ok", true, messagePrefix + "Resource found" );
-					lastDiscoveryReturnValue = false;
-					theResource = resource;
-					callback();
-				}
-				return lastDiscoveryReturnValue;
-			} );
-	},
-	function tellServerImDone( callback ) {
-		soletta.sol_oic_client_request( client, theResource,
-			soletta.sol_coap_method.SOL_COAP_METHOD_PUT, { uuid: process.argv[ 2 ] },
-				function( code, client, address, response ) {
-					testUtils.assert( "strictEqual", code,
-						soletta.sol_coap_response_code.SOL_COAP_RESPONSE_CODE_OK,
-						messagePrefix + "server acknowledged PUT request" );
-
-					// If the server has heard from all of us clients, we can conclude the test
-					if ( response.putRequests >= 2 ) {
-						console.log( JSON.stringify( { killPeer: true } ) );
-					}
-					callback();
-				} );
-	}
-] );
-
-process.on( "exit", function() {
-	testUtils.assert( "strictEqual", lastDiscoveryReturnValue, false,
-		messagePrefix + "Last discovery return value was false" );
-} );
diff --git a/bindings/nodejs/tests/tests/OIC Discovery/client2.js b/bindings/nodejs/tests/tests/OIC Discovery/client2.js
deleted file mode 100644
index 8d350fda..00000000
--- a/bindings/nodejs/tests/tests/OIC Discovery/client2.js	
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var messagePrefix = "Client 2: ";
-var async = require( "async" );
-var _ = require( "lodash" );
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var testUtils = require( "../../assert-to-console" );
-var discoveryCallbackCount = 0;
-var theResource;
-
-console.log( JSON.stringify( { assertionCount: 3 } ) );
-
-var defaultAddress = {
-	bytes: _.fill( Array( 16 ), 0 ),
-	family: soletta.sol_network_family.SOL_NETWORK_FAMILY_INET,
-	port: 0
-};
-
-var client = soletta.sol_oic_client_new();
-var destination = soletta.sol_network_link_addr_from_str( {
-		bytes: _.fill( Array( 16 ), 0 ),
-		family: soletta.sol_network_family.SOL_NETWORK_FAMILY_INET,
-		port: 5683
-	}, "224.0.1.187" );
-
-var defaultAddress = {
-	bytes: _.fill( Array( 16 ), 0 ),
-	family: soletta.sol_network_family.SOL_NETWORK_FAMILY_INET,
-	port: 0
-};
-
-async.series( [
-	function waitForDiscoveryToComplete( callback ) {
-		soletta.sol_oic_client_find_resources( client, destination, "", "",
-			function( client, resource ) {
-				discoveryCallbackCount++;
-				if ( resource && resource.path === "/a/" + process.argv[ 2 ] ) {
-					theResource = resource;
-				}
-				if ( !resource ) {
-					testUtils.assert( "ok", true,
-						messagePrefix + "Discovery callback called with null" );
-					callback();
-				}
-				return true;
-			} );
-	},
-	function tellServerImDone( callback ) {
-		soletta.sol_oic_client_request( client, theResource,
-			soletta.sol_coap_method.SOL_COAP_METHOD_PUT, { uuid: process.argv[ 2 ] },
-				function( code, client, address, response ) {
-					testUtils.assert( "strictEqual", code,
-						soletta.sol_coap_response_code.SOL_COAP_RESPONSE_CODE_OK,
-						messagePrefix + "server acknowledged PUT request" );
-
-					// If the server has heard from all of us clients, we can conclude the test
-					if ( response.putRequests >= 2 ) {
-						console.log( JSON.stringify( { killPeer: true } ) );
-					}
-					callback();
-				} );
-	}
-] );
-
-process.on( "exit", function() {
-
-	// The discovery callback should have been called at least twice - once with the resource,
-	// and once with null
-	testUtils.assert( "ok", discoveryCallbackCount >= 2,
-		messagePrefix + "discovery callback was called at least twice" );
-} );
diff --git a/bindings/nodejs/tests/tests/OIC Discovery/server.js b/bindings/nodejs/tests/tests/OIC Discovery/server.js
deleted file mode 100644
index 04f48170..00000000
--- a/bindings/nodejs/tests/tests/OIC Discovery/server.js	
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var testUtils = require( "../../assert-to-console" );
-var putRequests = 0;
-var theResource;
-
-console.log( JSON.stringify( { assertionCount: 2 } ) );
-
-theResource = soletta.sol_oic_server_register_resource( {
-		interface: "oic.if.baseline",
-		resource_type: "core.light",
-		path: "/a/" + process.argv[ 2 ],
-		put: function putHandler( input, output ) {
-			testUtils.assert( "deepEqual", input, { uuid: process.argv[ 2 ] },
-				"Server: PUT request payload is as expected" );
-			output.putRequests = ++putRequests;
-			return soletta.sol_coap_response_code.SOL_COAP_RESPONSE_CODE_OK;
-		}
-	}, soletta.sol_oic_resource_flag.SOL_OIC_FLAG_DISCOVERABLE |
-		soletta.sol_oic_resource_flag.SOL_OIC_FLAG_ACTIVE );
-
-console.log( JSON.stringify( { ready: true } ) );
-
-process.on( "SIGINT", function() {
-	soletta.sol_oic_server_unregister_resource( theResource );
-} );
diff --git a/bindings/nodejs/tests/tests/OIC Polled Observation/client1.js b/bindings/nodejs/tests/tests/OIC Polled Observation/client1.js
deleted file mode 100644
index 0f3aaa6a..00000000
--- a/bindings/nodejs/tests/tests/OIC Polled Observation/client1.js	
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-require( "../../helpers/observation-client" )( "Client 1: ", 2, 2 );
diff --git a/bindings/nodejs/tests/tests/OIC Polled Observation/client2.js b/bindings/nodejs/tests/tests/OIC Polled Observation/client2.js
deleted file mode 100644
index 01500395..00000000
--- a/bindings/nodejs/tests/tests/OIC Polled Observation/client2.js	
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-require( "../../helpers/observation-client" )( "Client 2: ", 1, 2 );
diff --git a/bindings/nodejs/tests/tests/OIC Polled Observation/server.js b/bindings/nodejs/tests/tests/OIC Polled Observation/server.js
deleted file mode 100644
index 1023dfb3..00000000
--- a/bindings/nodejs/tests/tests/OIC Polled Observation/server.js	
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-require( "../../helpers/observation-server" )( false );
diff --git a/bindings/nodejs/tests/tests/OIC Server.js b/bindings/nodejs/tests/tests/OIC Server.js
deleted file mode 100644
index d86bfdfb..00000000
--- a/bindings/nodejs/tests/tests/OIC Server.js	
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var testUtils = require( "../assert-to-console" );
-var theResource;
-var anError = {};
-
-console.log( JSON.stringify( { assertionCount: 3 } ) );
-
-theResource = soletta.sol_oic_server_register_resource( {
-		path: "/a/" + process.argv[ 2 ],
-		resource_type: "core.light",
-		interface: "oic.if.baseline"
-	},
-	soletta.sol_oic_resource_flag.SOL_OIC_FLAG_ACTIVE |
-	soletta.sol_oic_resource_flag.SOL_OIC_FLAG_DISCOVERABLE );
-
-testUtils.assert( "ok", !!theResource, "sol_oic_server_register_resource() is successful" );
-
-soletta.sol_oic_server_unregister_resource( theResource );
-try {
-	soletta.sol_oic_server_unregister_resource( theResource );
-} catch( theError ) {
-	anError = theError;
-}
-
-testUtils.assert( "strictEqual", anError instanceof TypeError, true,
-	"Attempting to delete a resource twice causes a TypeError" );
-testUtils.assert( "strictEqual", anError.message,
-	"Object is not of type SolOicServerResource",
-	"TypeError message is as expected" );
diff --git a/bindings/nodejs/tests/tests/Simple Platform APIs.js b/bindings/nodejs/tests/tests/Simple Platform APIs.js
deleted file mode 100644
index 785a25f3..00000000
--- a/bindings/nodejs/tests/tests/Simple Platform APIs.js	
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var soletta = require( require( "path" )
-	.join( require( "bindings" ).getRoot( __filename ), "lowlevel" ) );
-var testUtils = require( "../assert-to-console" );
-var exec = require( "child_process" ).exec;
-var fs = require( "fs" );
-var childEnv = require( "lodash" ).extend( {}, process.env, { LD_PRELOAD: undefined } );
-
-console.log( JSON.stringify( { assertionCount: 3 } ) );
-
-// Use the UUID we were given as the soletta machine ID
-process.env.SOL_MACHINE_ID = process.argv[ 2 ].replace( /[-]/g, "" );
-testUtils.assert( "strictEqual", soletta.sol_platform_get_machine_id(),
-	process.env.SOL_MACHINE_ID, "Machine ID value is as expected" );
-
-exec( "hostname", { env: childEnv }, function( error, stdout ) {
-	if ( error ) {
-		testUtils.die( error );
-	}
-	testUtils.assert( "strictEqual", stdout.toString().trim(),
-		soletta.sol_platform_get_hostname(), "Hostname matches `hostname`" );
-} );
-
-exec( "uname -r", { env: childEnv }, function( error, stdout ) {
-	if ( error ) {
-		testUtils.die( error );
-	}
-	testUtils.assert( "strictEqual", stdout.toString().trim(),
-		soletta.sol_platform_get_os_version(), "OS version matches `uname -r`");
-} );
diff --git a/data/jsons/dependencies.json b/data/jsons/dependencies.json
index d7e93fac..6f147236 100644
--- a/data/jsons/dependencies.json
+++ b/data/jsons/dependencies.json
@@ -538,18 +538,6 @@
       "type": "exec",
       "exec": "genhtml"
     },
-    {
-      "dependency": "nodejs",
-      "type": "exec",
-      "exec": "node",
-      "version-command": "node --version",
-      "atleast-version": "v4.0"
-    },
-    {
-      "dependency": "nodejs_npm",
-      "type": "exec",
-      "exec": "npm"
-    },
     {
       "dependency": "chrpath",
       "type": "exec",
@@ -711,16 +699,6 @@
         "in-tree": "{TOP_SRCDIR}/src/thirdparty/mavlink",
         "out-of-tree": "{MAVLINK_SRC}"
       }
-    },
-    {
-      "dependency": "node_gyp",
-      "type": "filesystem",
-      "files": [
-        "node-gyp"
-      ],
-      "path": {
-        "out-of-tree": "{NODEJS_NPM_DIR}/node-gyp-bin"
-      }
     }
   ]
 }
diff --git a/index.js b/index.js
deleted file mode 100644
index d160926a..00000000
--- a/index.js
+++ /dev/null
@@ -1,20 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-// Export low-level bindings for now
-module.exports = require( "./lowlevel" );
diff --git a/lowlevel.js b/lowlevel.js
deleted file mode 100644
index 664b5660..00000000
--- a/lowlevel.js
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * This file is part of the Soletta Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _ = require( "lodash" );
-var soletta = require( "bindings" )( "soletta" );
-
-var cookedConstants = { forward: {}, reverse: {} };
-
-var isInteresting = /^[A-Z0-9_]+$/;
-
-_.each( soletta._sysConstants(), function( value, key ) {
-	if ( !key.match( isInteresting ) ) {
-		return;
-	}
-
-	var forward = cookedConstants.forward;
-	var reverse = cookedConstants.reverse;
-	var ns = key.split( "_" )[ 0 ];
-
-	ns = ( ns === key ) ?
-		( ns.substr( 0, 1 ) === "E" ? "E" :
-		ns.substr( 0, 3 ) === "SIG" ? "SIG" : ns )
-		: ns;
-
-	if ( !forward[ ns ] ) {
-		forward[ ns ] = {};
-	}
-	forward[ ns ][ key ] = value;
-
-	if ( !reverse[ ns ] ) {
-		reverse[ ns ] = {};
-	}
-	reverse[ ns ][ value ] = key;
-} );
-
-soletta._sysConstants( cookedConstants );
-
-module.exports = soletta;
diff --git a/package.json b/package.json
deleted file mode 100644
index a2498414..00000000
--- a/package.json
+++ /dev/null
@@ -1,40 +0,0 @@
-{
-  "name": "soletta",
-  "version": "0.0.1",
-  "description": "Node.js bindings for Soletta",
-  "main": "index.js",
-  "scripts": {
-    "preinstall": "echo '{}' > bindings/nodejs/generated/nodejs-bindings-sources.gyp",
-
-    "//": "Should not be needed once https://github.com/npm/npm/issues/12133 is fixed",
-    "install": "node-gyp rebuild",
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/solettaproject/soletta.git"
-  },
-  "keywords": [
-    "soletta",
-    "IoT",
-    "bindings"
-  ],
-  "author": "",
-  "license": "Apache-2.0",
-  "bugs": {
-    "url": "https://github.com/solettaproject/soletta/issues"
-  },
-  "homepage": "https://github.com/solettaproject/soletta#readme",
-  "dependencies": {
-    "bindings": "^1.2.1",
-    "lodash": "^4.3.0",
-    "nan": "^2.1.0"
-  },
-  "devDependencies": {
-    "async": "^1.5.2",
-    "glob": "^6.0.4",
-    "qunitjs": "^1.21.0",
-    "uuid": "^2.0.1",
-    "yargs": "^4.2.0"
-  }
-}
diff --git a/src/samples/nodejs/aio_read.js b/src/samples/nodejs/aio_read.js
deleted file mode 100644
index 433e2d98..00000000
--- a/src/samples/nodejs/aio_read.js
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * This sample code demonstrates the usage of AIO JS bindings for
- * configuring and reading the value of analog device connected to
- * the Edison.
- *
- * Pin configuration:
- * Analog input device (e.g. Grove Light Sensor) -> A0 on Edison
- * Arduino Breakout board.
- *
- * Press Ctrl+C to exit the process.
- */
-var aio = require( "soletta/aio" ),
-    aioPin = null,
-    readInterval;
-
-// Configure analog pin #0 (A0)
-aio.open( {
-    device: 1,
-    pin: 0
-} ).then( function( pin ) {
-    aioPin = pin;
-
-    readInterval = setInterval( function() {
-
-        // Read the value of analog input in every one second
-        pin.read().then( function( data ) {
-            console.log( "Value of the analog input device: ", data );
-        } ).catch( function( error ) {
-            console.log( "Failed to read the value ", error );
-            process.exit();
-        } );
-    }, 1000 );
-} ).catch( function( error ) {
-    console.log( "Could not open AIO: ", error );
-    process.exit();
-} );
-
-// Press Ctrl+C to exit the process
-process.on( "SIGINT", function() {
-    process.exit();
-} );
-
-process.on( "exit", function() {
-    if ( readInterval ) {
-        clearInterval( readInterval );
-    }
-
-    if ( aioPin ) {
-        aioPin.close();
-    }
-} );
diff --git a/src/samples/nodejs/calamari.js b/src/samples/nodejs/calamari.js
deleted file mode 100644
index f52ed847..00000000
--- a/src/samples/nodejs/calamari.js
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/* A simple sample of nodejs Soletta API. On a Calamari Lure - on top of a
- * MinnowBoard MAX - pressing buttons should toggle each colour of RGB led.
- * Moving Calamari lever shall also change intensit of lure PWM LED1.
- */
-
-gp = require('soletta/gpio');
-spi = require('soletta/spi');
-pwm = require('soletta/pwm');
-
-var pwmLed;
-var gpios = [];
-var lever;
-
-gpio_map = [{pin: 338}, {pin: 339}, {pin: 464},
-            {pin: 472, direction: "in", edge: "rising"},
-            {pin: 483, direction: "in", edge: "rising"},
-            {pin: 482, direction: "in", edge: "rising"}]
-            .map(function(pin_config) {
-                return new Promise(function(fulfill) {
-                    gp.open(pin_config)
-                        .then((gpio) => {
-                            gpios.push(gpio);
-                            fulfill(gpio);
-                        })
-                        .catch(function(fail) {
-                            console.log("Could not open gpio: ", fail);
-                            fulfill();
-                        });
-                });
-            });
-
-/* Hack in place: I really don't care about fulfilled values, only about
- * `gpios` array itself, as it is the one that contains valid gpios.
- * If we don't have six of them, then application failed. At least, we can
- * close all gpio that were opened at exit handler */
-Promise.all(gpio_map).then(_ => {
-    if (gpios.length == 6) {
-        btnLedControllers = [
-            {led: gpios[0], btn: gpios[3]},
-            {led: gpios[1], btn: gpios[4]},
-            {led: gpios[2], btn: gpios[5]},
-        ];
-        btnLedControllers.map(function(controller) {
-            var status = {status: true};
-            controller.btn.onchange = function(status, event) {
-                status.status = !status.status;
-                controller.led.write(status.status);
-            }.bind(this, status);
-        });
-    } else {
-        process.exit();
-    }
-});
-
-spi.open({bus: 0, frequency: 100 * 1000})
-    .then(function(_lever) {
-        lever = _lever;
-        setInterval(function() {
-            lever.transfer([0x01, 0x80, 0x00])
-                .then(function(read) {
-                    var val = (read[1] << 8 | read[2]) & 0x3ff;
-                    if (pwmLed) {
-                        pwmLed.setDutyCycle(Math.floor(val * 10000 / 1023));
-                    }
-                });
-        }, 100);
-    })
-    .catch(function(fail){
-        console.log("Could not open SPI: ", fail);
-        process.exit();
-    });
-
-pwm.open({device: 0, channel: 0, period: 10000, dutyCycle: 0, enabled: true})
-    .then(function(led){
-        pwmLed = led;
-    })
-    .catch(function(fail){
-        console.log("Could not open PWM: ", fail);
-        process.exit();
-    });
-
-process.on("exit", (code) => {
-    for (var i = 0; i < gpios.length; i++) {
-        gpios[i].close();
-    }
-
-    if (lever)
-        lever.close();
-    if (pwmLed)
-        pwmLed.close();
-});
diff --git a/src/samples/nodejs/gpio_by_label.js b/src/samples/nodejs/gpio_by_label.js
deleted file mode 100644
index 312b1bd1..00000000
--- a/src/samples/nodejs/gpio_by_label.js
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * This sample code blinks an LED connected to Edison GPIO pin label 7 in every
- * one second.
- *
- * Pin configuration:
- * Digital output device (e.g. Grove LED) -> pin 7 on Edison
- * Arduino Breakout board (D7 on the Grove base shield).
- *
- * Press Ctrl+C to exit the process.
- */
-var gpio = require( "soletta/gpio" ),
-    ledPin = null,
-    state = false,
-    changeInterval;
-
-// Change the LED state
-function changeState() {
-    state = !state;
-    ledPin.write( state ).then( function() {
-        console.log( "LED state changed" );
-    } ).catch( function( error ) {
-        console.log( "Failed to write on GPIO device: ", error );
-        process.exit();
-    } );
-}
-
-// Configure LED pin.
-gpio.open( {
-    name: "7"
-} ).then( function( pin ) {
-    ledPin = pin; // Save the handle
-
-    // Change the LED state in every one second.
-    changeInterval = setInterval( changeState, 1000 );
-} ).catch( function( error ) {
-    console.log( "Could not open GPIO pin by label: ", error );
-    process.exit();
-} );
-
-// Press Ctrl+C to exit the process
-process.on( "SIGINT", function() {
-    process.exit();
-} );
-
-process.on( "exit", function() {
-    if ( changeInterval ) {
-        clearInterval( changeInterval );
-    }
-
-    if ( ledPin ) {
-        ledPin.close();
-    }
-} );
diff --git a/src/samples/nodejs/gpio_monitor.js b/src/samples/nodejs/gpio_monitor.js
deleted file mode 100644
index 085d5481..00000000
--- a/src/samples/nodejs/gpio_monitor.js
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * Sample code to turn on/off an LED connected to Edison by
- * using button.
- *
- * Pin configuration:
- * LED pin -> 48 (D7 on the Grove base shield)
- * Button pin -> 49 (D8 on the Grove base shield)
- */
-var gpio = require( "soletta/gpio" ),
-    ledState = false,
-    ledPin = null,
-    buttonPin = null;
-
-// Configure LED pin.
-function setupLEDPin() {
-    gpio.open( {
-        pin: 48 // LED pin 48
-    } ).then( function( pin ) {
-        ledPin = pin;
-
-        // Setup 'onchange' event handler. The handler will
-        // be called whenever the button pin value changes.
-        buttonPin.onchange = function( event ) {
-            ledState = !ledState;
-            ledPin.write( ledState ).then( function() {
-                console.log( "LED state changed" );
-            } ).catch( function( error ) {
-                console.log( "Failed to write on GPIO device: ", error );
-                process.exit();
-            } );
-        };
-    } ).catch( function( error ) {
-        console.log( "Could not open LED pin for writing." );
-        process.exit();
-    } );
-}
-
-// Configure button pin.
-gpio.open( {
-    pin: 49, // Button pin 49
-    direction: "in", // Set the gpio direction to input
-    edge: "rising"
-} ).then( function( pin ) {
-    buttonPin = pin;
-
-    // Configure LED pin
-    setupLEDPin();
-} ).catch( function( error ) {
-    console.log( "Could not open button pin for reading." );
-} );
-
-process.on( "exit", function() {
-    if ( ledPin ) {
-        ledPin.close();
-    }
-
-    if ( buttonPin ) {
-        buttonPin.close();
-    }
-} );
diff --git a/src/samples/nodejs/gpio_read.js b/src/samples/nodejs/gpio_read.js
deleted file mode 100644
index a45a914b..00000000
--- a/src/samples/nodejs/gpio_read.js
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * This sample code demonstrates the usage of GPIO JS bindings for
- * configuring and reading the value of the digital input connected
- * to the Edison.
- *
- * Pin configuration:
- * Digital input device (e.g. Grove Button) -> 49 (D8 on the base shield)
- *
- * Press Ctrl+C to exit the process.
- */
-var gpio = require( "soletta/gpio" ),
-    gpioPin = null,
-    readInterval;
-
-gpio.open( {
-    pin: 49, // Setup pin 49 for reading
-    direction: "in" // Set the gpio direction to input
-} ).then( function( pin ) {
-    gpioPin = pin;
-
-    readInterval = setInterval( function() {
-
-        // Read the value of the digital input in every one second.
-        gpioPin.read().then( function( value ) {
-            console.log( "GPIO value is ", value );
-        } ).catch( function( error ) {
-            console.log( "Failed to read the value: ", error );
-            process.exit();
-        } );
-    }, 1000 );
-} ).catch( function( error ) {
-    console.log( "Could not open GPIO: ", error );
-    process.exit();
-} );
-
-// Press Ctrl+C to exit the process
-process.on( "SIGINT", function() {
-    process.exit();
-} );
-
-process.on( "exit", function() {
-    if ( readInterval ) {
-        clearInterval( readInterval );
-    }
-
-    if ( gpioPin ) {
-        gpioPin.close();
-    }
-} );
diff --git a/src/samples/nodejs/gpio_write.js b/src/samples/nodejs/gpio_write.js
deleted file mode 100644
index a9e34e3e..00000000
--- a/src/samples/nodejs/gpio_write.js
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * This sample code blinks an LED connected to Edison GPIO pin 48 in every
- * one second.
- *
- * Pin configuration:
- * Digital output device (e.g. Grove LED) -> 48 (D7 on the Grove base shield)
- *
- * Press Ctrl+C to exit the process.
- */
-var gpio = require( "soletta/gpio" ),
-    ledPin = null,
-    state = false,
-    changeInterval;
-
-// Change the LED state
-function changeState() {
-    state = !state;
-    ledPin.write( state ).then( function() {
-        console.log( "LED state changed" );
-    } ).catch( function( error ) {
-        console.log( "Failed to write on GPIO device: ", error );
-        process.exit();
-    } );
-}
-
-// Configure LED pin.
-gpio.open( {
-    pin: 48
-} ).then( function( pin ) {
-    ledPin = pin; // Save the handle
-
-    // Change the LED state in every one second.
-    changeInterval = setInterval( changeState, 1000 );
-} ).catch( function( error ) {
-    console.log( "Could not open GPIO: ", error );
-    process.exit();
-} );
-
-// Press Ctrl+C to exit the process
-process.on( "SIGINT", function() {
-    process.exit();
-} );
-
-process.on( "exit", function() {
-    if ( changeInterval ) {
-        clearInterval( changeInterval );
-    }
-
-    if ( ledPin ) {
-        ledPin.close();
-    }
-} );
diff --git a/src/samples/nodejs/pwm_led.js b/src/samples/nodejs/pwm_led.js
deleted file mode 100644
index 3fcf6596..00000000
--- a/src/samples/nodejs/pwm_led.js
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * Sample code to demonstrate the usage of PWM JS bindings for
- * configuring and using PWM pins.
- *
- * This example changes the brightness of an LED in a loop.
- *
- * Pin configuration:
- * LED (e.g. Grove LED) -> PWM pin 3 on Edison Arduino Breakout
- * board (D3 on Grove base shield)
- *
- * Press Ctrl+C to exit the process.
- */
-var pwm = require( "soletta/pwm" ),
-    pwmPin = null,
-    dutyCycle = 0,
-    delta = 0.1,
-    changeInterval;
-
-// Change brightness of an LED
-function changeLEDBrightness() {
-    if ( dutyCycle <= 0 ) {
-        // Increase the brightness
-        delta = 0.1;
-    } else if ( dutyCycle >= 1 ) {
-        // Decrease the brightness
-        delta = -0.1;
-    }
-
-    dutyCycle = parseFloat( ( dutyCycle + delta ).toFixed( 1 ) );
-    pwmPin.setDutyCycle( dutyCycle * 10000 ).then( function() {
-        console.log( "LED brightness changed" );
-    } ).catch( function( error ) {
-        console.log( "PWM error: ", error );
-        process.exit();
-    } );
-}
-
-// Configure PWM pin
-pwm.open( {
-    device: 0,
-    channel: 0,
-    period: 10000,
-    dutyCycle: 0,
-    enabled: true
-} ).then( function( pin ) {
-    pwmPin = pin;
-    changeInterval = setInterval( changeLEDBrightness, 300 );
-} ).catch( function( error ) {
-    console.log( "PWM error: ", error );
-    process.exit();
-} );
-
-// Press Ctrl+C to exit the process
-process.on( "SIGINT", function() {
-    process.exit();
-} );
-
-process.on( "exit", function() {
-    if ( changeInterval ) {
-        clearInterval( changeInterval );
-    }
-
-    // Close the PWM pin
-    if ( pwmPin ) {
-        pwmPin.close();
-    }
-} );
diff --git a/src/samples/nodejs/spi_max31855.js b/src/samples/nodejs/spi_max31855.js
deleted file mode 100644
index 5e2276d8..00000000
--- a/src/samples/nodejs/spi_max31855.js
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * This sample code demonstrates the usage of SPI JS bindings for
- * configuring and reading the temperature in Celsius from the
- * thermocouple amplifier MAX31855 connected to the MinnowBoard MAX.
- *
- * Pin configuration:
- * The thermocouple amplifier talks over SPI, so connect it to the SPI pins.
- * Vin -> MinnowBoard MAX pin 4 (3.3V)
- * GND -> MinnowBoard MAX pin 2 (GND)
- * DO  -> MinnowBoard MAX pin 7 (MISO)
- * CS  -> MinnowBoard MAX pin 5 (CSO)
- * CLK -> MinnowBoard MAX pin 11 (SCLK)
- *
- * Press Ctrl+C to exit the process.
- */
-var spi = require( "soletta/spi" ),
-    spiBus = null,
-    readInterval;
-
-spi.open( {
-    bus: 0,
-    frequency: 2000000
-} ).then( function( bus ) {
-    spiBus = bus;
-
-    // Take a temperature reading in every one second
-    readInterval = setInterval( function() {
-        var buf = new Buffer( 4 );
-        buf.fill( 0 );
-        spiBus.transfer( buf ).then( function( rx ) {
-            var rawValue = ( rx[ 0 ] << 24 ) | ( rx[ 1 ] << 16 ) | ( rx[ 2 ] << 8 ) | rx[ 3 ];
-            if ( rawValue & 0x7 ) {
-                console.log( "Incorrect value received" );
-                return;
-            }
-
-            var c = rawValue >> 18;
-            c *= 0.25; // LSB = 0.25 deg C
-            console.log( "Value in Celsius:", c );
-        } ).catch( function( error ) {
-            console.log( "SPI transfer error: ", error );
-            process.exit();
-        } );
-    }, 1000 );
-} ).catch( function( error ) {
-    console.log( "SPI error: ", error );
-    process.exit();
-} );
-
-// Press Ctrl+C to exit the process
-process.on( "SIGINT", function() {
-    process.exit( 0 );
-} );
-
-process.on( "exit", function() {
-    if ( readInterval ) {
-        clearInterval( readInterval );
-    }
-
-    if ( spiBus ) {
-        spiBus.close();
-    }
-} );
diff --git a/src/samples/nodejs/uart_sample.js b/src/samples/nodejs/uart_sample.js
deleted file mode 100644
index 299716ce..00000000
--- a/src/samples/nodejs/uart_sample.js
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * This file is part of the Soletta (TM) Project
- *
- * Copyright (C) 2015 Intel Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/*
- * This sample code demonstrates the usage of UART JS bindings for
- * reading and writing data to a UART accessible device.
- *
- * Setup:
- * Use two UART cables and connect RX/TX pins in the cable #1 to
- * TX/RX pins in the cable #2.
- */
-
-var uart = require( "soletta/uart" ),
-    args = process.argv.slice( 2 ),
-    uartproducer = null,
-    uartConsumer = null;
-
-var options = {
-    help: false,
-    producer,
-    consumer
-};
-
-const usage = "Usage: node uart_sample.js -p <producerUART> -c <consumerUART>\n" +
-    "options: \n" +
-    "  -h, --help \n" +
-    "  -p, --producer <producerUART>\n" +
-    "  -c, --consumer <consumerUART>\n";
-
-for ( var i = 0; i < args.length; i++ ) {
-    var arg = args[ i ];
-
-    switch ( arg ) {
-        case "-h":
-        case "--help":
-            options.help = true;
-            break;
-        case "-p":
-        case "--producer":
-            var producer = args[ i + 1 ];
-            if ( typeof producer == "undefined" ) {
-                console.log( usage );
-                process.exit( 0 );
-            }
-            options.producer = producer;
-            break;
-        case "-c":
-        case "--consumer":
-            var consumer = args[ i + 1 ];
-            if ( typeof consumer == "undefined" ) {
-                console.log( usage );
-                process.exit( 0 );
-            }
-            options.consumer = consumer;
-            break;
-        default:
-            break;
-    }
-}
-
-if ( options.help == true ) {
-    console.log( usage );
-    process.exit( 0 );
-}
-
-if ( !options.producer || !options.consumer ) {
-    console.log( usage );
-    process.exit( 0 );
-}
-
-// Setup UART for writing
-uart.open( {
-    port: options.producer
-} ).then( function( connection ) {
-    uartproducer = connection;
-
-    // Send the data
-    connection.write( "UART test " ).then( function() {
-        connection.write( [ 0x62, 0x75, 0x66, 0x66, 0x65, 0x72 ] ).then( function() {
-            console.log( "UART Producer: Data sent successfully!" );
-        } );
-    } ).catch( function( error ) {
-        console.log( "UART error: ", error );
-        process.exit();
-    } );
-} ).catch( function( error ) {
-    console.log( "UART error: ", error );
-    process.exit();
-} );
-
-// Setup UART for reading
-uart.open( {
-    port: options.consumer
-} ).then( function( connection ) {
-    uartConsumer = connection;
-
-    // Setup 'onread' event handler to receive the data.
-    connection.onread = function( event ) {
-        console.log( "UART Consumer: Received data:", event.data.toString( "utf-8" ) );
-    };
-} );
-
-// Press Ctrl+C to exit the process
-process.on( "SIGINT", function() {
-    process.exit();
-} );
-
-process.on( "exit", function() {
-    if ( uartproducer ) {
-        uartproducer.close();
-    }
-    if ( uartConsumer ) {
-        uartConsumer.close();
-    }
-} );
diff --git a/tools/build/Makefile.common b/tools/build/Makefile.common
index 33add5a8..2b673b78 100644
--- a/tools/build/Makefile.common
+++ b/tools/build/Makefile.common
@@ -69,7 +69,6 @@ soletta_help:
 	$(Q)echo  "  check-fbp-bin-valgrind - Generates + compiles + runs fbp (Flow Based Programming) tests - with valgrind"
 	$(Q)echo  "  check-cpp - Generates + compiles + a cpp file including all soletta's public headers"
 	$(Q)echo  "  check-stub         - Check script that generates stub files for node types"
-	$(Q)echo  "  check-bindings-nodejs - Check if the node.js bindings work properly"
 	$(Q)echo  "  coverage           - Builds soletta with gcov and generates the coverage report"
 	$(Q)echo  "  samples            - Builds the samples directory"
 	$(Q)echo  "  doxygen            - Generates doxygen documentation"
diff --git a/tools/build/Makefile.targets b/tools/build/Makefile.targets
index 8a20ff72..2efe8bbc 100644
--- a/tools/build/Makefile.targets
+++ b/tools/build/Makefile.targets
@@ -1,11 +1,6 @@
 tests: $(SOL_LIB_OUTPUT) $(tests-out) $(modules-out)
 
 CHECK_DEPS := tests
-ifneq ($(USE_NODEJS),)
-# Disabling it for a while since these checks are randomly failing
-# on most builds. As soon as it's solved this should be reverted.
-# CHECK_DEPS += check-bindings-nodejs
-endif
 
 check: $(CHECK_DEPS)
 	$(Q)$(PYTHON) $(TEST_SUITE_RUN_SCRIPT) --tests="$(tests-out)"
@@ -207,48 +202,6 @@ endif
 
 PHONY += cheat-sheet
 
-ifneq ($(USE_NODEJS),)
-
-bins-out += $(build_stagedir)/bindings-nodejs.stamp
-NODE_GYP ?= $(NODE_GYP_PATH)/node-gyp
-
-$(build_stagedir)/bindings-nodejs.stamp: $(SOL_LIB_OUTPUT) $(shell find bindings/nodejs/src -type f)
-	$(Q) $(NODEJS_NPM) install --ignore-scripts --production
-
-	$(Q) \
-		SOL_CONFIG_OIC=$(OIC) \
-		SOL_CONFIG_USE_GPIO=$(USE_GPIO) \
-		SOL_CONFIG_USE_AIO=$(USE_AIO) \
-		SOL_CONFIG_USE_UART=$(USE_UART) \
-		SOL_CONFIG_USE_PWM=$(USE_PWM) \
-		SOL_CONFIG_USE_SPI=$(USE_SPI) \
-		SOL_CONFIG_USE_I2C=$(USE_I2C) \
-		SOL_CONFIG_NETWORK=$(NETWORK) \
-			$(NODEJS) bindings/nodejs/configure-bindings.js
-
-	$(Q) ( \
-		export SOLETTA_CFLAGS="$(addprefix -I,$(abspath $(HEADERDIRS)))"; \
-		export SOLETTA_LIBS="$(FIND_LIBRARY_LDFLAGS)"; \
-			$(NODE_GYP) configure && $(NODE_GYP) build )
-
-	$(Q) mkdir -p $(build_nodejs_bindingsdir)
-	$(Q) cp -a *js package.json $(build_nodejs_bindingsdir)
-	$(Q) mkdir -p $(build_nodejs_bindingsdir)/build
-	$(Q) cp $$(find build -type f -name soletta.node | grep -v 'soletta_sysroot' | head -n 1) \
-		$(build_nodejs_bindingsdir)/build
-	$(Q) mkdir -p $(build_nodejs_bindingsdir)/node_modules
-	$(Q) cp -a ./node_modules/* $(build_nodejs_bindingsdir)/node_modules
-
-	$(Q) touch $(build_stagedir)/bindings-nodejs.stamp
-
-check-bindings-nodejs: $(build_stagedir)/bindings-nodejs.stamp
-	$(Q) $(NODEJS_NPM) install --ignore-scripts
-	$(Q) $(NODEJS) $(NODEJS_ROOT)/tests/suite.js --ldPreload="$(LIB_ASAN_PATH)" \
-		--testList="Load Library.js,Main Loop Interruption.js,Main Loop Interruption No Cleanup.js,Simple Platform APIs.js"
-PHONY += check-bindings-nodejs
-
-endif #neq($(USE_NODEJS),)
-
 DEFAULT_ALIAS_FILE := $(build_aliasesdir)/50-default.json
 
 ifeq (y,$(USE_FLOW))
diff --git a/tools/build/Makefile.vars b/tools/build/Makefile.vars
index 9fa2830c..578e45a8 100644
--- a/tools/build/Makefile.vars
+++ b/tools/build/Makefile.vars
@@ -154,7 +154,6 @@ build_datadir := $(build_sysroot)$(SOL_DATADIR)
 build_flowdatadir := $(build_sysroot)$(SOL_FLOW_DATADIR)
 build_gdbautoload := $(build_sysroot)$(DATADIR)gdb/auto-load/
 build_docdir := $(build_stagedir)doc/
-build_nodejs_bindingsdir := $(build_libdir)/node_modules/soletta/
 build_aliasesdir := $(build_sysroot)$(SOL_FLOW_DATADIR)/aliases/
 
 PACKAGE_DOCNAME := soletta-$(SOL_VERSION)-doc
@@ -520,8 +519,4 @@ else
 TEST_FBP_SCRIPT_SKIP_EXTRA := SKIP_JAVASCRIPT
 endif
 
-ifneq ($(USE_NODEJS),)
-NODEJS_ROOT := $(top_srcdir)/bindings/nodejs
-endif
-
 OIC_DATA_MODELS := $(top_srcdir)src/thirdparty/oic-data-models