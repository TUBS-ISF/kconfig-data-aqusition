"2005-09-14 16:08:06 +0000"
diff --git a/include/libbb.h b/include/libbb.h
index 15af6c463..024f33f76 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -446,7 +446,7 @@ typedef struct {
 	char state[4];
 	unsigned long rss;
 	int ppid;
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 	unsigned pcpu;
 	unsigned pscpu;
 	unsigned long stime, utime;
diff --git a/libbb/procps.c b/libbb/procps.c
index 72f627f15..2f675a544 100644
--- a/libbb/procps.c
+++ b/libbb/procps.c
@@ -72,7 +72,7 @@ extern procps_status_t * procps_scan(int save_user_arg0)
 		"%c %d "
 		"%*s %*s %*s %*s "     /* pgrp, session, tty, tpgid */
 		"%*s %*s %*s %*s %*s " /* flags, min_flt, cmin_flt, maj_flt, cmaj_flt */
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 		"%lu %lu "
 #else
 		"%*s %*s "
@@ -83,12 +83,12 @@ extern procps_status_t * procps_scan(int save_user_arg0)
 		"%*s "                 /* vsize */
 		"%ld",
 		curstatus.state, &curstatus.ppid,
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 		&curstatus.utime, &curstatus.stime,
 #endif
 		&tasknice,
 		&curstatus.rss);
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 		if(n != 6)
 #else
 		if(n != 4)
diff --git a/procps/Config.in b/procps/Config.in
index 7672582dd..62d2c4fc7 100644
--- a/procps/Config.in
+++ b/procps/Config.in
@@ -57,7 +57,7 @@ config CONFIG_TOP
 	  The top program provides a dynamic real-time view of a running
 	  system.
 
-config FEATURE_CPU_USAGE_PERCENTAGE
+config ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 	bool "  Support showing CPU usage percentage (add 2k bytes)"
 	default y
 	depends on CONFIG_TOP
diff --git a/procps/top.c b/procps/top.c
index fcb570b64..ddf933d4a 100644
--- a/procps/top.c
+++ b/procps/top.c
@@ -35,9 +35,9 @@
 #include <sys/ioctl.h>
 #include "busybox.h"
 
-//#define FEATURE_CPU_USAGE_PERCENTAGE  /* + 2k */
+//#define ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE  /* + 2k */
 
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 #include <time.h>
 #include <sys/time.h>
 #include <fcntl.h>
@@ -62,7 +62,7 @@ static int mem_sort (procps_status_t *P, procps_status_t *Q)
     return (int)(Q->rss - P->rss);
 }
 
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 
 #define sort_depth 3
 static cmp_t sort_function[sort_depth];
@@ -279,7 +279,7 @@ static void do_stats(void)
 }
 #else
 static cmp_t sort_function;
-#endif /* FEATURE_CPU_USAGE_PERCENTAGE */
+#endif /* ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE */
 
 /* display generic info (meminfo / loadavg) */
 static unsigned long display_generic(void)
@@ -368,7 +368,7 @@ static void display_status(int count, int col)
 	char rss_str_buf[8];
 	unsigned long total_memory = display_generic();
 
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 	/* what info of the processes is shown */
 	printf("\n\e[7m  PID USER     STATUS   RSS  PPID %%CPU %%MEM COMMAND\e[0m\n");
 #else
@@ -386,7 +386,7 @@ static void display_status(int count, int col)
 			sprintf(rss_str_buf, "%6ldM", s->rss/1024);
 		else
 			sprintf(rss_str_buf, "%7ld", s->rss);
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 		printf("%5d %-8s %s  %s %5d %2d.%d %2u.%u ",
 			s->pid, s->user, s->state, rss_str_buf, s->ppid,
 			s->pcpu/10, s->pcpu%10, pmem/10, pmem%10);
@@ -422,7 +422,7 @@ static void reset_term(void)
 	tcsetattr(0, TCSANOW, (void *) &initial_settings);
 #ifdef CONFIG_FEATURE_CLEAN_UP
 	clearmems();
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 	free(save_history);
 #endif
 #endif /* CONFIG_FEATURE_CLEAN_UP */
@@ -463,7 +463,7 @@ int top_main(int argc, char **argv)
 	/* Default to 25 lines - 5 lines for status */
 	lines = 25 - 5;
 	/* Default CMD format size */
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 	col = 35 - 6;
 #else
 	col = 35;
@@ -491,7 +491,7 @@ int top_main(int argc, char **argv)
 	get_terminal_width_height(0, &col, &lines);
 	if (lines > 4) {
 	    lines -= 5;
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 	    col = col - 80 + 35 - 6;
 #else
 	    col = col - 80 + 35;
@@ -499,13 +499,13 @@ int top_main(int argc, char **argv)
 	}
 #endif /* CONFIG_FEATURE_USE_TERMIOS */
 
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 	sort_function[0] = pcpu_sort;
 	sort_function[1] = mem_sort;
 	sort_function[2] = time_sort;
 #else
 	sort_function = mem_sort;
-#endif /* FEATURE_CPU_USAGE_PERCENTAGE */
+#endif /* ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE */
 
 	while (1) {
 		/* read process IDs & status for all the processes */
@@ -520,7 +520,7 @@ int top_main(int argc, char **argv)
 		if (ntop == 0) {
 		bb_perror_msg_and_die("scandir('/proc')");
 	}
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 		if(!Hertz) {
 			init_Hertz_value();
 			do_stats();
@@ -531,7 +531,7 @@ int top_main(int argc, char **argv)
 		do_stats();
 #else
 		qsort(top, ntop, sizeof(procps_status_t), (void*)sort_function);
-#endif /* FEATURE_CPU_USAGE_PERCENTAGE */
+#endif /* ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE */
 		opt = lines;
 		if (opt > ntop) {
 			opt = ntop;
@@ -551,7 +551,7 @@ int top_main(int argc, char **argv)
 			if(c == 'q' || c == initial_settings.c_cc[VINTR])
 				return EXIT_SUCCESS;
 			if(c == 'M') {
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 				sort_function[0] = mem_sort;
 				sort_function[1] = pcpu_sort;
 				sort_function[2] = time_sort;
@@ -559,7 +559,7 @@ int top_main(int argc, char **argv)
 				sort_function = mem_sort;
 #endif
 			}
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 			if(c == 'P') {
 				sort_function[0] = pcpu_sort;
 				sort_function[1] = mem_sort;
@@ -572,7 +572,7 @@ int top_main(int argc, char **argv)
 			}
 #endif
 			if(c == 'N') {
-#ifdef FEATURE_CPU_USAGE_PERCENTAGE
+#ifdef ENABLE_FEATURE_TOP_CPU_USAGE_PERCENTAGE
 				sort_function[0] = pid_sort;
 #else
 				sort_function = pid_sort;